[{"path":"array","name":"array","headline":"Package array provides functions for building tables from flux arrays.","description":null,"members":{"from":{"Function":{"name":"from","headline":"from constructs a table from an array of records. ","description":"Each record in the array is converted into an output row or record. Allrecords must have the same keys and data types. ## Build an arbitrary table\n```\nimport \"array\"\n\nrows = [\n  {foo: \"bar\", baz: 21.2},\n  {foo: \"bar\", baz: 23.8}\n]\n\narray.from(rows: rows)\n```\n\n## Union custom rows with query results\n```\nimport \"influxdata/influxdb/v1\"\nimport \"array\"\n\ntags = v1.tagValues(\n  bucket: \"example-bucket\",\n  tag: \"host\"\n)\n\nwildcard_tag = array.from(rows: [{_value: \"*\"}])\n\nunion(tables: [tags, wildcard_tag])\n```\n\n","parameters":[{"name":"rows","headline":" is the array of records to construct a table with.","description":null,"required":false}],"flux_type":"Fun"}}}},{"path":"contrib/RohanSreerama5/naiveBayesClassifier","name":"naiveBayesClassifier","headline":"Final working code as of August 11, 2020Currently supports single field classification and binary data sets Please ensure Ruby is installed","description":null,"members":{"naiveBayes":{"Function":{"name":"naiveBayes","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/anaisdg/anomalydetection","name":"anomalydetection","headline":"","description":null,"members":{"mad":{"Function":{"name":"mad","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/anaisdg/statsmodels","name":"statsmodels","headline":"","description":null,"members":{"linearRegression":{"Function":{"name":"linearRegression","headline":"performs linear regression, calculates y_hat, and residuals squared (rse) ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/bonitoo-io/alerta","name":"alerta","headline":"","description":null,"members":{"alert":{"Function":{"name":"alert","headline":"alert sends an alert to Alerta. url - string - Alerta URL. apiKey - string - Alerta API key. resource - string - resource under alarm. event - string - event name. environment - string - environment. Valid values: \"Production\", \"Development\" or empty string (default). severity - string - event severity. See https://docs.alerta.io/en/latest/api/alert.html#alert-severities. service - arrays of string - list of affected services. group - string - event group. value - string - event value. text - string - text description. type - string - event type. origin - string - monitoring component. timestamp - time - time alert was generated. timeout - int - seconds before alert is considered stale. ","description":"","parameters":[],"flux_type":"Fun"}},"endpoint":{"Function":{"name":"endpoint","headline":"endpoint creates the endpoint for the Alerta. url - string - VictorOps REST endpoint URL. No default. apiKey - string - Alerta API key. environment - string - environment. Valid values: \"Production\", \"Development\" or empty string (default). origin - string - monitoring component. The returned factory function accepts a mapFn parameter. The mapFn must return an object with resource, event, severity, service, group, value, text,tags, attributes, origin, type and timestamp fields as defined in the alert function arguments. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/bonitoo-io/tickscript","name":"tickscript","headline":"","description":null,"members":{"deadman":{"Function":{"name":"deadman","headline":"deadman is a helper function similar to TICKscript deadman. ","description":"","parameters":[],"flux_type":"Fun"}},"alert":{"Function":{"name":"alert","headline":"alert is a helper function similar to TICKscript alert. ","description":"","parameters":[],"flux_type":"Fun"}},"join":{"Function":{"name":"join","headline":"join merges two streams using standard join(). It is meant a convenience function, it ensures _measurement column exists and is in the group key. ","description":"","parameters":[],"flux_type":"Fun"}},"defineCheck":{"Function":{"name":"defineCheck","headline":"defineCheck creates custom check data required by alert() and deadman()","description":"","parameters":[],"flux_type":"Fun"}},"select":{"Function":{"name":"select","headline":"select selects a column and optionally computes aggregated value. It is meant to be a convenience function to be used for:","description":"query(\"SELECT x AS y\")query(\"SELECT f(x) AS y\") without time grouping","parameters":[],"flux_type":"Fun"}},"compute":{"Function":{"name":"compute","headline":"compute computes aggregated value of the input data. It is a convenience function to be used as","description":"|median('x)'.as(y)","parameters":[],"flux_type":"Fun"}},"selectWindow":{"Function":{"name":"selectWindow","headline":"selectWindow selects a column with time grouping and computes aggregated values. It is a convenience function to be used as","description":"query(\"SELECT f(x) AS y\").groupBy(time(t), ...)","parameters":[],"flux_type":"Fun"}},"groupBy":{"Function":{"name":"groupBy","headline":"groupBy groups by specified columns. It is a convenience function, it adds _measurement column which is required by monitor.check(). ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/bonitoo-io/victorops","name":"victorops","headline":"","description":null,"members":{"alert":{"Function":{"name":"alert","headline":"alert sends an alert to VictorOps. url - string - VictorOps REST endpoint URL. No default. messageType - string - Alert behaviour. Valid values: \"CRITICAL\", \"WARNING\", \"INFO\". entityID - string - Incident ID. entityDisplayName - string - Incident summary. stateMessage - string - Incident verbose message. timestamp - time - Incident timestamp. Default value: now(). monitoringTool - string - Monitoring agent name. Default value: \"InfluxDB\". ","description":"","parameters":[],"flux_type":"Fun"}},"endpoint":{"Function":{"name":"endpoint","headline":"endpoint creates the endpoint for the VictorOps. url - string - VictorOps REST endpoint URL. No default. The returned factory function accepts a mapFn parameter. monitoringTool - string - Monitoring agent name. Default value: \"InfluxDB\". The mapFn must return an object with messageType, entityID, entityDisplayName, stateMessage, timestamp fields as defined in the alert function arguments. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/bonitoo-io/zenoss","name":"zenoss","headline":"","description":null,"members":{"event":{"Function":{"name":"event","headline":"event sends event to Zenoss. url - string - events web service URL. username - string - username for HTTP BASIC authentication. Default is empty string (no auth). password - string - password for HTTP BASIC authentication. Default is empty string (no auth). action - string - routername. Default is \"EventsRouter\". method - string - router name. Default is \"add_event\". type - string - event type. Default is \"rpc\". tid - int - temporary transaction ID. Default is 1. summary - string - event summary. Default is empty string. device - string - related device. Default is empty string. component - string - related component. severity - string - severity of the event. eventClass - string - event class. Default is empty string. eventClassKey - string - event class key. Default is empty string. collector - string - collector. Default is empty string. message - string - event message. Default is empty string. ","description":"","parameters":[],"flux_type":"Fun"}},"endpoint":{"Function":{"name":"endpoint","headline":"endpoint return method for sending events to Zenoss. Parameters:url - string - events web service URL. username - string - username for HTTP BASIC authentication. Default is empty string (no auth). password - string - password for HTTP BASIC authentication. Default is empty string (no auth). action - string - routername. Default is \"EventsRouter\". method - string - router name. Default is \"add_event\". type - string - event type. Default is \"rpc\". tid - int - temporary transaction ID. Default is 1. The returned factory function accepts a mapFn parameter. The mapFn must return record with summary, device, component, severity, eventClass, eventClassKey, collector and message fields as defined in the event function arguments. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/chobbs/discord","name":"discord","headline":"","description":null,"members":{"discordURL":{"Value":{"name":"discordURL","headline":"","description":"","flux_type":"string"}},"endpoint":{"Function":{"name":"endpoint","headline":"endpoint creates a factory function that creates a target function for pipeline |> to send messages to discord for each table row. webhookToken - string - the secure token of the webhook. webhookID - string - the ID of the webhook. username - string - username posting the message. avatar_url -  override the default avatar of the webhook. The returned factory function accepts a mapFn parameter. The mapFn must return an object with content, as defined in the send function arguments. ","description":"","parameters":[],"flux_type":"Fun"}},"send":{"Function":{"name":"send","headline":"webhookToken - string - the secure token of the webhook. webhookID - string - the ID of the webhook. username - string - username posting the message. content - string - the text to display in discord. avatar_url -  override the default avatar of the webhook. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/jsternberg/aggregate","name":"aggregate","headline":"","description":null,"members":{"min":{"Function":{"name":"min","headline":"min constructs a min aggregate or selector for the column. ","description":"","parameters":[],"flux_type":"Fun"}},"count":{"Function":{"name":"count","headline":"count constructs a count aggregate for the column. ","description":"","parameters":[],"flux_type":"Fun"}},"max":{"Function":{"name":"max","headline":"max constructs a max aggregate or selector for the column. ","description":"","parameters":[],"flux_type":"Fun"}},"table":{"Function":{"name":"table","headline":"table will aggregate columns and create tables with a singlerow containing the aggregated value. ","description":"This function takes a single parameter of columns. The parameteris an object with the output column name as the key and the aggregateobject as the value. The aggregate object is composed of at least the following required attributes:column = stringThe column name for the input. init = (values) -> stateAn initial function to compute the initial state of theoutput. This can return either the final aggregate or atemporary state object that can be used to compute thefinal aggregate. The values parameter will always be anon-empty array of values from the specified column. reduce = (values, state) -> stateA function that takes in another buffer of valuesand the current state of the aggregate and computesthe updated state. compute = (state) -> valueA function that takes the state and computes the finalaggregate. fill = valueThe value passed to fill, if present, will determine whatthe aggregate does when there are no values. This can either be a value or one of the predefinedidentifiers of null or none. This value must be the same type as the value return fromcompute. An example of usage is:tables |> aggregate.table(columns: {\"min_bottom_degrees\": aggregate.min(column: \"bottom_degrees\"),])","parameters":[],"flux_type":"Fun"}},"mean":{"Function":{"name":"mean","headline":"mean constructs a mean aggregate for the column. ","description":"","parameters":[],"flux_type":"Fun"}},"_make_selector":{"Function":{"name":"_make_selector","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"none":{"Value":{"name":"none","headline":"none is a sentinel value for fill that will skipemitting a row if there are no values for an interval. ","description":"","flux_type":"t7167"}},"null":{"Value":{"name":"null","headline":"null is a sentinel value for fill that will fillin a null value if there were no values for an interval. ","description":"","flux_type":"t7168"}},"window":{"Function":{"name":"window","headline":"window will aggregate columns and create tables byorganizing incoming points into windows. ","description":"Each table will have two additional columns: start and stop. These are the start and stop times for each interval. It is not possible to use start or stop as destination columnnames with this function. The start and stop columns are notadded to the group key. The same options as for table apply to window. In addition to those options, window requires oneadditional parameter. every = durationThe duration between the start of each interval. Along with the above required option, there are a few additionaloptional parameters. time = stringThe column name for the time input. This defaults to _time or time, whichever is earlier inthe list of columns. period = durationThe length of the interval. This defaults to theevery duration. ","parameters":[],"flux_type":"Fun"}},"define":{"Function":{"name":"define","headline":"define will define an aggregate function. ","description":"","parameters":[],"flux_type":"Fun"}},"sum":{"Function":{"name":"sum","headline":"sum constructs a sum aggregate for the column. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/jsternberg/influxdb","name":"influxdb","headline":"","description":null,"members":{"from":{"Function":{"name":"from","headline":"from will retrieve data from a bucket between the start and stop time. This version of from is the equivalent of doing from |> rangeas a single call. ","description":"","parameters":[],"flux_type":"Fun"}},"_mask":{"Function":{"name":"_mask","headline":"_mask will hide the given columns from downstreamtransformations. It will not perform any copies andit will not regroup. This should only be used whenthe user knows it can't cause a key conflict. ","description":"","parameters":[],"flux_type":"Fun"}},"_from":{"Function":{"name":"_from","headline":"_from allows us to reference the from function fromwithin the select call which has a function parameterwith the same name. ","description":"","parameters":[],"flux_type":"Fun"}},"select":{"Function":{"name":"select","headline":"select will select data from an influxdb instance withinthe range between start and stop from the bucket specified bythe from parameter. It will select the specific measurementand it will only include fields that are included in the list offields. ","description":"In order to filter by tags, the where function can be used to furtherlimit the amount of data selected. ","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/jsternberg/math","name":"math","headline":"","description":null,"members":{"minIndex":{"Function":{"name":"minIndex","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"max":{"Function":{"name":"max","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"sum":{"Function":{"name":"sum","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"min":{"Function":{"name":"min","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"maxIndex":{"Function":{"name":"maxIndex","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/jsternberg/rows","name":"rows","headline":"","description":null,"members":{"map":{"Function":{"name":"map","headline":"map will map each of the rows to a new value. The function will be invoked for each row and thereturn value will be used as the values in the outputrow. ","description":"The record that is passed to the function will containall of the keys and values in the record including groupkeys, but the group key cannot be changed. Attempts tochange the group key will be ignored. The returned record does not need to contain values that arepart of the group key. ","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/rhajek/bigpanda","name":"bigpanda","headline":"","description":null,"members":{"defaultUrl":{"Value":{"name":"defaultUrl","headline":"","description":"","flux_type":"string"}},"statusFromLevel":{"Function":{"name":"statusFromLevel","headline":"statusFromLevel turns a level from the status object into a BigPanda statuslevel - string - levels on status objects can be one of the following ok,info,warn,crit,unknownBigPanda accepts one of ok,critical,warning,acknowledged. ","description":"","parameters":[],"flux_type":"Fun"}},"defaultTokenPrefix":{"Value":{"name":"defaultTokenPrefix","headline":"","description":"","flux_type":"string"}},"endpoint":{"Function":{"name":"endpoint","headline":"endpoint creates a factory function that creates a target function for pipeline |> to send alert to BigPanda for each table row. url - string - base URL of BigPanda API","description":". token - string - BigPanda authorization Bearer tokenappKey - string - BigPanda App Key. The returned factory function accepts a mapFn parameter. The mapFn must return an object with all properties defined in the sendAlert function arguments (except url, apiKey and appKey). ","parameters":[],"flux_type":"Fun"}},"sendAlert":{"Function":{"name":"sendAlert","headline":"sendAlert sends a single alert to BigPanda as described in https://docs.bigpanda.io/reference#alerts API. token - string - BigPanda authorization Bearer tokenurl - string - base URL of BigPanda API","description":". appKey - string - BigPanda App Key. status - string - Status of the BigPanda alert. One of ok, critical, warning, acknowledged. rec - record - additional data appended to alert","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/sranka/opsgenie","name":"opsgenie","headline":"","description":null,"members":{"endpoint":{"Function":{"name":"endpoint","headline":"endpoint creates a factory function that creates a target function for pipeline |> to send alerts to opsgenie for each table row. url         - string - Opsgenie API URL. Defaults to \"https://api.opsgenie.com/v2/alerts\". apiKey      - string - API Authorization key. entity      - string - Entity of the alert, used to specify domain of the alert. Optional. The returned factory function accepts a mapFn parameter. The mapFn must return an object with all properties defined in the sendAlert function arguments (except url, apiKey and entity). ","description":"","parameters":[],"flux_type":"Fun"}},"sendAlert":{"Function":{"name":"sendAlert","headline":"sendAlert sends a message that creates an alert in Opsgenie. See https://docs.opsgenie.com/docs/alert-api#create-alert for details. url         - string - Opsgenie API URL. Defaults to \"https://api.opsgenie.com/v2/alerts\". apiKey      - string - API Authorization key. message     - string - Alert message text, at most 130 characters. alias       - string - Opsgenie alias, at most 250 characters that are used to de-deduplicate alerts. Defaults to message. description - string - Description field of an alert, at most 15000 characters. Optional. priority    - string - \"P1\", \"P2\", \"P3\", \"P4\" or \"P5\". Defaults to \"P3\". responders  - array  - Array of strings to identify responder teams or teams, a 'user:' prefix is used for users, 'teams:' prefix for teams. tags        - array  - Array of string tags. Optional. entity      - string - Entity of the alert, used to specify domain of the alert. Optional. actions     - array  - Array of strings that specifies actions that will be available for the alert. details     - string - Additional details of an alert, it must be a JSON-encoded map of key-value string pairs. visibleTo   - array  - Arrays of teams and users that the alert will become visible to without sending any notification. Optional. ","description":"","parameters":[],"flux_type":"Fun"}},"respondersToJSON":{"Function":{"name":"respondersToJSON","headline":"respondersToJSON converts an array of responder strings to JSON array that can be embedded into an alert message","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/sranka/sensu","name":"sensu","headline":"","description":null,"members":{"event":{"Function":{"name":"event","headline":"event sends a single event to Sensu as described in https://docs.sensu.io/sensu-go/latest/api/events/#create-a-new-event API. url - string - base URL of Sensu API","description":" without a trailing slash, for example \"http://localhost:8080\" . apiKey - string - Sensu API Key. checkName - string - Check name, it can contain [a-zA-Z0-9_. -] characters, other characters are replaced by underscore. text - string - The event text (named output in a Sensu Event). handlers - array - Sensu handlers to execute, optional. status - int - The event status, 0 (default) indicates \"OK\", 1 indicates \"WARNING\", 2 indicates \"CRITICAL\", any other value indicates an “UNKNOWN” or custom status. state - string - The event state can be \"failing\", \"passing\" or \"flapping\". Defaults to \"passing\" for 0 status, \"failing\" otherwise. namespace - string - The Sensu namespace. Defaults to \"default\". entityName - string - Source of the event, it can contain [a-zA-Z0-9_. -] characters, other characters are replaced by underscore. Defaults to \"influxdb\". ","parameters":[],"flux_type":"Fun"}},"toSensuName":{"Function":{"name":"toSensuName","headline":"toSensuName translates a string value to a Sensu name. Characters not being [a-zA-Z0-9_. -] are replaced by underscore. ","description":"","parameters":[],"flux_type":"Fun"}},"endpoint":{"Function":{"name":"endpoint","headline":"endpoint creates a factory function that creates a target function for pipeline |> to send event to Sensu for each table row. url - string - base URL of Sensu API","description":" without a trailing slash, for example \"http://localhost:8080\" . apiKey - string - Sensu API Key. handlers - array - Sensu handlers to execute. namespace - string - The Sensu namespace. Defaults to \"default\". entityName - string - Source of the event, it can contain [a-zA-Z0-9_. -] characters, other characters are replaced by underscore. Defaults to \"influxdb\". The returned factory function accepts a mapFn parameter. The mapFn must return an object with checkName, text, and status, as defined in the event function arguments. ","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/sranka/teams","name":"teams","headline":"","description":null,"members":{"summaryCutoff":{"Value":{"name":"summaryCutoff","headline":"summaryCutoff is used ","description":"","flux_type":"int"}},"endpoint":{"Function":{"name":"endpoint","headline":"endpoint creates the endpoint for the Microsoft Teams external service. url - string - URL of the incoming web hook. The returned factory function accepts a mapFn parameter. The mapFn must return an object with title, text, and summary, as defined in the message function arguments. ","description":"","parameters":[],"flux_type":"Fun"}},"message":{"Function":{"name":"message","headline":"message sends a single message to Microsoft Teams via incoming web hook. url - string - incoming web hook URLtitle - string - Message card title. text - string - Message card text. summary - string - Message card summary, it can be an empty string to generate summary from text. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/sranka/telegram","name":"telegram","headline":"","description":null,"members":{"defaultParseMode":{"Value":{"name":"defaultParseMode","headline":"","description":"","flux_type":"string"}},"defaultSilent":{"Value":{"name":"defaultSilent","headline":"","description":"","flux_type":"bool"}},"defaultDisableWebPagePreview":{"Value":{"name":"defaultDisableWebPagePreview","headline":"","description":"","flux_type":"bool"}},"message":{"Function":{"name":"message","headline":"message sends a single message to a Telegram channel using the API descibed in https://core.telegram.org/bots/api#sendmessageurl - string - URL of the telegram bot endpoint. Defaults to: \"https://api.telegram.org/bot\"token - string - Required telegram bot token string, such as 123456789:AAxSFgij0ln9C7zUKnr4ScDi5QXTGF71Schannel - string - Required id of the telegram channel. text - string - The text to display. parseMode - string - Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \"MarkdownV2\"disableWebPagePreview - bool - Disables preview of web links in the sent messages when \"true\". Defaults to \"false\"silent - bool - Messages are sent silently (https://telegram.org/blog/channels-2-0#silent-messages) when \"true\". Defaults to \"true\". ","description":"","parameters":[],"flux_type":"Fun"}},"defaultURL":{"Value":{"name":"defaultURL","headline":"","description":"","flux_type":"string"}},"endpoint":{"Function":{"name":"endpoint","headline":"endpoint creates a factory function that creates a target function for pipeline |> to send messages to telegram for each table row. url - string - URL of the telegram bot endpoint. Defaults to: \"https://api.telegram.org/bot\"token - string - Required telegram bot token string, such as 123456789:AAxSFgij0ln9C7zUKnr4ScDi5QXTGF71SparseMode - string - Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \"MarkdownV2\"disableWebPagePreview - bool - Disables preview of web links in the sent messages when \"true\". Defaults to \"false\"The returned factory function accepts a mapFn parameter. The mapFn must return an object with channel, text, and silent, as defined in the message function arguments. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/sranka/webexteams","name":"webexteams","headline":"","description":null,"members":{"endpoint":{"Function":{"name":"endpoint","headline":"endpoint creates a factory function that creates a target function for pipeline |> to send message to Webex teams for each table row. url - string - base URL of Webex API endpoint without a trailing slash, \"https://webexapis.com\" by default. token - string - Webex API access token","description":". The returned factory function accepts a mapFn parameter. The mapFn must return an object with roomId, text and markdown properties  as defined in the message function arguments. ","parameters":[],"flux_type":"Fun"}},"message":{"Function":{"name":"message","headline":"message sends a single message to Webex Teams as described in Webex Message API","description":". url - string - base URL of Webex API endpoint without a trailing slash, \"https://webexapis.com\" by default. token - string - Webex API access token. roomId - string - The room ID of the message, required. text - string - the message, in plain text. markdown - string - the message, in markdown format as explained in https://developer.webex.com/docs/api/basics","parameters":[],"flux_type":"Fun"}}}},{"path":"contrib/tomhollingworth/events","name":"events","headline":"","description":null,"members":{"duration":{"Function":{"name":"duration","headline":"duration will calculate the duration between recordsfor each record. The duration calculated is betweenthe current record and the next. The last record willcompare against either the stopColum (default: _stop)or a stop timestamp value. ","description":"timeColumn - Optional string. Default '_time'. The value used to calculate durationcolumnName - Optional string. Default 'duration'. The name of the result columnstopColumn - Optional string. Default '_stop'. The name of the column to compare the last record onstop - Optional Time. Use a fixed time to compare the last record against instead of stop column. ","parameters":[],"flux_type":"Fun"}}}},{"path":"csv","name":"csv","headline":"Package csv provides tools for working with data in annotated CSV format.","description":null,"members":{"from":{"Function":{"name":"from","headline":"from is a function that retrieves data from a comma separated value (CSV) data source. ","description":"A stream of tables are returned, each unique series contained within its own table. Each record in the table represents a single point in the series. ## Query anotated CSV data from file\n```\nimport \"csv\"\n\ncsv.from(file: \"path/to/data-file.csv\")\n```\n\n## Query raw data from CSV file\n```\nimport \"csv\"\n\ncsv.from(\n  file: \"/path/to/data-file.csv\",\n  mode: \"raw\"\n)\n```\n\n## Query an annotated CSV string\n```\nimport \"csv\"\n\ncsvData = \"\n#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,string,string,double\n#group,false,false,false,false,false,false,false,false\n#default,,,,,,,,\n,result,table,_start,_stop,_time,region,host,_value\n,mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:00Z,east,A,15.43\n,mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:20Z,east,B,59.25\n,mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:40Z,east,C,52.62\n\"\n\ncsv.from(csv: csvData)\n\n```\n\n## Query a raw CSV string\n```\nimport \"csv\"\n\ncsvData = \"\n_start,_stop,_time,region,host,_value\n2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:00Z,east,A,15.43\n2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:20Z,east,B,59.25\n2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:40Z,east,C,52.62\n\"\n\ncsv.from(\n  csv: csvData,\n  mode: \"raw\"\n)\n```\n\n","parameters":[{"name":"csv","headline":" is CSV data.","description":"Supports anonotated CSV or raw CSV. Use mode to specify the parsing mode.","required":false},{"name":"file","headline":" is the file path of the CSV file to query.","description":"The path can be absolute or relative. If relative, it is relative to the working directory of the  fluxd  process. The CSV file must exist in the same file system running the  fluxd  process.","required":false},{"name":"mode","headline":" is the CSV parsing mode. Default is annotations.","description":"Available annotation modes: annotations: Use CSV notations to determine column data types. raw: Parse all columns as strings and use the first row as the header row and all subsequent rows as data.","required":false}],"flux_type":"Fun"}}}},{"path":"date","name":"date","headline":"Package date provides date and time constants and functions.","description":null,"members":{"hour":{"Function":{"name":"hour","headline":"hour is a function that returns the hour of a specified time. Resultsrange from [0 - 23]. ","description":"## Return the hour of a time value\n```\nimport \"date\"\n\ndate.hour(t: 2020-02-11T12:21:03.293534940Z)\n```\n\n## Return the hour of a relative duration\n```\nimport \"date\"\n\noption now = () => 2020-02-11T12:21:03.293534940Z\n\ndate.hour(t: -8h)\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() .","required":false}],"flux_type":"Fun"}},"truncate":{"Function":{"name":"truncate","headline":"Truncate returns a time truncated to the specified duration unit. ","description":"## Example\n```\nimport \"date\"\n\ndate.truncate(\n  t: 2019-07-17T12:05:21.012Z\n  unit: 1s\n)\n```\n\n## Truncate time values\n```\nimport \"date\"\n\ndate.truncate(t: 2019-06-03T13:59:01.000000000Z, unit: 1s)\n// Returns 2019-06-03T13:59:01.000000000Z\n\ndate.truncate(t: 2019-06-03T13:59:01.000000000Z, unit: 1m)\n// Returns 2019-06-03T13:59:00.000000000Z\n\ndate.truncate(t: 2019-06-03T13:59:01.000000000Z, unit: 1h)\n// Returns 2019-06-03T13:00:00.000000000Z\n```\n\n## Truncate time values using durations\n```\nimport \"date\"\n\noption now = () => 2020-01-01T00:00:30.500000000Z\n\ndate.truncate(t: -30s, unit: 1s)\n// Returns 2019-12-31T23:59:30.000000000Z\n\ndate.truncate(t: -1m, unit: 1m)\n// Returns 2019-12-31T23:59:00.000000000Z\n\ndate.truncate(t: -1h, unit: 1h)\n// Returns 2019-12-31T23:00:00.000000000Z\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() .","required":false},{"name":"unit","headline":" is the unit of time to truncate to","description":"Only use 1 and the unit of time to specify the unit. For example: 1s, 1m, 1h.","required":false}],"flux_type":"Fun"}},"year":{"Function":{"name":"year","headline":"year is a function that returns the year of a specified time. ","description":"## Return the year for a time value\n```\nimport \"date\"\n\ndate.year(t: 2020-02-11T12:21:03.293534940Z)\n```\n\n## Return the year for a relative duration\n```\nimport \"date\"\n\noption now = () => 2020-02-11T12:21:03.293534940Z\n\ndate.year(t: -14y)\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() .","required":false}],"flux_type":"Fun"}},"weekDay":{"Function":{"name":"weekDay","headline":"weekDay is a function that returns the day of the week for a specified time. Results range from [0 - 6]. ","description":"## Return the day of the week for a time value\n```\nimport \"date\"\n\ndate.weekDay(t: 2020-02-11T12:21:03.293534940Z)\n```\n\n## Return the day of the week for a relative duration\n```\nimport \"date\"\n\noption now = () => 2020-02-11T12:21:03.293534940Z\n\ndate.weekDay(t: -84h)\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() .","required":false}],"flux_type":"Fun"}},"Wednesday":{"Value":{"name":"Wednesday","headline":"Wednesday is a constant that represents Wednesday as a day of the week. ","description":"","flux_type":"int"}},"nanosecond":{"Function":{"name":"nanosecond","headline":"Nanosecond returns the nanoseconds for a specified time. Results range from [0-999999999]. ","description":"## Return the nanosecond for a time value\n```\nimport \"date\"\n\ndate.nanosecond(t: 2020-02-11T12:21:03.293534940Z)\n```\n\n## Return the nanosecond for a relative duration\n```\nimport \"date\"\n\noption now = () => 2020-02-11T12:21:03.293534940Z\n\ndate.nanosecond(t: -2111984ns)\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() .","required":false}],"flux_type":"Fun"}},"December":{"Value":{"name":"December","headline":"December is a constant that represents the month of December. ","description":"","flux_type":"int"}},"yearDay":{"Function":{"name":"yearDay","headline":"yearDay is a function that returns the day of the year for a specified timeResults can include leap days and range from [ 1 - 366]. ","description":"## Return the day of the year for a time value\n```\nimport \"date\"\n\ndate.yearDay(t: 2020-02-11T12:21:03.293534940Z)\n```\n\n## Return the day of the year for a relative duration\n```\nimport \"date\"\n\noption now = () => 2020-02-11T12:21:03.293534940Z\n\ndate.yearDay(t: -1mo)\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() .","required":false}],"flux_type":"Fun"}},"Thursday":{"Value":{"name":"Thursday","headline":"Thursday is a constant that represents Thursday as a day of the week. ","description":"","flux_type":"int"}},"May":{"Value":{"name":"May","headline":"May is a constant that represents the month of May. ","description":"","flux_type":"int"}},"October":{"Value":{"name":"October","headline":"October is a constant that represents the month of October. ","description":"","flux_type":"int"}},"June":{"Value":{"name":"June","headline":"June is a constant that represents the month of June. ","description":"","flux_type":"int"}},"September":{"Value":{"name":"September","headline":"September is a constant that represents the month of September. ","description":"","flux_type":"int"}},"monthDay":{"Function":{"name":"monthDay","headline":"monthDay is a function that returns the day of the month for a specifiedtime. Results range from [1 - 31]. ","description":"## Return the day of the month for a time value\n```\nimport \"date\"\n\ndate.monthDay(t: 2020-02-11T12:21:03.293534940Z)\n```\n\n## Return the day of the month for a relative duration\n```\nimport \"date\"\n\noption now = () => 2020-02-11T12:21:03.293534940Z\n\ndate.monthDay(t: -8d)\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() .","required":false}],"flux_type":"Fun"}},"millisecond":{"Function":{"name":"millisecond","headline":"Millisecond returns the milliseconds for a specified time. Results range from [0-999]. ","description":"## Return the millisecond of the time value\n```\nimport \"date\"\n\ndate.millisecond(t: 2020-02-11T12:21:03.293534940Z)\n```\n\n## Return the millisecond of a relative duration\n```\nimport \"date\"\n\noption now = () => 2020-02-11T12:21:03.293534940Z\n\ndate.millisecond(t: -150ms)\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() .","required":false}],"flux_type":"Fun"}},"microsecond":{"Function":{"name":"microsecond","headline":"Microsecond returns the microseconds for a specified time. Results range from [0-999999]. ","description":"## Return the microsecond of a time value\n```\nimport \"date\"\n\ndate.microsecond(t: 2020-02-11T12:21:03.293534940Z)\n```\n\n## Return the microsecond of a relative duration\n```\nimport \"date\"\n\noption now = () => 2020-02-11T12:21:03.293534940Z\n\ndate.microsecond(t: -1890us)\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() .","required":false}],"flux_type":"Fun"}},"minute":{"Function":{"name":"minute","headline":"minute is a function that returns the minute of a specified time. Resultsrange from [0 - 59]. ","description":"## Return the minute of a time value\n```\nimport \"date\"\n\ndate.minute(t: 2020-02-11T12:21:03.293534940Z)\n```\n\n## Return the minute of a relative duration\n```\nimport \"date\"\n\noption now = () => 2020-02-11T12:21:03.293534940Z\n\ndate.minute(t: -45m)\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() .","required":false}],"flux_type":"Fun"}},"quarter":{"Function":{"name":"quarter","headline":"Quarter returns the quarter for a specified time. Results range from [1-4]. ","description":"## Return the quarter for a time value\n```\nimport \"date\"\n\ndate.quarter(t: 2020-02-11T12:21:03.293534940Z)\n```\n\n## Return the quarter for a relative duration\n```\nimport \"date\"\n\noption now = () => 2020-02-11T12:21:03.293534940Z\n\ndate.quarter(t: -7mo)\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() .","required":false}],"flux_type":"Fun"}},"month":{"Function":{"name":"month","headline":"month is a function that returns the month of a specified time. Results range from [1 - 12]. ","description":"## Return the month of a time value\n```\nimport \"date\"\n\ndate.month(t: 2020-02-11T12:21:03.293534940Z)\n```\n\n## Retrun the month of a relative duration\n```\nimport \"date\"\n\noption now = () => 2020-02-11T12:21:03.293534940Z\n\ndate.month(t: -3mo)\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() .","required":false}],"flux_type":"Fun"}},"Monday":{"Value":{"name":"Monday","headline":"Monday is a constant that represents Monday as a day of the week. ","description":"","flux_type":"int"}},"January":{"Value":{"name":"January","headline":"January is a constant that represents the month of January. ","description":"","flux_type":"int"}},"February":{"Value":{"name":"February","headline":"February is a constant that represents the month of February. ","description":"","flux_type":"int"}},"March":{"Value":{"name":"March","headline":"March is a constant that represents the month of March. ","description":"","flux_type":"int"}},"July":{"Value":{"name":"July","headline":"July is a constant that represents the month of July. ","description":"","flux_type":"int"}},"November":{"Value":{"name":"November","headline":"November is a constant that represents the month of November. ","description":"","flux_type":"int"}},"Saturday":{"Value":{"name":"Saturday","headline":"Saturday is a constant that represents Saturday as a day of the week. ","description":"","flux_type":"int"}},"Sunday":{"Value":{"name":"Sunday","headline":"Sunday is a constant that represents Sunday as a day of the week","description":"","flux_type":"int"}},"April":{"Value":{"name":"April","headline":"April is a constant that represents the month of April. ","description":"","flux_type":"int"}},"week":{"Function":{"name":"week","headline":"week is a function that returns the ISO week of the year for a specified time. Results range from [1 - 53]. ","description":"## Return the week of the year\n```\nimport \"date\"\n\ndate.week(t: 2020-02-11T12:21:03.293534940Z)\n```\n\n## Return the week of the year using a relative duration\n```\nimport \"date\"\n\noption now = () => 2020-02-11T12:21:03.293534940Z\n\ndate.week(t: -12d)\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() . ","required":false}],"flux_type":"Fun"}},"August":{"Value":{"name":"August","headline":"August is a constant that represents the month of August. ","description":"","flux_type":"int"}},"second":{"Function":{"name":"second","headline":"second is a function that returns the second of a specified time. Resultsrange from [0 - 59]. ","description":"## Return the second of a time value\n```\nimport \"date\"\n\ndate.second(t: 2020-02-11T12:21:03.293534940Z)\n```\n\n## Return the second of a relative duration\n```\nimport \"date\"\n\noption now = () => 2020-02-11T12:21:03.293534940Z\n\ndate.second(t: -50s)\n```\n\n","parameters":[{"name":"t","headline":" is the time to operate on.","description":"Use an absolute time, relative duration, or integer. durations are relative to  now() .","required":false}],"flux_type":"Fun"}},"Tuesday":{"Value":{"name":"Tuesday","headline":"Tuesday is a constant that represents Tuesday as a day of the week. ","description":"","flux_type":"int"}},"Friday":{"Value":{"name":"Friday","headline":"Friday is a constant that represents Friday as a day of the week. ","description":"","flux_type":"int"}}}},{"path":"dict","name":"dict","headline":"Package dictionary provides functions for interacting with dictionary types.","description":null,"members":{"remove":{"Function":{"name":"remove","headline":"remove is a function that removes a key value pair from a dictionary andreturns an updated dictionary. ","description":"## Remove a property from a dictionary\n```\nimport \"dict\"\n\nd = [1: \"foo\", 2: \"bar\"]\n\ndNew = dict.remove(\n  dict: d,\n  key: 1\n)\n\n// Verify the key-value pairs was removed\n\ndict.get(dict: dNew, key: 1, default: \"\")\n// Returns an empty string\n\ndict.get(dict: dNew, key: 2, default: \"\")\n// Returns bar\n```\n\n","parameters":[{"name":"dict","headline":" is the dictionary to remove the key-value pair from.","description":null,"required":false},{"name":"key","headline":" is the key to remove from the dictionary.","description":"Must be the same type as existing keys in the dictionary.","required":false}],"flux_type":"Fun"}},"get":{"Function":{"name":"get","headline":"get is a function that returns the value of a specified key in thedictionary or a default value if the key does not exist. ","description":"## Return a property of a dictionary\n```\nimport \"dict\"\n\nd = [1: \"foo\", 2: \"bar\"]\n\ndict.get(\n  dict: d,\n  key: 1,\n  default: \"\"\n)\n// returns foo\n```\n\n","parameters":[{"name":"dict","headline":" is the dictionary to return a value from.","description":null,"required":false},{"name":"key","headline":" is the key to return from the dictionary.","description":null,"required":false},{"name":"default","headline":" is the default value to return if the key does not","description":"exist in the dictionary. Must be the same type as values in the dictionary.","required":false}],"flux_type":"Fun"}},"insert":{"Function":{"name":"insert","headline":"insert is a function that inserts a key-value pair into a dictionary andreturns a new, updated dictionary. ","description":"If the key already exists in the dictionary, the function overwritesthe existing value. ## Insert a new key-value pair into the a dictionary\n```\nimport \"dict\"\n\nd = [1: \"foo\", 2: \"bar\"]\n\ndNew = dict.insert(\n  dict: d,\n  key: 3,\n  value: \"baz\"\n)\n\n// Verify the new key-value pair was inserted\ndict.get(dict: dNew, key: 3, default: \"\")\n```\n\n## Overwrite an existing key-value pair in a dictionary\n```\nimport \"dict\"\n\nd = [1: \"foo\", 2: \"bar\"]\n\ndNew = dict.insert(\n  dict: d,\n  key: 2,\n  value: \"baz\"\n)\n\n// Verify the new key-value pair was overwritten\ndict.get(dict: dNew, key: 2, default: \"\")\n```\n\n","parameters":[{"name":"dict","headline":" is the dictionary to update.","description":null,"required":false},{"name":"key","headline":" is the key to insert into the dictionary.","description":"Must be the same type as the existing keys in the dictionary.","required":false},{"name":"default","headline":" is the value to insert into the dictionary.","description":"Must be the same type as the existing values in the dictionary. ","required":false}],"flux_type":"Fun"}},"fromList":{"Function":{"name":"fromList","headline":"fromList is a function that creates a dictionary from a list of recordswith key and value properties. ","description":"## Create a dictionary from a list of records\n```\nimport \"dict\"\n\n// Define a new dictionary using an array of records\nd = dict.fromList(\n  pairs: [\n    {key: 1, value: \"foo\"},\n    {key: 2, value: \"bar\"}\n  ]\n)\n\n// Return a property of the dictionary\ndict.get(dict: d, key: 1, default: \"\") // returns foo\n```\n\n","parameters":[{"name":"pairs","headline":" is the list of records, each containing key and value properties.","description":null,"required":false}],"flux_type":"Fun"}}}},{"path":"experimental","name":"experimental","headline":"","description":null,"members":{"distinct":{"Function":{"name":"distinct","headline":"An experimental version of distinct","description":"","parameters":[],"flux_type":"Fun"}},"unique":{"Function":{"name":"unique","headline":"An experimental version of unique","description":"","parameters":[],"flux_type":"Fun"}},"spread":{"Function":{"name":"spread","headline":"An experimental version of spread. ","description":"","parameters":[],"flux_type":"Fun"}},"kaufmansAMA":{"Function":{"name":"kaufmansAMA","headline":"An experimental version of kaufmansAMA. ","description":"","parameters":[],"flux_type":"Fun"}},"skew":{"Function":{"name":"skew","headline":"An experimental version of skew. ","description":"","parameters":[],"flux_type":"Fun"}},"alignTime":{"Function":{"name":"alignTime","headline":"Aligns all tables to a common start time by using the same _time value forthe first record in each table and incrementing all subsequent _time valuesusing time elapsed between input records. By default, it aligns to tables to 1970-01-01T00:00:00Z UTC. ","description":"","parameters":[],"flux_type":"Fun"}},"min":{"Function":{"name":"min","headline":"An experimental version of min","description":"","parameters":[],"flux_type":"Fun"}},"histogram":{"Function":{"name":"histogram","headline":"An experimental version of histogram","description":"","parameters":[],"flux_type":"Fun"}},"stddev":{"Function":{"name":"stddev","headline":"An experimental version of stddev. ","description":"","parameters":[],"flux_type":"Fun"}},"chain":{"Function":{"name":"chain","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"max":{"Function":{"name":"max","headline":"An experimental version of max","description":"","parameters":[],"flux_type":"Fun"}},"first":{"Function":{"name":"first","headline":"An experimental version of first","description":"","parameters":[],"flux_type":"Fun"}},"quantile":{"Function":{"name":"quantile","headline":"An experimental version of quantile. ","description":"","parameters":[],"flux_type":"Fun"}},"objectKeys":{"Function":{"name":"objectKeys","headline":"objectKeys produces a list of the keys existing on the object","description":"","parameters":[],"flux_type":"Fun"}},"last":{"Function":{"name":"last","headline":"An experimental version of last","description":"","parameters":[],"flux_type":"Fun"}},"window":{"Function":{"name":"window","headline":"An experimental version of window. ","description":"","parameters":[],"flux_type":"Fun"}},"count":{"Function":{"name":"count","headline":"An experimental version of count. ","description":"","parameters":[],"flux_type":"Fun"}},"addDuration":{"Function":{"name":"addDuration","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"fill":{"Function":{"name":"fill","headline":"An experimental version of fill","description":"","parameters":[],"flux_type":"Fun"}},"mode":{"Function":{"name":"mode","headline":"An experimental version of mode. ","description":"","parameters":[],"flux_type":"Fun"}},"mean":{"Function":{"name":"mean","headline":"An experimental version of mean. ","description":"","parameters":[],"flux_type":"Fun"}},"join":{"Function":{"name":"join","headline":"An experimental version of join. ","description":"","parameters":[],"flux_type":"Fun"}},"sum":{"Function":{"name":"sum","headline":"An experimental version of sum. ","description":"","parameters":[],"flux_type":"Fun"}},"integral":{"Function":{"name":"integral","headline":"An experimental version of integral. ","description":"","parameters":[],"flux_type":"Fun"}},"set":{"Function":{"name":"set","headline":"set adds the values from the object onto each row of a table","description":"","parameters":[],"flux_type":"Fun"}},"histogramQuantile":{"Function":{"name":"histogramQuantile","headline":"An experimental version of histogramQuantile","description":"","parameters":[],"flux_type":"Fun"}},"subDuration":{"Function":{"name":"subDuration","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"group":{"Function":{"name":"group","headline":"An experimental version of group that has mode: \"extend\"","description":"","parameters":[],"flux_type":"Fun"}},"to":{"Function":{"name":"to","headline":"An experimental version of \"to\" that:","description":" - Expects pivoted data - Any column in the group key is made a tag in storage - All other columns are fields - An error will be thrown for incompatible data types","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/aggregate","name":"aggregate","headline":"","description":null,"members":{"rate":{"Function":{"name":"rate","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/array","name":"array","headline":"","description":null,"members":{"from":{"Function":{"name":"from","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/bigtable","name":"bigtable","headline":"","description":null,"members":{"from":{"Function":{"name":"from","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/csv","name":"csv","headline":"","description":null,"members":{"from":{"Function":{"name":"from","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/geo","name":"geo","headline":"Provides functions for geographic location filtering and grouping based on S2 cells.","description":null,"members":{"s2CellIDToken":{"Function":{"name":"s2CellIDToken","headline":"Returns cell ID token for given cell or lat/lon point at specified level. ","description":"","parameters":[],"flux_type":"Fun"}},"gridFilter":{"Function":{"name":"gridFilter","headline":"Filtering functions","description":"Filters records by a box, a circle or a polygon area using S2 cell ID tag. It is a coarse filter, as the grid always overlays the region, the result will likely contain recordswith lat/lon outside the specified region. ","parameters":[],"flux_type":"Fun"}},"strictFilter":{"Function":{"name":"strictFilter","headline":"Filters records by specified region. It is an exact filter and must be used after toRows() because it requires lat and lon columns in input row sets. ","description":"","parameters":[],"flux_type":"Fun"}},"shapeData":{"Function":{"name":"shapeData","headline":"Shapes data to meet the requirements of the geo package. Renames fields containing latitude and longitude values to lat and lon. Pivots values to row-wise sets. Generates an s2_cell_id tag for each reach using lat and lon values. Adds the s2_cell_id column to the group key. ","description":"","parameters":[],"flux_type":"Fun"}},"ST_Length":{"Function":{"name":"ST_Length","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"getLevel":{"Function":{"name":"getLevel","headline":"Returns level of specified cell ID token. ","description":"","parameters":[],"flux_type":"Fun"}},"s2CellLatLon":{"Function":{"name":"s2CellLatLon","headline":"Returns lat/lon coordinates of given cell ID token. ","description":"","parameters":[],"flux_type":"Fun"}},"ST_Distance":{"Function":{"name":"ST_Distance","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"groupByArea":{"Function":{"name":"groupByArea","headline":"Grouping functions","description":"intended to be used row-wise sets (i.e after toRows())Groups data by area of size specified by level. Result is grouped by newColumn. Grouping levels: https://s2geometry.io/resources/s2cell_statistics.html","parameters":[],"flux_type":"Fun"}},"asTracks":{"Function":{"name":"asTracks","headline":"Groups rows into tracks. ","description":"","parameters":[],"flux_type":"Fun"}},"getGrid":{"Function":{"name":"getGrid","headline":"None of the following builtin functions are intended to be used by end users. ","description":"Calculates grid (set of cell ID tokens) for given region and according to options. ","parameters":[],"flux_type":"Fun"}},"stContains":{"Function":{"name":"stContains","headline":"Builtin GIS functions","description":"Returns boolean whether the region contains specified geometry. ","parameters":[],"flux_type":"Fun"}},"ST_LineString":{"Function":{"name":"ST_LineString","headline":"Non-standard","description":"","parameters":[],"flux_type":"Fun"}},"ST_DWithin":{"Function":{"name":"ST_DWithin","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"units":{"Value":{"name":"units","headline":"Units","description":"","flux_type":"{distance:string}"}},"stLength":{"Function":{"name":"stLength","headline":"Returns length of a curve. ","description":"","parameters":[],"flux_type":"Fun"}},"_detectLevel":{"Function":{"name":"_detectLevel","headline":"Flux functions","description":"Gets level of cell ID tag s2cellID from the first record from the first table in the stream. ","parameters":[],"flux_type":"Fun"}},"filterRows":{"Function":{"name":"filterRows","headline":"Two-phase filtering by specified region. Checks to see if data is already pivoted and contains a lat column. Returns pivoted data. ","description":"","parameters":[],"flux_type":"Fun"}},"stDistance":{"Function":{"name":"stDistance","headline":"Returns distance from given region to specified geometry. ","description":"","parameters":[],"flux_type":"Fun"}},"toRows":{"Function":{"name":"toRows","headline":"Convenience functions","description":"Pivots values to row-wise sets. ","parameters":[],"flux_type":"Fun"}},"ST_Contains":{"Function":{"name":"ST_Contains","headline":"Flux GIS ST functions","description":"","parameters":[],"flux_type":"Fun"}},"ST_Intersects":{"Function":{"name":"ST_Intersects","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/http","name":"http","headline":"","description":null,"members":{"get":{"Function":{"name":"get","headline":"Get submits an HTTP get request to the specified URL with headersReturns HTTP status code and body as a byte array","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/influxdb","name":"influxdb","headline":"","description":null,"members":{"api":{"Function":{"name":"api","headline":"api submits an HTTP request to the specified API path. Returns HTTP status code, response headers, and body as a byte array. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/json","name":"json","headline":"","description":null,"members":{"parse":{"Function":{"name":"parse","headline":"Parse will consume json data as bytes and return a value. Lists, objects, strings, booleans and float values can be produced. All numeric values are represented using the float type. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/mqtt","name":"mqtt","headline":"","description":null,"members":{"to":{"Function":{"name":"to","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/oee","name":"oee","headline":"","description":null,"members":{"APQ":{"Function":{"name":"APQ","headline":"APQ computes availability, performance, quality and overall equipment effectiveness (oee). Input tables are expected to have rows with _time, state, partCount and badCount columns, wherestate that indicates start and stop events, partCount represents total numberof produced parts and badCount represents number of parts that did not meet quality standards. plannedTime - total time that equipment is expected to produceidealCycleTime - theoretical minimum time to produce one part","description":"","parameters":[],"flux_type":"Fun"}},"computeAPQ":{"Function":{"name":"computeAPQ","headline":"computeAPQ computes availability, performance, quality and overall equipment effectiveness (oee). productionEvents - a stream of start/stop events for the production process. Each row containsa _time and state that indicates start and stop events. partEvents - a stream of part counts. Each row contains cumulative counts where column partCountrepresents total number of produced parts and badCount number of parts that did not meet quality standards. runningState - production event or state value that corresponds to equipment running stateplannedTime - total time that equipment is expected to produceidealCycleTime - theoretical minimum time to produce one part","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/prometheus","name":"prometheus","headline":"","description":null,"members":{"histogramQuantile":{"Function":{"name":"histogramQuantile","headline":"histogramQuantile enables the user to calculate quantiles on a set of given valuesThis function assumes that the given histogram data is being scraped or read from a Prometheus source. ","description":"","parameters":[],"flux_type":"Fun"}},"scrape":{"Function":{"name":"scrape","headline":"scrape enables scraping of a prometheus metrics endpoint and converts that input into flux tables. Each metric is put into an individual flux table, including each histogram and summary value. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/query","name":"query","headline":"","description":null,"members":{"inBucket":{"Function":{"name":"inBucket","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"filterMeasurement":{"Function":{"name":"filterMeasurement","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"fromRange":{"Function":{"name":"fromRange","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"filterFields":{"Function":{"name":"filterFields","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/table","name":"table","headline":"","description":null,"members":{"fill":{"Function":{"name":"fill","headline":"fill will ensure that all tables within this stream have at leastone row. If a table has no rows, one row will be created with null valuesfor every column not part of the group key. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"experimental/usage","name":"usage","headline":"","description":null,"members":{"from":{"Function":{"name":"from","headline":"from returns an organization's usage data. The time range to query isbounded by start and stop arguments. Optional orgID, host and token argumentsallow cross-org and/or cross-cluster queries. Setting the raw parameter willreturn raw usage data rather than the downsampled data returned by default. Note that unlike the range function, the stop argument is required here,pending implementation of https://github.com/influxdata/flux/issues/3629. ","description":"","parameters":[],"flux_type":"Fun"}},"limits":{"Function":{"name":"limits","headline":"limits returns an organization's usage limits. Optional orgID, hostand token arguments allow cross-org and/or cross-cluster calls. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"generate","name":"generate","headline":"","description":null,"members":{"from":{"Function":{"name":"from","headline":"From generates a table with count rows using fn to determine the value of each row. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"http","name":"http","headline":"Package http provides functions for transferring data using the HTTP protocol.","description":null,"members":{"basicAuth":{"Function":{"name":"basicAuth","headline":"basicAuth returns a Base64-encoded basic authentication headerusing a specified username and password combination. ","description":"## Set a basic authentication header in an HTTP POST request\n```\nimport \"json\"\n\nfrom(bucket: \"example-bucket\")\n  |> range(start: -1h)\n  |> map(fn: (r) => ({\n      r with _value: json.encode(v: r._value)\n  }))\n```\n\n","parameters":[{"name":"u","headline":" is the username to use in the basic authentication header.","description":null,"required":false},{"name":"p","headline":" is the password to use in the basic authentication header.","description":null,"required":false}],"flux_type":"Fun"}},"pathEscape":{"Function":{"name":"pathEscape","headline":"pathEscape() escapes special characters in a string (including /)and replaces non-ASCII characters with hexadecimal representations (%XX). ","description":"## Set a basic authentication header in an HTTP POST request\n```\nimport \"http\"\n\ndata\n  |> map(fn: (r) => ({ r with\n    path: http.pathEscape(inputString: r.path)\n  }))\n```\n\n","parameters":[{"name":"inputString","headline":" is the string to escape.","description":null,"required":false}],"flux_type":"Fun"}},"post":{"Function":{"name":"post","headline":"post submits an HTTP POST request to the specified URL with headers and dataand returns the HTTP Status Code","description":"## Send the last reported status to a URL\n```\nimport \"json\"\nimport \"http\"\n\nlastReported =\n from(bucket: \"example-bucket\")\n   |> range(start: -1m)\n   |> filter(fn: (r) => r._measurement == \"statuses\")\n   |> last()\n   |> findColumn(fn: (key) => true, column: \"_level\")\n\n http.post(\n url: \"http://myawsomeurl.com/api/notify\",\n headers: {\n   Authorization: \"Bearer mySuPerSecRetTokEn\",\n   \"Content-type\": \"application/json\"\n },\n data: json.encode(v: lastReported[0])\n)\n```\n\n","parameters":[{"name":"url","headline":" is the URL to POST to","description":null,"required":false},{"name":"headers","headline":" are the headers to include with the POST request","description":"Header keys with special characters: Wrap header keys that contain special characters in double quotes (\"\").","required":false},{"name":"data","headline":" is the data body to include with the POST request","description":null,"required":false}],"flux_type":"Fun"}},"endpoint":{"Function":{"name":"endpoint","headline":"endpoint sends output datato an HTTP URL using the POST request method. ","description":"See influxdata/influxdb/monitor.notify","parameters":[{"name":"url","headline":" is the URL to POST to.","description":null,"required":false},{"name":"mapFn","headline":" is a function that builds the record used to generate the POST request.","description":null,"required":false},{"name":"","headline":"mapFn accepts a table row (r) and returns a record that must include the following fields:","description":null,"required":false},{"name":"headers","headline":"","description":null,"required":false},{"name":"data","headline":"","description":null,"required":false}],"flux_type":"Fun"}}}},{"path":"influxdata/influxdb","name":"influxdb","headline":"Package influxdb provides functions for analyzing InfluxDB metadata.","description":null,"members":{"cardinality":{"Function":{"name":"cardinality","headline":"cardinality returns the series cardinality of data stored in InfluxDB Cloud. ","description":"## Query series cardinality in a bucket\n```\nimport \"influxdata/influxdb\n\ninfluxdb.cardinality(\n   bucket: \"example-bucket\",\n   start: -1y\n)\n```\n\n## Query series cardinality in a measurement\n```\nimport \"influxdata/influxdb\n\ninfluxdb.cardinality(\n   bucket: \"example-bucket\",\n   start: -1y\n   predicate: (r) => r._measurement == \"example-measurement\"\n)\n```\n\n## Query series cardinality for a specific tag\n```\nimport \"influxdata/influxdb\n\ninfluxdb.cardinality(\n   bucket: \"example-bucket\",\n   start: -1y\n   predicate: (r) => r.exampleTag == \"foo\"\n)\n```\n\n","parameters":[{"name":"bucket","headline":" is the bucket to query cardinality","description":null,"required":false},{"name":"bucketID","headline":" is the String-encoded bucket ID to query cardinality from.","description":null,"required":false},{"name":"org","headline":" is the organization name","description":null,"required":false},{"name":"orgID","headline":" is the String-encoded organization ID to query cardinality from.","description":null,"required":false},{"name":"host","headline":" is the URL of the InfluxDB instance to query.","description":"See InfluxDB Cloud regions or InfluxDB OSS URLs.","required":false},{"name":"token","headline":" is the InfluxDB authentication token.","description":null,"required":false},{"name":"start","headline":" is the earliest time to include when calculating cardinality.","description":"The cardinality calculation includes points that match the specified start time. Use a relative duration or absolute time. For example, -1h or 2019-08-28T22:00:00Z. Durations are relative to now().","required":false},{"name":"stop","headline":" is the latest time to include when calculating cardinality.","description":"The cardinality calculation excludes points that match the specified start time. Use a relative duration or absolute time. For example, -1h or 2019-08-28T22:00:00Z. Durations are relative to now(). Defaults to now().","required":false},{"name":"predicate","headline":" is the predicate function that filters records. Defaults to (r) => true.","description":null,"required":false}],"flux_type":"Fun"}},"from":{"Function":{"name":"from","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"buckets":{"Function":{"name":"buckets","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"to":{"Function":{"name":"to","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"influxdata/influxdb/monitor","name":"monitor","headline":"The Flux monitor package provides tools for monitoring and alerting with InfluxDB.","description":null,"members":{"levelInfo":{"Value":{"name":"levelInfo","headline":"","description":"","flux_type":"string"}},"write":{"Function":{"name":"write","headline":"Write persists the check statuses","description":"","parameters":[],"flux_type":"Fun"}},"check":{"Function":{"name":"check","headline":"check checks input data and assigns a level (ok, info, warn, or crit) to each row based on predicate functions. ","description":"  monitor.check() stores statuses in the _level column and writes results to the statuses measurement in the _monitoring bucket.\n## Monitor disk usage\n```\nimport \"influxdata/influxdb/monitor\"\n\nfrom(bucket: \"telegraf\")\n  |> range(start: -1h)\n  |> filter(fn: (r) =>\n      r._measurement == \"disk\" and\n      r._field == \"used_percent\"\n  )\n  |> group(columns: [\"_measurement\"])\n  |> monitor.check(\n    crit: (r) => r._value > 90.0,\n    warn: (r) => r._value > 80.0,\n    info: (r) => r._value > 70.0,\n    ok:   (r) => r._value <= 60.0,\n    messageFn: (r) =>\n      if r._level == \"crit\" then \"Critical alert!! Disk usage is at ${r._value}%!\"\n      else if r._level == \"warn\" then \"Warning! Disk usage is at ${r._value}%.\"\n      else if r._level == \"info\" then \"Disk usage is at ${r._value}%.\"\n      else \"Things are looking good.\",\n    data: {\n      _check_name: \"Disk Utilization (Used Percentage)\",\n      _check_id: \"disk_used_percent\",\n      _type: \"threshold\",\n      tags: {}\n    }\n  )\n```\n\n","parameters":[{"name":"crit","headline":" is the predicate function that determines crit status. Default is (r) => false.","description":null,"required":false},{"name":"warn","headline":" is the predicate function that determines warn status. Default is (r) => false.","description":null,"required":false},{"name":"info","headline":" is the predicate function that determines info status. Default is (r) => false.","description":null,"required":false},{"name":"ok","headline":" is the predicate function that determines ok status. Default is (r) => false.","description":null,"required":false},{"name":"messagefn","headline":" is the predicate function that constructs a message to append to each row. The message is stored in the ","description":"_ message column.","required":false},{"name":"data","headline":" is meta data used to identify this check.","description":null,"required":false}],"flux_type":"Fun"}},"stateChanges":{"Function":{"name":"stateChanges","headline":"stateChanges detects state changes in a stream of data with a _level column and outputs records that change from fromLevel to toLevel. ","description":"## Detect when the state changes to critical\n```\nmonitor.from(start: -1h)\n   |> monitor.stateChanges(toLevel: \"crit\")\n```\n\n","parameters":[{"name":"fromLevel","headline":" is the level to detect a change from. Defaults to \"any\".","description":null,"required":false},{"name":"toLevel","headline":" is the level to detect a change to. The function output records that change to this level","description":null,"required":false}],"flux_type":"Fun"}},"levelUnknown":{"Value":{"name":"levelUnknown","headline":"","description":"","flux_type":"string"}},"_stateChanges":{"Function":{"name":"_stateChanges","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"levelCrit":{"Value":{"name":"levelCrit","headline":"","description":"","flux_type":"string"}},"log":{"Function":{"name":"log","headline":"Log records notification events","description":"","parameters":[],"flux_type":"Fun"}},"levelOK":{"Value":{"name":"levelOK","headline":"levels describing the result of a check","description":"","flux_type":"string"}},"from":{"Function":{"name":"from","headline":"from retrieves check statuses stored in the statuses measurement in the _monitoring bucket. ","description":"## View critical check statuses from the last hour\n```\nimport \"influxdata/influxdb/monitor\"\n\nmonitor.from(\n start: -1h,\n fn: (r) => r._level == \"crit\"\n)\n```\n\n","parameters":[{"name":"start","headline":" is the earliest time to include in results","description":"Use a relative duration, absolute time, or integer (Unix timestamp in seconds). For example, -1h, 2019-08-28T22:00:00Z, or 1567029600. Durations are relative to now().","required":false},{"name":"stop","headline":" is the latest time to include in results","description":"Use a relative duration, absolute time, or integer (Unix timestamp in seconds). For example, -1h, 2019-08-28T22:00:00Z, or 1567029600. Durations are relative to now().","required":false},{"name":"fn","headline":" is a single argument predicate function that evaluates true or false.","description":"Records or rows (r) that evaluate to true are included in output tables. Records that evaluate to null or false are not included in output tables.","required":false}],"flux_type":"Fun"}},"bucket":{"Value":{"name":"bucket","headline":"","description":"","flux_type":"string"}},"stateChangesOnly":{"Function":{"name":"stateChangesOnly","headline":"stateChangesOnly takes a stream of tables that contains a _level columnand returns a stream of tables where each record represents a state change. ","description":"## Return records representing state changes\n```\nimport \"influxdata/influxdb/monitor\"\n\nmonitor.from(start: -1h)\n |> monitor.stateChangesOnly()\n\n```\n\n","parameters":[],"flux_type":"Fun"}},"levelWarn":{"Value":{"name":"levelWarn","headline":"","description":"","flux_type":"string"}},"deadman":{"Function":{"name":"deadman","headline":"deadman detects when a group stops reporting data. It takes a stream of tables and reports if groups have been observed since time t. ","description":"  monitor.deadman() retains the most recent row from each input table and adds a dead column.\n  If a record appears after time t, monitor.deadman() sets dead to false. Otherwise, dead is set to true.\n## Detect if a host hasn’t reported in the last five minutes\n```\nimport \"influxdata/influxdb/monitor\"\nimport \"experimental\"\n\nfrom(bucket: \"example-bucket\")\n  |> range(start: -10m)\n  |> group(columns: [\"host\"])\n  |> monitor.deadman(t: experimental.subDuration(d: 5m, from: now() ))\n```\n\n","parameters":[{"name":"t","headline":" is the time threshold for the deadman check.","description":null,"required":false}],"flux_type":"Fun"}},"logs":{"Function":{"name":"logs","headline":"logs retrieves notification events stored in the notifications measurement in the _monitoring bucket. ","description":"## Query notification events from the last hour\n```\nimport \"influxdata/influxdb/monitor\"\n\nmonitor.logs(start: -2h, fn: (r) => true)\n```\n\n","parameters":[{"name":"start","headline":" is the earliest time to include in results","description":"Use a relative duration, absolute time, or integer (Unix timestamp in seconds). For example, -1h, 2019-08-28T22:00:00Z, or 1567029600. Durations are relative to now().","required":false},{"name":"stop","headline":" is the latest time to include in results","description":"Use a relative duration, absolute time, or integer (Unix timestamp in seconds). For example, -1h, 2019-08-28T22:00:00Z, or 1567029600. Durations are relative to now().","required":false},{"name":"fn","headline":" is a single argument predicate function that evaluates true or false.","description":"Records or rows (r) that evaluate to true are included in output tables. Records that evaluate to null or false are not included in output tables.","required":false}],"flux_type":"Fun"}},"notify":{"Function":{"name":"notify","headline":"Notify will call the endpoint and log the results. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"influxdata/influxdb/sample","name":"sample","headline":"Package sample provides functions for downloading and ouputting InfluxDB sample datasets.","description":null,"members":{"list":{"Function":{"name":"list","headline":"list outputs information about available InfluxDB sample datasets. ","description":"## List available InfluxDB sample datasets\n```\nimport \"influxdata/influxdb/sample\"\n\nsample.list()\n```\n\n","parameters":[],"flux_type":"Fun"}},"sets":{"Value":{"name":"sets","headline":"","description":"","flux_type":"[string:{url:string, desc:string, size:string}]"}},"_setInfo":{"Function":{"name":"_setInfo","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"data":{"Function":{"name":"data","headline":"data downloads a specified InfluxDB sample dataset. ","description":"## Load InfluxDB sample data\n```\nimport \"influxdata/influxdb/sample\"\n\nsample.data(set: \"airSensor\")\n```\n\n","parameters":[{"name":"set","headline":" is the sample data set to download and output. Valid datasets:","description":null,"required":false},{"name":"","headline":"airSensor","description":": Simulated temperature, humidity, and CO data from an office building.","required":false},{"name":"","headline":"birdMigration","description":": 2019 African bird migration data from  Movebank: Animal Tracking .","required":false},{"name":"","headline":"noaa","description":": Latest observations from the  NOAA National Data Buoy Center (NDBC) .","required":false},{"name":"","headline":"usgs","description":": USGS earthquake data from the last week.","required":false}],"flux_type":"Fun"}}}},{"path":"influxdata/influxdb/schema","name":"schema","headline":"Package schema provides functions for exploring your InfluxDB data schema.","description":null,"members":{"measurementTagValues":{"Function":{"name":"measurementTagValues","headline":"measurementTagValues returns a list of tag values for a specific measurement. The return value is always a single table with a single column, _value. ","description":"The return value is always a single table with a single column \"_value\". ","parameters":[{"name":"bucket","headline":" is the bucket to return tag values from for a specific measurement.","description":null,"required":false},{"name":"measurement","headline":" is the measurement to return tag values from.","description":null,"required":false},{"name":"tag","headline":" is the tag to return all unique values from.","description":null,"required":false}],"flux_type":"Fun"}},"measurementTagKeys":{"Function":{"name":"measurementTagKeys","headline":"MeasurementTagKeys returns the list of tag keys for a specific measurement. ","description":"","parameters":[{"name":"bucket","headline":" is the bucket to return tag keys from for a specific measurement.","description":null,"required":false},{"name":"measurement","headline":" is the measurement to return tag keys from.","description":null,"required":false}],"flux_type":"Fun"}},"tagValues":{"Function":{"name":"tagValues","headline":"tagValues returns a list of unique values for a given tag. The return value is always a single table with a single column, _value. ","description":"## Examples\n```\nimport \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n   bucket: \"my-bucket\",\n   tag: \"host\",\n )\n```\n\n","parameters":[{"name":"bucket","headline":" is the bucket to return unique tag values from.","description":null,"required":false},{"name":"tag","headline":" is the tag to return unique values from","description":null,"required":false},{"name":"predicate","headline":" is the predicate function that filters tag values. Defaults to (r) => true.","description":null,"required":false},{"name":"start","headline":" Oldest time to include in results. Defaults to -30d.","description":"Relative start times are defined using negative durations. Negative durations are relative to now. Absolute start times are defined using time values.","required":false}],"flux_type":"Fun"}},"measurements":{"Function":{"name":"measurements","headline":"measurements returns a list of measurements in a specific bucket. The return value is always a single table with a single column, _value. ","description":"","parameters":[{"name":"bucket","headline":" is the bucket to retrieve field keys from.","description":null,"required":false}],"flux_type":"Fun"}},"fieldsAsCols":{"Function":{"name":"fieldsAsCols","headline":"fieldsAsCols is a special application of the pivot() function that pivotson _field and _time columns to aligns fields within each input table that have the same timestamp. ","description":"## Examples\n```\nimport \"influxdata/influxdb/schema\"\n\nfrom(bucket:\"example-bucket\")\n  |> range(start: -1h)\n  |> filter(fn: (r) => r._measurement == \"cpu\")\n  |> schema.fieldsAsCols()\n  |> keep(columns: [\"_time\", \"cpu\", \"usage_idle\", \"usage_user\"])\n```\n\n","parameters":[],"flux_type":"Fun"}},"fieldKeys":{"Function":{"name":"fieldKeys","headline":"fieldKeys returns field keys in a bucket. The return value is always a single table with a single column, _value. ","description":"## Examples\n```\nimport \"influxdata/influxdb/schema\"\n\nschema.fieldKeys(bucket: \"my-bucket\")\n```\n\nFieldKeys is a special application of tagValues that returns field keys in a given bucket. ","parameters":[{"name":"bucket","headline":" is the bucket to list field keys from.","description":null,"required":false},{"name":"predicate","headline":" is the predicate function that filters field keys. Defaults to (r) => true.","description":null,"required":false},{"name":"start","headline":" Oldest time to include in results. Defaults to -30d.","description":"Relative start times are defined using negative durations. Negative durations are relative to now. Absolute start times are defined using time values.","required":false}],"flux_type":"Fun"}},"measurementFieldKeys":{"Function":{"name":"measurementFieldKeys","headline":"measurementFieldKeys returns a list of fields in a measurement. The return value is always a single table with a single column, \"_value\". ","description":"## Examples\n```\nimport \"influxdata/influxdb/schema\"\n\nschema.measurementFieldKeys(\n  bucket: \"telegraf\",\n  measurement: \"cpu\",\n)\n```\n\n","parameters":[{"name":"bucket","headline":" is the bucket to retrieve field keys from.","description":null,"required":false},{"name":"measurement","headline":" is the measurement to list field keys from.","description":null,"required":false},{"name":"start","headline":" Oldest time to include in results. Defaults to -30d.","description":"Relative start times are defined using negative durations. Negative durations are relative to now. Absolute start times are defined using time values.","required":false}],"flux_type":"Fun"}},"tagKeys":{"Function":{"name":"tagKeys","headline":"tagKeys returns a list of tag keys for all series that match the predicate. The return value is always a single table with a single column, _value. ","description":"## Examples\n```\nimport \"influxdata/influxdb/schema\"\n\nschema.tagKeys(bucket: \"my-bucket\")\n```\n\nThe return value is always a single table with a single column \"_value\". ","parameters":[{"name":"bucket","headline":" is the bucket to return tag keys from.","description":null,"required":false},{"name":"predicate","headline":" is the predicate function that filters tag keys. Defaults to (r) => true.","description":null,"required":false},{"name":"start","headline":" Oldest time to include in results. Defaults to -30d.","description":"Relative start times are defined using negative durations. Negative durations are relative to now. Absolute start times are defined using time values.","required":false}],"flux_type":"Fun"}}}},{"path":"influxdata/influxdb/secrets","name":"secrets","headline":"Flux InfluxDB Secrets package provides functions and tools for workingwith sensitive secrets managed by InfluxDB.","description":null,"members":{"get":{"Function":{"name":"get","headline":"get is a function that retrieves a secret from the InfluxDBsecret store. ","description":"## Example\n```\nimport \"influxdata/influxdb/secrets\"\n\nsecrets.get(key: \"KEY_NAME\")\n```\n\n## Populate sensitive credentials with secrets\n```\nimport \"sql\"\nimport \"influxdata/influxdb/secrets\"\n\nusername = secrets.get(key: \"POSTGRES_USERNAME\")\npassword = secrets.get(key: \"POSTGRES_PASSWORD\")\n\nsql.from(\n  driverName: \"postgres\",\n  dataSourceName: \"postgresql://${username}:${password}@localhost\",\n  query:\"SELECT * FROM example-table\"\n)\n```\n\n","parameters":[{"name":"key","headline":" is the secret key to retrieve.","description":null,"required":false}],"flux_type":"Fun"}}}},{"path":"influxdata/influxdb/tasks","name":"tasks","headline":"Package tasks is an experimental package.The API for this package is not stable and should notbe counted on for production code.","description":null,"members":{"lastSuccess":{"Function":{"name":"lastSuccess","headline":"lastSuccess is a function that returns the time of the last successful runof the InfluxDb task or the value of the orTime parameter if the taskhas never successfully run. ","description":"## Example\n```\nimport \"influxdata/influxdb/tasks\"\n\ntasks.lastSuccess(orTime: 2020-01-01T00:00:00Z)\n```\n\n## Query data since the last successful task run\n```\nimport \"influxdata/influxdb/tasks\"\n\noption task = {\n  name: \"Example task\",\n  every: 30m\n}\n\nfrom(bucket: \"example-bucket\")\n  |> range(start: tasks.lastSuccess(orTime: -task.every))\n  // ...\n```\n\n","parameters":[{"name":"orTime","headline":" is the defualt time value returned if the task has never","description":"successfully run.","required":false}],"flux_type":"Fun"}},"_lastSuccess":{"Function":{"name":"_lastSuccess","headline":"_lastSuccess will return the time set on the option lastSuccessTimeor it will return the orTime. ","description":"","parameters":[],"flux_type":"Fun"}},"lastSuccessTime":{"Value":{"name":"lastSuccessTime","headline":"lastSuccessTime is the last time this task had run successfully. ","description":"","flux_type":"time"}},"_zeroTime":{"Value":{"name":"_zeroTime","headline":"_zeroTime is a sentinel value for the zero time. This is used to mark that the lastSuccessTime has not been set. ","description":"","flux_type":"time"}}}},{"path":"influxdata/influxdb/v1","name":"v1","headline":"Package v1 provides an API for working with an InfluxDB v1.x instance.>NOTE: Must functions in this package are now deprecated see influxdata/influxdb/schema.","description":null,"members":{"fieldsAsCols":{"Function":{"name":"fieldsAsCols","headline":"fieldsAsCols is a function that is a special application of the pivot()function that pivots on _field and _time columns to align fields withineach input table that have the same timestamp, and ressemble InfluxDB 1.xquery output. ","description":"Deprecated: See influxdata/influxdata/schema.fieldsAsCols. ## Example\n```\nimport \"influxdata/influxdb/v1\"\n\nfrom(bucket:\"example-bucket\")\n  |> range(start: -1h)\n  |> filter(fn: (r) => r._measurement == \"cpu\")\n  |> v1.fieldsAsCols()\n  |> keep(columns: [\"_time\", \"cpu\", \"usage_idle\", \"usage_user\"])\n```\n\n","parameters":[],"flux_type":"Fun"}},"tagValues":{"Function":{"name":"tagValues","headline":"tagValues is a function that returns a list of unique values for agiven tag. ","description":"The return value is always a single table with a single column _value. Deprecated: See influxdata/influxdata/schema.tagValues. ## Example\n```\nimport \"influxdata/influxdb/v1\"\n\nv1.tagValues(\n  bucket: \"my-bucket\",\n  tag: \"host\",\n)\n```\n\n","parameters":[{"name":"bucket","headline":" is the bucket to return unique tag values from.","description":null,"required":false},{"name":"tag","headline":" is the tag to return unique values from.","description":null,"required":false},{"name":"predicate","headline":" is the predecate function that filters tag values.","description":"Defaults to (r) => true.","required":false},{"name":"start","headline":" is the oldest time to include in results.","description":"Defaults to -30d. Relative start times are defined using negative durations. Negative durations are relative to now. Absolute start times are defined using time values.","required":false}],"flux_type":"Fun"}},"tagKeys":{"Function":{"name":"tagKeys","headline":"tagKeys is a function that returns a list of tag keys for all series thatmatch the predicate. ","description":"The return value is always a single table with a single column, _value. Deprecated: See influxdata/influxdata/schema.tagKeys. ## Example\n```\nimport \"influxdata/influxdb/v1\"\n\nv1.tagKeys(\n  bucket: \"example-bucket\",\n  predicate: (r) => true,\n  start: -30d\n)\n```\n\n","parameters":[{"name":"bucket","headline":" is the bucket to return tag keys from.","description":null,"required":false},{"name":"predicate","headline":" is the predicate function that filters tag keys.","description":"Defaults to (r) => true.","required":false},{"name":"start","headline":" is the oldest time to include in the results.","description":"Defaults to -30d. Relative start times are defined using negative durations. Absolute start times are defined using time values.","required":false}],"flux_type":"Fun"}},"measurementFieldKeys":{"Function":{"name":"measurementFieldKeys","headline":"measurementFieldKeys is a function that returns a list of fields in a measurements. ","description":"The return value is always a single table with a single column, _value. Deprecated: See influxdata/influxdata/schema.measurementFieldKeys. ## Example\n```\nimport \"influxdata/influxdb/v1\"\n\nv1.measurementFieldKeys(\n  bucket: \"example-bucket\",\n  measurement: \"example-measurement\",\n  start: -30d\n)\n```\n\n","parameters":[{"name":"bucket","headline":" is the bucket to retrieve field keys from.","description":null,"required":false},{"name":"measurement","headline":" is the measurement to list field keys from.","description":null,"required":false},{"name":"start","headline":" is is the oldest time to include in results.","description":"Defaults to -30d. Relative start times are defined using negative durations. Negative durations are relative to now. Absolute start times are defined using time values.","required":false}],"flux_type":"Fun"}},"fieldKeys":{"Function":{"name":"fieldKeys","headline":"fieldKeys is the function the returns field keys in a bucket. ","description":"The return value is always a single table with a singlecolumn, _value. Deprecated: See influxdata/influxdata/schema.fieldKeys. ## Example\n```\nimport \"influxdata/influxdb/v1\"\n\nv1.fieldKeys(\n  bucket: \"example-bucket\",\n  predicate: (r) => true,\n  start: -30d\n)\n```\n\n","parameters":[{"name":"bucket","headline":" is the bucket to list field keys from.","description":null,"required":false},{"name":"predicate","headline":" is the predicate function that filters field keys.","description":"Defaults to (r) => true.","required":false},{"name":"start","headline":" is the oldest time to include in results.","description":"defaults to -30d. Relative start times are defined using negative durations are relative to now. Absolute start times are defined using time values.","required":false}],"flux_type":"Fun"}},"json":{"Function":{"name":"json","headline":"Json parses an InfluxDB 1.x json result into a table stream. ","description":"","parameters":[],"flux_type":"Fun"}},"measurementTagValues":{"Function":{"name":"measurementTagValues","headline":"measurementTagValues is a function that returns a list of tag values fora specified measurement. ","description":"The return value is always a single table with a single column, _value. Deprecated: See influxdata/influxdata/schema.measurementTagValues. ## Example\n```\nimport \"influxdata/influxdb/v1\"\n\nv1.measurementTagValues(\n  bucket: \"example-bucket\",\n  measurement: \"cpu\",\n  tag: \"host\"\n)\n```\n\n","parameters":[{"name":"bucket","headline":" is the bucket to return tag values from a specific measurement.","description":null,"required":false},{"name":"measurement","headline":" is the measurement to return tag values from.","description":null,"required":false},{"name":"tag","headline":" is the tag to return all unique values from.","description":null,"required":false}],"flux_type":"Fun"}},"measurements":{"Function":{"name":"measurements","headline":"measurements is a function that returns a list of measurements in a specific bucket. ","description":"The return value is always a single table with a single column, _value. Deprecated: See influxdata/influxdata/schema.measurements. ## Example\n```\nimport \"influxdata/influxdb/v1\"\n\nv1.measurements(bucket: \"example-bucket\")\n```\n\n","parameters":[{"name":"bucket","headline":" is the bucket to recieves measurements from.","description":null,"required":false}],"flux_type":"Fun"}},"measurementTagKeys":{"Function":{"name":"measurementTagKeys","headline":"measurementTagKeys is a function that returns a list of tag keys for a specificmeasurement. ","description":"The return value is always a single table with a single column, _value. Deprecated: See influxdata/influxdata/schema.measurementTagKeys. ## Example\n```\nimport \"influxdata/influxdb/v1\"\n\nv1.measurementTagKeys(\n  bucket: \"example-bucket\",\n  measurement: \"cpu\"\n)\n```\n\n","parameters":[{"name":"bucket","headline":" is the bucket to return the tag keys from a specific measurement.","description":null,"required":false},{"name":"measurement","headline":" is the measurement to return tag key from.","description":null,"required":false}],"flux_type":"Fun"}},"databases":{"Function":{"name":"databases","headline":"databases is a function that returns a list of a database inan InfluxDB 1.7+ instances. ","description":"Output includes the following columns: - databaseName: Database name (string) - retentionPolicy: Retention policy name (string) - retentionPeriod: Retention period in nanoseconds (integer) - default: Default retention policy for database (boolean)## Example\n```\nimport \"influxdata/influxdb/v1\"\n\nv1.database()\n```\n\n","parameters":[],"flux_type":"Fun"}}}},{"path":"internal/debug","name":"debug","headline":"","description":null,"members":{"slurp":{"Function":{"name":"slurp","headline":"slurp will read the incoming tables and concatenate buffers with the same group keyinto a single table. This is useful for testing the performance impact of multiplebuffers versus a single buffer. ","description":"","parameters":[],"flux_type":"Fun"}},"pass":{"Function":{"name":"pass","headline":"pass will pass any incoming tables directly next to the following transformation. It is best used to interrupt any planner rules that rely on a specific ordering. ","description":"","parameters":[],"flux_type":"Fun"}},"sink":{"Function":{"name":"sink","headline":"sink will discard all data that comes into it. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"internal/gen","name":"gen","headline":"","description":null,"members":{"tables":{"Function":{"name":"tables","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"internal/influxql","name":"influxql","headline":"","description":null,"members":{"minTime":{"Value":{"name":"minTime","headline":"","description":"","flux_type":"time"}},"maxTime":{"Value":{"name":"maxTime","headline":"","description":"","flux_type":"time"}},"epoch":{"Value":{"name":"epoch","headline":"","description":"","flux_type":"time"}}}},{"path":"internal/promql","name":"promql","headline":"THIS PACKAGE IS NOT MEANT FOR EXTERNAL USE.","description":null,"members":{"resets":{"Function":{"name":"resets","headline":"resets() implements functionality equivalent to PromQL's resets() function:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#resets","parameters":[],"flux_type":"Fun"}},"promqlMonth":{"Function":{"name":"promqlMonth","headline":"promqlMonth() implements functionality equivalent to PromQL's month() function:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#month","parameters":[],"flux_type":"Fun"}},"promqlDayOfWeek":{"Function":{"name":"promqlDayOfWeek","headline":"promqlDayOfWeek() implements functionality equivalent to PromQL's day_of_week() function:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#day_of_week","parameters":[],"flux_type":"Fun"}},"holtWinters":{"Function":{"name":"holtWinters","headline":"holtWinters() implements functionality equivalent to PromQL's holt_winters()function:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#holt_winters","parameters":[],"flux_type":"Fun"}},"promqlDayOfMonth":{"Function":{"name":"promqlDayOfMonth","headline":"promqlDayOfMonth() implements functionality equivalent to PromQL's day_of_month() function:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#day_of_month","parameters":[],"flux_type":"Fun"}},"join":{"Function":{"name":"join","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"labelReplace":{"Function":{"name":"labelReplace","headline":"labelReplace implements functionality equivalent to PromQL's label_replace() function:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#label_replace","parameters":[],"flux_type":"Fun"}},"linearRegression":{"Function":{"name":"linearRegression","headline":"linearRegression implements linear regression functionality required to implementPromQL's deriv() and predict_linear() functions:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#derivhttps://prometheus.io/docs/prometheus/latest/querying/functions/#predict_linear","parameters":[],"flux_type":"Fun"}},"emptyTable":{"Function":{"name":"emptyTable","headline":"emptyTable() returns an empty table, which is used as a helper function to implementPromQL's time() and vector() functions:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#timehttps://prometheus.io/docs/prometheus/latest/querying/functions/#vector","parameters":[],"flux_type":"Fun"}},"extrapolatedRate":{"Function":{"name":"extrapolatedRate","headline":"extrapolatedRate() is a helper function that calculates extrapolated rates overcounters and is used to implement PromQL's rate(), delta(), and increase() functions. ","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#ratehttps://prometheus.io/docs/prometheus/latest/querying/functions/#increasehttps://prometheus.io/docs/prometheus/latest/querying/functions/#delta","parameters":[],"flux_type":"Fun"}},"timestamp":{"Function":{"name":"timestamp","headline":"timestamp() implements functionality equivalent to PromQL's timestamp() function:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#timestamp","parameters":[],"flux_type":"Fun"}},"instantRate":{"Function":{"name":"instantRate","headline":"instantRate() is a helper function that calculates instant rates overcounters and is used to implement PromQL's irate() and idelta() functions. ","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#iratehttps://prometheus.io/docs/prometheus/latest/querying/functions/#idelta","parameters":[],"flux_type":"Fun"}},"changes":{"Function":{"name":"changes","headline":"changes() implements functionality equivalent to PromQL's changes() function:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#changes","parameters":[],"flux_type":"Fun"}},"promqlYear":{"Function":{"name":"promqlYear","headline":"promqlYear() implements functionality equivalent to PromQL's year() function:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#year","parameters":[],"flux_type":"Fun"}},"promHistogramQuantile":{"Function":{"name":"promHistogramQuantile","headline":"promHistogramQuantile() implements functionality equivalent to PromQL'shistogram_quantile() function:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#histogram_quantile","parameters":[],"flux_type":"Fun"}},"promqlHour":{"Function":{"name":"promqlHour","headline":"promqlHour() implements functionality equivalent to PromQL's hour() function:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#hour","parameters":[],"flux_type":"Fun"}},"promqlDaysInMonth":{"Function":{"name":"promqlDaysInMonth","headline":"promqlDaysInMonth() implements functionality equivalent to PromQL's days_in_month() function:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#days_in_month","parameters":[],"flux_type":"Fun"}},"promqlMinute":{"Function":{"name":"promqlMinute","headline":"promqlMinute() implements functionality equivalent to PromQL's minute() function:","description":"https://prometheus.io/docs/prometheus/latest/querying/functions/#minute","parameters":[],"flux_type":"Fun"}},"quantile":{"Function":{"name":"quantile","headline":"quantile() accounts checks for quantile values that are out of range, above 1.0 or below 0.0, by either returning positive infinity or negative infinity in the _value column respectively. q must be a float ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"internal/testutil","name":"testutil","headline":"","description":null,"members":{"fail":{"Function":{"name":"fail","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"yield":{"Function":{"name":"yield","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"makeRecord":{"Function":{"name":"makeRecord","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"interpolate","name":"interpolate","headline":"Flux interpolate package provides functions that insert rows for missing dataat regular intervals and estimate values using different interpolation methods.","description":null,"members":{"linear":{"Function":{"name":"linear","headline":"linear is a function that inserts rows at regular intervals using linearinterpolation to determine values for inserted rows. ","description":"## Function Requirements - Input data must have _time and _value columns.  - All columns other than _time and _value must be part of the group key. Interpolate missing data by day\n```\nimport \"interpolate\"\n\ndata\n  |> interpolate.linear(every: 1d)\n```\n\nInput_time | _value--- | ---2021-01-01T00:00:00Z | 10.02021-01-02T00:00:00Z | 20.02021-01-04T00:00:00Z | 40.02021-01-05T00:00:00Z | 50.02021-01-08T00:00:00Z | 80.02021-01-09T00:00:00Z | 90.0Output_time | _value--- | ---2021-01-01T00:00:00Z | 10.02021-01-02T00:00:00Z | 20.02021-01-04T00:00:00Z | 40.02021-01-05T00:00:00Z | 50.02021-01-06T00:00:00Z | 60.02021-01-07T00:00:00Z | 70.02021-01-08T00:00:00Z | 80.02021-01-09T00:00:00Z | 90.0","parameters":[{"name":"every","headline":" is the duration of time between interpolated points.","description":null,"required":false}],"flux_type":"Fun"}}}},{"path":"json","name":"json","headline":"Package json functions provide tools for working with JSON.","description":null,"members":{"encode":{"Function":{"name":"encode","headline":"encode converts a value into JSON bytesTime values are encoded using RFC3339. Duration values are encoded in number of milleseconds since the epoch. Regexp values are encoded as their string representation. Bytes values are encodes as base64-encoded strings. Function values cannot be encoded and will produce an error. ","description":"## Encode all values in a column in JSON bytes\n```\nimport \"json\"\n\nfrom(bucket: \"example-bucket\")\n  |> range(start: -1h)\n  |> map(fn: (r) => ({\n      r with _value: json.encode(v: r._value)\n  }))\n```\n\n","parameters":[{"name":"V","headline":" is the value to convert","description":null,"required":false}],"flux_type":"Fun"}}}},{"path":"kafka","name":"kafka","headline":"","description":null,"members":{"to":{"Function":{"name":"to","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"math","name":"math","headline":"Package math provides basic constants and mathematical functions","description":null,"members":{"erfc":{"Function":{"name":"erfc","headline":"erfc is a function that returns the complementary error function of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.erfc(x: 22.6)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.erfc(+Inf) // Returns 0\nmath.erfc(-Inf) // Returns 2\nmath.erfc(NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"float64bits":{"Function":{"name":"float64bits","headline":"float64bits is a function that returns the IEEE 754 binary representation of f,with the sign bit of f and the result in the same bit position. ","description":"## Example\n```\nimport \"math\"\n\nmath.float64bits(f: 1234.56)\n```\n\n","parameters":[{"name":"f","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"log1p":{"Function":{"name":"log1p","headline":"log1p is a function that returns the natural logarithm of 1 plus theargument x. it is more accurate than math.log(x: 1 + x) when x isnear zero. ","description":"## Example\n```\nimport \"math\"\n\nmath.log1p(x: 0.56)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.log1p(x: +Inf) // Returns +Inf\nmath.log1p(x: ±0)   // Returns ±0\nmath.log1p(x: -1)   // Returns -Inf\nmath.log1p(x: <-1)  // Returns NaN\nmath.log1p(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"minint":{"Value":{"name":"minint","headline":"","description":"","flux_type":"int"}},"sqrte":{"Value":{"name":"sqrte","headline":"","description":"","flux_type":"float"}},"signbit":{"Function":{"name":"signbit","headline":"signbit is a function that reports whether x is negative of negative zero. ","description":"## Example\n```\nimport \"math\"\n\nmath.signbit(x: -1.2)\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the evaluation.","description":null,"required":false}],"flux_type":"Fun"}},"phi":{"Value":{"name":"phi","headline":"","description":"","flux_type":"float"}},"erf":{"Function":{"name":"erf","headline":"erf is a function that returns the error function of x","description":"## Example\n```\nimport \"math\"\n\nmath.erf(x: 22.6)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.erf(+Inf) // Returns 1\nmath.erf(-Inf) // Returns -1\nmath.erf(NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"lgamma":{"Function":{"name":"lgamma","headline":"lgamma is a function that returns the natural logarithm and sign(-1 or +1) of math.gamma(x:x). ","description":"## Example\n```\nimport \"math\"\n\nmath.lgamma(x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.lgamma(x: +Inf)     // Returns +Inf\nmath.lgamma(x: 0)        // Returns +Inf\nmath.lgamma(x: -integer) // Returns +Inf\nmath.lgamma(x: -Inf)     // Returns -Inf\nmath.lgamma(x: NaN)      // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"sqrt":{"Function":{"name":"sqrt","headline":"sqrt is a function that returns the square root of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.sqrt(x: 4.0)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.sqrt(x: +Inf) // Returns +Inf\nmath.sqrt(x: ±0)   // Returns ±0\nmath.sqrt(x: <0)   // Returns NaN\nmath.sqrt(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"y0":{"Function":{"name":"y0","headline":"y0 is a function that returns the order-zero Bessel function of thesecond kind. ","description":"## Example\n```\nimport \"math\"\n\nmath.y0(x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.y0(x: +Inf) // Returns 0\nmath.y0(x: 0)    // Returns -Inf\nmath.y0(x: <0)   // Returns NaN\nmath.y0(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"yn":{"Function":{"name":"yn","headline":"yn is a function that returns the order-n Bessel function ofthe second kind. ","description":"## Example\n```\nimport \"math\"\n\nmath.yn(n: 3, x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.yn(n:n, x: +Inf) // Returns 0\nmath.yn(n: ≥0, x: 0)  // Returns -Inf\nmath.yn(n: <0, x: 0)  // Returns +Inf if n is odd, -Inf if n is even\nmath.yn(n:n, x: <0)   // Returns NaN\nmath.yn(n:n, x:NaN)   // Returns NaN\n```\n\n","parameters":[{"name":"n","headline":" is the order number used in the operation.","description":null,"required":false},{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"acos":{"Function":{"name":"acos","headline":"acos is a funciton that returns the acosine of x in radians. ","description":"## Example\n```\nimport \"math\"\n\nmath.acos(x: 0.22)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.acos(x: <-1) // returns NaN\nmath.acos(x: >1) // returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":"x should be greater than -1 and less than 1. Otherwise, the operation will return NaN.","required":false}],"flux_type":"Fun"}},"mMin":{"Function":{"name":"mMin","headline":"mMin is a function taht returns the lessser of x or y. ","description":"## Example\n```\nimport \"math\"\n\nmath.mMin(x: 1.23, y: 4.56)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.mMin(x:x, y: -Inf) // Returns -Inf\nmath.mMin(x: -Inf, y:y) // Returns -Inf\nmath.mMin(x:x, y: NaN)  // Returns NaN\nmath.mMin(x: NaN, y:y)  // Returns NaN\nmath.mMin(x: -0, y: ±0) // Returns -0\nmath.mMin(x: ±0, y: -0) // Returns -0\n```\n\n","parameters":[{"name":"x","headline":" is the x-value used in the operation.","description":null,"required":false},{"name":"y","headline":" is the y-value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"ilogb":{"Function":{"name":"ilogb","headline":"ilogb is a function that returns the binary exponent of x as an integer. ","description":"## Example\n```\nimport \"math\"\n\nmath.ilogb(x: 123.45)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.ilogb(x: ±Inf) // Returns MaxInt32\nmath.ilogb(x: 0)    // Returns MinInt32\nmath.ilogb(x: NaN)  // Returns MaxInt32\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"jn":{"Function":{"name":"jn","headline":"jn is a function that returns the order-n Bessel funciton of the first kind. ","description":"## Example\n```\nimport \"math\"\n\nmath.jn(n: 2, x: 1.23)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.jn(n:n, x: ±Inf) // Returns 0\nmath.jn(n:n, x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"n","headline":" is the order number.","description":null,"required":false},{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"maxfloat":{"Value":{"name":"maxfloat","headline":"","description":"","flux_type":"float"}},"modf":{"Function":{"name":"modf","headline":"modf is a function that returns integer and fractional floating-point numbersthat sum to f. ","description":"Both values have the same sign as f. ## Example\n```\nimport \"math\"\n\nmath.modf(f: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.modf(f: ±Inf) // Returns {int: ±Inf, frac: NaN}\nmath.modf(f: NaN)  // Returns {int: NaN, frac: NaN}\n```\n\n","parameters":[{"name":"f","headline":" is the value used in the operation","description":null,"required":false}],"flux_type":"Fun"}},"cos":{"Function":{"name":"cos","headline":"cos is a function that returns the cosine of the radian argument x. ","description":"## Example\n```\nimport \"math\"\n\nmath.cos(x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.cos(±Inf) // Returns NaN\nmath.cos(NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"maxint":{"Value":{"name":"maxint","headline":"","description":"","flux_type":"int"}},"maxuint":{"Value":{"name":"maxuint","headline":"","description":"","flux_type":"uint"}},"gamma":{"Function":{"name":"gamma","headline":"gamma is a function that returns the gamma function of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.gamma(x: 2.12)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.gamma(x: +Inf) = +Inf\nmath.gamma(x: +0) = +Inf\nmath.gamma(x: -0) = -Inf\nmath.gamma(x: <0) = NaN for integer x < 0\nmath.gamma(x: -Inf) = NaN\nmath.gamma(x: NaN) = NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"NaN":{"Function":{"name":"NaN","headline":"NaN is a function that returns a IEEE 754 \"not-a-number\" value. ","description":"## Example\n```\nimport \"math\"\n\nmath.NaN()\n```\n\n","parameters":[],"flux_type":"Fun"}},"trunc":{"Function":{"name":"trunc","headline":"trunc is a function that returns the integer value of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.trunc(x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.trunc(x: ±0)   // Returns ±0\nmath.trunc(x: ±Inf) // Returns ±Inf\nmath.trunc(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"cosh":{"Function":{"name":"cosh","headline":"cosh is a function that returns the hyperbolic cosine of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.cosh(x: 1.22)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.cosh(±0)   // Returns 1\nmath.cosh(±Inf) // Returns +Inf\nmath.cosh(NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"tanh":{"Function":{"name":"tanh","headline":"tanh is a function that returns the hyperbolic tangent of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.tanh(x: 1.23)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.tanh(x: ±0)   // Returns ±0\nmath.tanh(x: ±Inf) // Returns ±1\nmath.tanh(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"mod":{"Function":{"name":"mod","headline":"mod is a function that returns a floating-point remainder of x/y. ","description":"The magnitude of the result is less than y and its sign agreeswith that of x. ## Example\n```\nimport \"math\"\n\nmath.mod(x: 1.23, y: 4.56)\n```\n\n## Special Cases\n```\nmath.mod(x: ±Inf, y:y)  // Returns NaN\nmath.mod(x: NaN, y:y)   // Returns NaN\nmath.mod(x:x, y: 0)     // Returns NaN\nmath.mod(x:x, y: ±Inf)  // Returns x\nmath.mod(x:x, y: NaN)   // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the x-value used in the operation.","description":null,"required":false},{"name":"y","headline":" is the y-value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"log2":{"Function":{"name":"log2","headline":"log2 is a function returns the binary logarithm of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.log2(X: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.log2(x: +Inf) // Returns +Inf\nmath.log2(x: 0)    // Returns -Inf\nmath.log2(x: <0)   // Returns NaN\nmath.log2(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"ln10":{"Value":{"name":"ln10","headline":"","description":"","flux_type":"float"}},"sqrt2":{"Value":{"name":"sqrt2","headline":"","description":"","flux_type":"float"}},"pi":{"Value":{"name":"pi","headline":"on floating point numbers. ","description":"","flux_type":"float"}},"hypot":{"Function":{"name":"hypot","headline":"hypot is a function that returns the square root of p*p + q*q, takingcare to avoid overflow and underflow. ","description":"## Params - p is the p-value used in the operation.  - q is the q-value used in the operation. ## Example\n```\nimport \"math\"\n\nmath.hypot(p: 2.0, q: 5.0)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.hypot(p: ±Inf, q:q) // Returns +Inf\nmath.hypot(p:p, q: ±Inf) // Returns +Inf\nmath.hypot(p: NaN, q:q)  // Returns NaN\nmath.hypot(p:p, q: NaN)  // Returns NaN\n```\n\n","parameters":[],"flux_type":"Fun"}},"roundtoeven":{"Function":{"name":"roundtoeven","headline":"roundtoeven is a function that returns the nearest integer, roundingties to even. ","description":"## Example\n```\nimport \"math\"\n\nmath.roundtoeven(x: 3.14)\nmath.roundtoeven(x: 3.5)\n```\n\n## Special Cases\n```\nmath.roundtoeven(x: ±0)   // Returns ±0\nmath.roundtoeven(x: ±Inf) // Returns ±Inf\nmath.roundtoeven(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"expm1":{"Function":{"name":"expm1","headline":"expm1 is a function that returns e**x - 1, the base-e exponential of x minus","description":" - It is more accurate than math.exp(x:x) - 1 when x is near zero. ## Example\n```\nimport \"math\"\n\nmath.expm1(x: 1.22)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.expm1(+Inf) // Returns +Inf\nmath.expm1(-Inf) // Returns -1\nmath.expm1(NaN)  // Returns NaN\n```\n\nVery large values overflow to -1 or +Inf. ","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"ldexp":{"Function":{"name":"ldexp","headline":"ldexp is a function that is the inverse of math.frexp(). It returnsfrac x 2**exp. ","description":"## Example\n```\nimport \"math\"\n\nmath.ldexp(frac: 0.5, exp: 6)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.ldexp(frac: ±0, exp:exp)   // Returns ±0\nmath.ldexp(frac: ±Inf, exp:exp) // Returns ±Inf\nmath.ldexp(frac: NaN, exp:exp)  // Returns NaN\n```\n\n","parameters":[{"name":"frac","headline":" is the fraction used in the operation.","description":null,"required":false},{"name":"exp","headline":" is the exponent used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"log":{"Function":{"name":"log","headline":"log is a function that returns the natural logarithm of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.log(x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.log(x: +Inf) // Returns +Inf\nmath.log(x: 0)    // Returns -Inf\nmath.log(x: <0)   // Returns NaN\nmath.log(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"atanh":{"Function":{"name":"atanh","headline":"atanh is a function that returns the inverse hyperbolic tangent of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.atanh(x: 0.22)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.atanh(x: 1)   // Returns +Inf\nmath.atanh(x: ±0)  // Returns ±0\nmath.atanh(x: -1)  // Returns -Inf\nmath.atanh(x: <-1) // Returns NaN\nmath.atanh(x: >1)  // Returns NaN\nmath.atanh(x: NaN) // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":"x should be greater than -1 and less than 1, otherwise the operation will return NaN.","required":false}],"flux_type":"Fun"}},"exp":{"Function":{"name":"exp","headline":"exp is a function that returns e**x, the base-e exponential of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.exp(x: 21.0)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.exp(x: +Inf) // Returns +Inf\nmath.exp(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"remainder":{"Function":{"name":"remainder","headline":"remainder is a function that returns the IEEE 754 floating-point remainderof x / y. ","description":"## Example\n```\nimport \"math\"\n\nmath.remainder(x: 21.0, y: 4.0)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.remainder(x: ±Inf, y:y)  // Returns NaN\nmath.remainder(x: NaN, y:y)   // Returns NaN\nmath.remainder(x:x, y: 0)     // Returns NaN\nmath.remainder(x:x, y: ±Inf)  // Returns x\nmath.remainder(x:x, y: NaN)   // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the numerator used in the operation.","description":null,"required":false},{"name":"y","headline":" is the denominator used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"sin":{"Function":{"name":"sin","headline":"sin is a function that returns the sine of the radian argument x. ","description":"## Example\n```\nimport \"math\"\n\nmath.sin(x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.sin(x: ±0)   // Returns ±0\nmath.sin(x: ±Inf) // Returns NaN\nmath.sin(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the radian value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"atan2":{"Function":{"name":"atan2","headline":"atan2 is a function that returns the artangent of x/y, using the signsof the two to determine the quadrant of the return value. ","description":"## Example\n```\nimport \"math\"\n\nmath.atan2(y: 1.22, x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.atan2(y:y, x:NaN)        // Returns NaN\nmath.atan2(y: NaN, x:x)       // Returns NaN\nmath.atan2(y: +0, x: >=0)     // Returns +0\nmath.atan2(y: -0, x: >=0)     // Returns -0\nmath.atan2(y: +0, x: <=-0)    // Returns +Pi\nmath.atan2(y: -0, x: <=-0)    // Returns -Pi\nmath.atan2(y: >0, x: 0)       // Returns +Pi/2\nmath.atan2(y: <0, x: 0)       // Returns -Pi/2\nmath.atan2(y: +Inf, x: +Inf)  // Returns +Pi/4\nmath.atan2(y: -Inf, x: +Inf)  // Returns -Pi/4\nmath.atan2(y: +Inf, x: -Inf)  // Returns 3Pi/4\nmath.atan2(y: -Inf, x: -Inf)  // Returns -3Pi/4\nmath.atan2(y:y, x: +Inf)      // Returns 0\nmath.atan2(y: >0, x: -Inf)    // Returns +Pi\nmath.atan2(y: <0, x: -Inf)    // Returns -Pi\nmath.atan2(y: +Inf, x:x)      // Returns +Pi/2\nmath.atan2(y: -Inf, x:x)      // Returns -Pi/2\n```\n\n","parameters":[{"name":"y","headline":" is the y-coordinate used in the operation.","description":null,"required":false},{"name":"x","headline":" is the x-corrdinate used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"asinh":{"Function":{"name":"asinh","headline":"asinh is a function that returns the inverse hyperbolic sine of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.asinh(x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.asinh(x: ±0) // returns ±0\nmath.asinh(x: ±Inf) // returns ±Inf\nmath.asinh(x: NaN) // returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"acosh":{"Function":{"name":"acosh","headline":"acosh is a function that returns the inverse hyperbolic cosine of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.acosh(x: 1.22)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.acosh(x: +Inf) // returns +Inf\nmath.acosh(x: <1) // returns NaN\nmath.acosh(x: NaN) // returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":"x should be greater than 1. If less than 1 the operation will return NaN.","required":false}],"flux_type":"Fun"}},"e":{"Value":{"name":"e","headline":"","description":"","flux_type":"float"}},"exp2":{"Function":{"name":"exp2","headline":"exp2 is a function that returns 2**x, the base-2 exponential of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.exp2(x: 21.0)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.exp2(x: +Inf) // Returns +Inf\nmath.exp2(x: NaN)  // Returns NaN\n```\n\nVery large values overflow to 0 or +Inf. Very small values overflow to 1. ","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"atan":{"Function":{"name":"atan","headline":"atan is a function that returns the arctangent of x in radians. ","description":"## Example\n```\nimport \"math\"\n\nmath.atan(x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.atan(x: ±0) // returns ±0\nmath.atan(x: ±Inf) // returns ±Pi/2\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"sqrtpi":{"Value":{"name":"sqrtpi","headline":"","description":"","flux_type":"float"}},"ceil":{"Function":{"name":"ceil","headline":"ceil is a function that returns the least integer value greater thanor equal to x. ","description":"## Example\n```\nimport \"math\"\n\nmath.ceil(x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.ceil(±0)   // Returns ±0\nmath.ceil(±Inf) // Returns ±Inf\nmath.ceil(NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"cbrt":{"Function":{"name":"cbrt","headline":"cbrt is a function that returns the cube root of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.cbrt(x: 1728.0)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.cbrt(±0)   // Returns ±0\nmath.cbrt(±Inf) // Returns ±Inf\nmath.cbrt(NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"sincos":{"Function":{"name":"sincos","headline":"sincos is a function that returns the values of math.sin(x:x) andmath.cos(x:x). ","description":"## Example\n```\nimport \"math\"\n\nmath.sincos(x: 1.23)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.sincos(x: ±0)   // Returns {sin: ±0, cos: 1}\nmath.sincos(x: ±Inf) // Returns {sin: NaN, cos: NaN}\nmath.sincos(x: NaN)  // Returns {sin: NaN, cos:  NaN}\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"mInf":{"Function":{"name":"mInf","headline":"mInf is a function that returns positive infinity if sign >= 0, negative infinityif sign < 0","description":"## Example\n```\nimport \"math\"\n\nmath.mInf(sign: 1)\n```\n\n","parameters":[{"name":"sign","headline":" is the sign value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"log10e":{"Value":{"name":"log10e","headline":"","description":"","flux_type":"float"}},"copysign":{"Function":{"name":"copysign","headline":"copysign is a function that returns a value with the magnitude x andthe sign of y. ","description":"## Example\n```\nimport \"math\"\n\nmath.copysign(x: 1.0, y: 2.0)\n```\n\n","parameters":[{"name":"x","headline":" is the magnitude used in the operation.","description":null,"required":false},{"name":"y","headline":" is the sign used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"sqrtphi":{"Value":{"name":"sqrtphi","headline":"","description":"","flux_type":"float"}},"float64frombits":{"Function":{"name":"float64frombits","headline":"float64frombits is a function that returns the floating-point number correspondingto the IEE 754 binary representation b, with the sign bit of b and the result in thesame bit position. ","description":"## Example\n```\nimport \"math\"\n\nmath.float64frombits(b: 4)\n```\n\n","parameters":[{"name":"b","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"isInf":{"Function":{"name":"isInf","headline":"isInf is a function that reports whether f is an infinity, according to sign. ","description":"If sign > 0, math.isInf reports whether f is positive infinity. If sign < 0, math.isInf reports whether f is negative infinity. If sign  == 0, math.isInf reports whether f is either infinity. ## Example\n```\nimport \"math\"\n\nmath.isInf(f: 2.12, sign: 3)\n```\n\n","parameters":[{"name":"f","headline":" is the value used in the evaluation.","description":null,"required":false},{"name":"sign","headline":" is the sign used in the eveluation.","description":null,"required":false}],"flux_type":"Fun"}},"logb":{"Function":{"name":"logb","headline":"logb is a function that returns the binary exponent of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.logb(x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.logb(x: ±Inf) // Returns +Inf\nmath.logb(x: 0)    // Returns -Inf\nmath.logb(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"erfinv":{"Function":{"name":"erfinv","headline":"erfinv is a function that returns the inverse error function of x. ","description":"## Parameter - x is the value used in the operation. x should be greater than -1 and less than 1. Otherwise, the operation willreturn NaN. ## Example\n```\nimport \"math\"\n\nmath.erfinv(x: 0.22)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.erfinv(x: 1)   // Returns +Inf\nmath.erfinv(x: -1)  // Returns -Inf\nmath.erfinv(x: <-1) // Returns NaN\nmath.erfinv(x: > 1) // Returns NaN\nmath.erfinv(x: NaN) // Returns NaN\n```\n\n","parameters":[],"flux_type":"Fun"}},"mMax":{"Function":{"name":"mMax","headline":"mMax is a function that returns the larger of x or y. ","description":"## Example\n```\nimport \"math\"\n\nmath.mMax(x: 1.23, y: 4.56)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.mMax(x:x, y:+Inf)  // Returns +Inf\nmath.mMax(x: +Inf, y:y) // Returns +Inf\nmath.mMax(x:x, y: NaN)  // Returns NaN\nmath.mMax(x: NaN, y:y)  // Returns NaN\nmath.mMax(x: +0, y: ±0) // Returns +0\nmath.mMax(x: ±0, y: +0) // Returns +0\nmath.mMax(x: -0, y: -0) // Returns -0\n```\n\n","parameters":[{"name":"x","headline":" is the x-value used in the operation.","description":null,"required":false},{"name":"y","headline":" is the y-value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"round":{"Function":{"name":"round","headline":"round is a function that returns the nearest integer, rounding half awayfrom zero. ","description":"## Example\n```\nimport \"math\"\n\nmath.round(x: 2.12)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.round(x: ±0)   // Returns ±0\nmath.round(x: ±Inf) // Returns ±Inf\nmath.round(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"y1":{"Function":{"name":"y1","headline":"y1 is a function that returns the order-one Bessel function ofthe second kind. ","description":"## Example\n```\nimport \"math\"\n\nmath.y1(x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.y1(x: +Inf) // Returns 0\nmath.y1(x: 0)    // Returns -Inf\nmath.y1(x: <0)   // Returns NaN\nmath.y1(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"pow":{"Function":{"name":"pow","headline":"pow is a function that returns x**y, the base-x exponential of y. ","description":"## Example\n```\nimport \"math\"\n\nmath.pow(x: 2.0, y: 3.0)\n```\n\n## Special Cases\n```\nimport \"math\"\n\n// In order of priority\nmath.pow(x:x, y:±0)     // Returns 1 for any x\nmath.pow(x:1, y:y)      // Returns 1 for any y\nmath.pow(x:X, y:1)      // Returns x for any x\nmath.pow(x:NaN, y:y)    // Returns NaN\nmath.pow(x:x, y:NaN)    // Returns NaN\nmath.pow(x:±0, y:y)     // Returns ±Inf for y an odd integer < 0\nmath.pow(x:±0, y:-Inf)  // Returns +Inf\nmath.pow(x:±0, y:+Inf)  // Returns +0\nmath.pow(x:±0, y:y)     // Returns +Inf for finite y < 0 and not an odd integer\nmath.pow(x:±0, y:y)     // Returns ±0 for y an odd integer > 0\nmath.pow(x:±0, y:y)     // Returns +0 for finite y > 0 and not an odd integer\nmath.pow(x:-1, y:±Inf)  // Returns 1\nmath.pow(x:x, y:+Inf)   // Returns +Inf for |x| > 1\nmath.pow(x:x, y:-Inf)   // Returns +0 for |x| > 1\nmath.pow(x:x, y:+Inf)   // Returns +0 for |x| < 1\nmath.pow(x:x, y:-Inf)   // Returns +Inf for |x| < 1\nmath.pow(x:+Inf, y:y)   // Returns +Inf for y > 0\nmath.pow(x:+Inf, y:y)   // Returns +0 for y < 0\nmath.pow(x:-Inf, y:y)   // Returns math.pow(-0, -y)\nmath.pow(x:x, y:y)      // Returns NaN for finite x < 0 and finite non-integer y\n```\n\n","parameters":[],"flux_type":"Fun"}},"floor":{"Function":{"name":"floor","headline":"floor is a function that returns the greatest integer value less than orequal to x. ","description":"## Example\n```\nimport \"math\"\n\nmath.floor(x: 1.22)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.floor(±0)   // Returns ±0\nmath.floor(±Inf) // Returns ±Inf\nmath.floor(NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"isNaN":{"Function":{"name":"isNaN","headline":"isNaN is a function that reports whether f is an IEEE 754 \"not-a-number\" value. ","description":"## Example\n```\nimport \"math\"\n\nmath.isNaN(f: 12.345)\n```\n\n","parameters":[{"name":"f","headline":" is the value used in the evaluation.","description":null,"required":false}],"flux_type":"Fun"}},"pow10":{"Function":{"name":"pow10","headline":"pow10 is a function that returns 10**n, the base-10 exponential of n. ","description":"## Example\n```\nimport \"math\"\n\nmath.pow10(n: 3)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.pow10(n: <-323) // Returns 0\nmath.pow10(n: >308)  // Returns +Inf\n```\n\n","parameters":[{"name":"n","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"j1":{"Function":{"name":"j1","headline":"j1 is a funciton that returns the order-one Bessel function for the first kind. ","description":"## Example\n```\nimport \"math\"\n\nmath.j1(x: 1.23)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.j1(±Inf) // Returns 0\nmath.j1(NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"ln2":{"Value":{"name":"ln2","headline":"","description":"","flux_type":"float"}},"dim":{"Function":{"name":"dim","headline":"dim is a function that returns the maximum of x - y or 0. ","description":"## Example\n```\nimport \"math\"\n\nmath.dim(x: 12.2, y: 8.1)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.dim(x: +Inf, y: +Inf) // Returns NaN\nmath.dim(x: -Inf, y: -Inf) // Returns NaN\nmath.dim(x:x, y    : NaN)  // Returns NaN\nmath.dim(x: NaN, y :y)     // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the X-value used in the operation .","description":null,"required":false},{"name":"","headline":"'y' is the Y-value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"tan":{"Function":{"name":"tan","headline":"tan is a function that returns the tangent of the radian argument. ","description":"## Example\n```\nimport \"math\"\n\nmath.tan(x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.tan(x: ±0)   // Returns ±0\nmath.tan(x: ±Inf) // Returns NaN\nmath.tan(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"erfcinv":{"Function":{"name":"erfcinv","headline":"erfcinv is a function that returns the inverse of math.erfc(). ","description":"## Example\n```\nimport \"math\"\n\nmath.erfcinv(x: 0.42345)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.erfcinv(x: 0)   // Returns +Inf\nmath.erfcinv(x: 2)   // Returns -Inf\nmath.erfcinv(x: <0)  // Returns NaN\nmath.erfcinv(x: >2)  // Returns NaN\nmath.erfcinv(x: NaN) // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":"x should be greater than 0 and less than 2. Otherwise the operation will return NaN.","required":false}],"flux_type":"Fun"}},"log10":{"Function":{"name":"log10","headline":"log10 is a function that returns the decimal logarithm of x. ","description":"## Params - x is the value used in the operation. ## Example\n```\nimport \"math\"\n\nmath.log10(x: 3.14)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.log10(x: +Inf) // Returns +Inf\nmath.log10(x: 0)    // Returns -Inf\nmath.log10(x: <0)   // Returns NaN\nmath.log10(x: NaN)  // Returns NaN\n```\n\n","parameters":[],"flux_type":"Fun"}},"asin":{"Function":{"name":"asin","headline":"asin is a function that returns the arcsine of x in radians. ","description":"## Example\n```\nimport \"math\"\n\nmath.asin(x: 0.22)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.asin(x: ±0) // returns ±0\nmath.asin(x: <-1) // returns NaN\nmath.asin(x: >1) // returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is is value used in the operation.","description":"x should be greater than -1 and less than 1. Otherwise the function will return NaN.","required":false}],"flux_type":"Fun"}},"frexp":{"Function":{"name":"frexp","headline":"frexp is a function that breaks f into a normalized fraction and anintegral part of two. ","description":"It returns frac and exp satisfying f == frac x 2**exp,with the absolute value of frac in the interval [1/2, 1). ## Example\n```\nimport \"math\"\n\nmath.frexp(f: 22.0)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.frexp(f: ±0)   // Returns {frac: ±0, exp: 0}\nmath.frexp(f: ±Inf) // Returns {frac: ±Inf, exp: 0}\nmath.frexp(f: NaN)  // Returns {frac: NaN, exp: 0}\n```\n\n","parameters":[{"name":"f","headline":" the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"abs":{"Function":{"name":"abs","headline":"abs is a function that returns the absolute value of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.abs(x: -1.22)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.abs(x: ±Inf) // returns +Inf\nmath.abs(x: NaN) // returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"smallestNonzeroFloat":{"Value":{"name":"smallestNonzeroFloat","headline":"","description":"","flux_type":"float"}},"sinh":{"Function":{"name":"sinh","headline":"sinh is a function that returns the hyperbolic sine of x. ","description":"## Example\n```\nimport \"math\"\n\nmath.sinh(x: 1.23)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.sinh(x: ±0)   // Returns ±0\nmath.sinh(x: ±Inf) // Returns ±Inf\nmath.sinh(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"j0":{"Function":{"name":"j0","headline":"j0 is a function that returns the order-zero Bessel function of the first kind. ","description":"## Example\n```\nimport \"math\"\n\nmath.j0(x: 1.23)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.j0(x: ±Inf) // Returns 0\nmath.j0(x: 0)    // Returns 1\nmath.j0(x: NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}},"log2e":{"Value":{"name":"log2e","headline":"","description":"","flux_type":"float"}},"nextafter":{"Function":{"name":"nextafter","headline":"nextafter is a function that returns the next representable float value afterx towards y. ","description":"## Example\n```\nimport \"math\"\n\nmath.nextafter(x: 1.23, y: 4.56)\n```\n\n## Special Cases\n```\nimport \"math\"\n\nmath.nextafter(x:x, y:x)    // Returns x\nmath.nextafter(x: NaN, y:y) // Returns NaN\nmath.nextafter(x:x, y:NaN)  // Returns NaN\n```\n\n","parameters":[{"name":"x","headline":" is the x-vaue used in the operation.","description":null,"required":false},{"name":"y","headline":" is the y-value used in the operation.","description":null,"required":false}],"flux_type":"Fun"}}}},{"path":"pagerduty","name":"pagerduty","headline":"Package pagerduty provides functions for sending data to PagerDuty.","description":null,"members":{"actionFromSeverity":{"Function":{"name":"actionFromSeverity","headline":"actionFromSeverity converts a severity to a PagerDuty action. ok converts to resolve. All other severities convert to trigger. ","description":"","parameters":[{"name":"severity","headline":" is the severity to convert to a PagerDuty action.","description":null,"required":false}],"flux_type":"Fun"}},"actionFromLevel":{"Function":{"name":"actionFromLevel","headline":"actionFromLevel converts a monitoring level to an action; \"ok\" becomes \"resolve\" everything else converts to \"trigger\". ","description":"","parameters":[],"flux_type":"Fun"}},"endpoint":{"Function":{"name":"endpoint","headline":"endpoint returns a function that can be used to send a message to PagerDuty that includes output data. ","description":"## Send critical statuses to a PagerDuty endpoint\n```\nimport \"pagerduty\"\nimport \"influxdata/influxdb/secrets\"\n\nroutingKey = secrets.get(key: \"PAGERDUTY_ROUTING_KEY\")\ntoPagerDuty = pagerduty.endpoint()\n\ncrit_statuses = from(bucket: \"example-bucket\")\n  |> range(start: -1m)\n  |> filter(fn: (r) => r._measurement == \"statuses\" and r.status == \"crit\")\n\ncrit_statuses\n  |> toPagerDuty(mapFn: (r) => ({ r with\n      routingKey: routingKey,\n      client: r.client,\n      clientURL: r.clientURL,\n      class: r.class,\n      eventAction: r.eventAction,\n      group: r.group,\n      severity: r.severity,\n      component: r.component,\n      source: r.source,\n      summary: r.summary,\n      timestamp: r._time,\n    })\n  )()\n```\n\n","parameters":[{"name":"url","headline":" is the The PagerDuty v2 Events API URL.","description":"Defaults to https://events.pagerduty.com/v2/enqueue.","required":false},{"name":"Usage","headline":" the pagerduty.endpoint is a factory function that outputs another function.","description":"The output function requires a mapFn parameter. See the PagerDuty v2 Events API documentation for more information about these parameters.","required":false},{"name":"mapFn","headline":" is a function that builds the record used to generate the POST request. Requires an r parameter.","description":"mapFn accepts a table row (r) and returns a record that must include the following fields: routingKey client client_url class eventAction group severity component source summary timestamp","required":false}],"flux_type":"Fun"}},"sendEvent":{"Function":{"name":"sendEvent","headline":"sendEvent sends an event to PagerDuty. ","description":"","parameters":[{"name":"pagerdutyURL","headline":" is the URL of the PagerDuty endpoint.","description":"Defaults to https://events.page rduty.com/v2/enqueue.","required":false},{"name":"routingKey","headline":" is the routing key generated from your PagerDuty integration.","description":null,"required":false},{"name":"client","headline":" is the name of the client sending the alert.","description":null,"required":false},{"name":"clientURL","headline":" is the URL of the client sending the alert.","description":null,"required":false},{"name":"dedupkey","headline":" is a per-alert ID that acts as deduplication key and allows you to acknowledge or change the severity of previous messages. Supports a maximum of 255 characters.","description":null,"required":false},{"name":"class","headline":" is the class or type of the event.","description":"Classes are user-defined. For example, ping failure or cpu load.","required":false},{"name":"group","headline":" is a logical grouping used by PagerDuty.","description":"Groups are user-defined. For example, app-stack.","required":false},{"name":"severity","headline":" is the severity of the event.","description":"Valid values include:  critical\n  error\n  warning\n  info\n","required":false},{"name":"eventAction","headline":" is the event type to send to PagerDuty.","description":"Valid values include:  trigger\n  resolve\n  acknowledge\n","required":false},{"name":"source","headline":" is the unique location of the affected system. For example, the hostname or fully qualified domain name (FQDN).","description":null,"required":false},{"name":"summary","headline":" is a brief text summary of the event used as the summaries or titles of associated alerts. The maximum permitted length is 1024 characters.","description":null,"required":false},{"name":"timestamp","headline":" is the time the detected event occurred in RFC3339nano format.","description":null,"required":false}],"flux_type":"Fun"}},"defaultURL":{"Value":{"name":"defaultURL","headline":"","description":"","flux_type":"string"}},"severityFromLevel":{"Function":{"name":"severityFromLevel","headline":"severityFromLevel converts an InfluxDB status level to a PagerDuty severity. ","description":"Status level\tPagerDuty severitycrit\t        criticalwarn\t        warninginfo\t        infook\t            info","parameters":[{"name":"level","headline":" is the InfluxDB status level to convert to a PagerDuty severity.","description":null,"required":false}],"flux_type":"Fun"}},"dedupKey":{"Function":{"name":"dedupKey","headline":"dedupKey uses the group key of an input table to generate and store a deduplication key in the _pagerdutyDedupKey column. The function sorts, newline-concatenates, SHA256-hashes, and hex-encodes the group key to create a unique deduplication key for each input table. ","description":"## Add a PagerDuty deduplication key to output data\n```\nimport \"pagerduty\"\n\nfrom(bucket: \"default\")\n  |> range(start: -5m)\n  |> filter(fn: (r) => r._measurement == \"mem\")\n  |> pagerduty.dedupKey()\n```\n\n","parameters":[{"name":"exclude","headline":" is the group key columns to exclude when generating the deduplication key. Default is ","description":"[ \" _ start\", \" _ stop\", \" _ level\" ] .","required":false}],"flux_type":"Fun"}}}},{"path":"planner","name":"planner","headline":"","description":null,"members":{"disablePhysicalRules":{"Value":{"name":"disablePhysicalRules","headline":"","description":"","flux_type":"[string]"}},"disableLogicalRules":{"Value":{"name":"disableLogicalRules","headline":"","description":"","flux_type":"[string]"}}}},{"path":"profiler","name":"profiler","headline":"Profiler exposes an API to profile queries.Profile results are returned as an extra result in the response named according to the profiles which are enabled.","description":null,"members":{"enabledProfilers":{"Value":{"name":"enabledProfilers","headline":"EnabledProfilers sets a list of profilers that should be enabled during execution. ","description":"Available profilers are: - query - Profiles time spent in the various phases of query execution.  - operator - Profiles time spent in each operator of the query. Example:import \"profiler\"\noption profiler.enabledProfilers = [\"query\", \"operator\"]\n","flux_type":"[string]"}}}},{"path":"pushbullet","name":"pushbullet","headline":"Package pushbullet provides functions for sending data to Pushbullet.","description":null,"members":{"endpoint":{"Function":{"name":"endpoint","headline":"endpoint creates the endpoint for the Pushbullet API and sends a notification of type note. ","description":"## Send the last reported status to Pushbullet\n```\nimport \"pushbullet\"\nimport \"influxdata/influxdb/secrets\"\n\ntoken = secrets.get(key: \"PUSHBULLET_TOKEN\")\n\nlastReported =\n  from(bucket: \"example-bucket\")\n    |> range(start: -10m)\n    |> filter(fn: (r) => r._measurement == \"statuses\")\n    |> last()\n\nlastReported\n  |> e(mapFn: (r) => ({\n      r with\n      title: r.title,\n      text: \"${string(v: r._time)}: ${r.status}.\"\n    })\n  )()\n```\n\n","parameters":[{"name":"url","headline":" is the URL of the PushBullet endpoint. Defaults to: \"https://api.pushbullet.com/v2/pushes\".","description":null,"required":false},{"name":"token","headline":" is the api token string.  Defaults to: \"\".","description":null,"required":false},{"name":"Usage","headline":" pushbullet.endpoint is a factory function that outputs another function. The output function requires a mapFn parameter.","description":null,"required":false},{"name":"mapFn","headline":" is a function that builds the record used to generate the API request. Requires an r parameter.","description":null,"required":false}],"flux_type":"Fun"}},"pushData":{"Function":{"name":"pushData","headline":"pushData sends a push notification to the Pushbullet API. ","description":"## Send the last reported status to Pushbullet\n```\nimport \"pushbullet\"\nimport \"influxdata/influxdb/secrets\"\n\ntoken = secrets.get(key: \"PUSHBULLET_TOKEN\")\n\nlastReported =\n  from(bucket: \"example-bucket\")\n    |> range(start: -1m)\n    |> filter(fn: (r) => r._measurement == \"statuses\")\n    |> last()\n    |> tableFind(fn: (key) => true)\n    |> getRecord(idx: 0)\n\npushbullet.pushData(\n  token: token,\n  data: {\n    \"type\": \"link\",\n    \"title\": \"Last reported status\",\n    \"body\": \"${lastReported._time}: ${lastReported.status}.\"\n    \"url\": \"${lastReported.statusURL}\"\n  }\n)\n```\n\n","parameters":[{"name":"url","headline":" is the URL of the PushBullet endpoint. Defaults to: \"https://api.pushbullet.com/v2/pushes\".","description":null,"required":false},{"name":"token","headline":" is the api token string.  Defaults to: \"\".","description":null,"required":false},{"name":"data","headline":" is the data to send to the endpoint. It will be encoded in JSON and sent to PushBullet's endpoint.","description":"For how to structure data, see https://docs.pushbullet.com/#create-push.","required":false}],"flux_type":"Fun"}},"defaultURL":{"Value":{"name":"defaultURL","headline":"","description":"","flux_type":"string"}},"pushNote":{"Function":{"name":"pushNote","headline":"pushNote sends a push notification of type note to the Pushbullet API. ","description":"## Send the last reported status to Pushbullet\n```\nimport \"pushbullet\"\nimport \"influxdata/influxdb/secrets\"\n\ntoken = secrets.get(key: \"PUSHBULLET_TOKEN\")\n\nlastReported =\n  from(bucket: \"example-bucket\")\n    |> range(start: -1m)\n    |> filter(fn: (r) => r._measurement == \"statuses\")\n    |> last()\n    |> tableFind(fn: (key) => true)\n    |> getRecord(idx: 0)\n\npushbullet.pushNote(\n  token: token,\n  data: {\n    token: token,\n    title: \"Last reported status\",\n    text: \"${lastReported._time}: ${lastReported.status}.\"\n  }\n)\n```\n\n","parameters":[{"name":"url","headline":" is the URL of the PushBullet endpoint. Defaults to: \"https://api.pushbullet.com/v2/pushes\".","description":null,"required":false},{"name":"token","headline":" is the api token string.  Defaults to: \"\".","description":null,"required":false},{"name":"title","headline":" is the title of the notification.","description":null,"required":false},{"name":"text","headline":" is the text to display in the notification.","description":null,"required":false}],"flux_type":"Fun"}}}},{"path":"regexp","name":"regexp","headline":"Flux regular expressions package includes functions that provide enhancedregular expression functionality.","description":null,"members":{"findStringIndex":{"Function":{"name":"findStringIndex","headline":"findStringIdex is a function that returns a two-element array of integersdefining the beginning and ending indexes of the left-most regularexpression match in a string. ","description":"## Example\n```\nimport \"regexp\"\n\nregexp.findStringIndex(r: /ab?/, v: \"tablet\")\n// Returns [1, 3]\n```\n\n## Index the bounds of first regular expression match in each row\n```\nimport \"regexp\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      regexStr: r.regexStr,\n      _value: r._value,\n      matchIndex: regexp.findStringIndex(\n        r: regexp.compile(r.regexStr),\n        v: r._value\n      )\n    })\n  )\n```\n\n","parameters":[{"name":"","headline":"'r' is the regular expression used to search v.","description":null,"required":false},{"name":"v","headline":" is the string value to search.","description":null,"required":false}],"flux_type":"Fun"}},"getString":{"Function":{"name":"getString","headline":"getString is a function that returns the source string used to compilea regular expression. ","description":"## Example\n```\nimport \"regexp\"\n\nregexp.getString(r: /[a-zA-Z]/)\n// Returns \"[a-zA-Z]\"\n```\n\n## Convert regular expressions into strings in each row\n```\nimport \"regexp\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      regex: r.regex,\n      regexStr: regexp.getString(r: r.regex)\n    })\n  )\n```\n\n","parameters":[{"name":"r","headline":" is the regular expression object to convert to a string.","description":null,"required":false}],"flux_type":"Fun"}},"compile":{"Function":{"name":"compile","headline":"compile is a function that parses a regular expression and,if successful, returns a Regexp object that can be used tomatch against text. ","description":"## Example\n```\nimport \"regexp\"\n\nregexp.compile(v: \"abcd\")\n// Returns the regexp object `abcd`\n```\n\n## Use a string value as a regular expression\n```\nimport \"regexp\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      regexStr: r.regexStr,\n      _value: r._value,\n      firstRegexMatch: findString(\n        r: regexp.compile(v: regexStr),\n        v: r._value\n      )\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to parse into regular expression.","description":null,"required":false}],"flux_type":"Fun"}},"matchRegexpString":{"Function":{"name":"matchRegexpString","headline":"matchRegexpString is a function that tests if a string contains anymatch to a regular expression. ","description":"## Example\n```\nimport \"regexp\"\n\nregexp.matchRegexpString(r: /(gopher){2}/, v: \"gophergophergopher\")\n// Returns true\n```\n\n## Filter by columns that contain matches to a regular expression\n```\nimport \"regexp\"\n\ndata\n  |> filter(fn: (r) =>\n    regexp.matchRegexpString(\n      r: /Alert\\:/,\n      v: r.message\n    )\n  )\n```\n\n","parameters":[{"name":"r","headline":" is the regular expression used to search v.","description":null,"required":false},{"name":"v","headline":" is the string value to search.","description":null,"required":false}],"flux_type":"Fun"}},"quoteMeta":{"Function":{"name":"quoteMeta","headline":"quoteMeta is a function that escapes all regular expressionmetacharacters inside of a string. ","description":"## Example\n```\nimport \"regexp\"\n\nregexp.quoteMeta(v: \".+*?()|[]{}^$\")\n// Returns \"\\.\\+\\*\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$\"\n```\n\n## Escape regular expression meta characters in column values\n```\nimport \"regexp\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      notes: r.notes,\n      notes_escaped: regexp.quoteMeta(v: r.notes)\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string that contains regular expression metacharacters","description":"to escape","required":false}],"flux_type":"Fun"}},"findString":{"Function":{"name":"findString","headline":"findString is a function that returns the left-most regular expressionmatch in a string. ","description":"## Example\n```\nimport \"regexp\"\n\nregexp.findString(r: /foo.?/, v: \"seafood fool\")\n// Returns \"food\"\n```\n\n## Find the first regular expression match in each row\n```\nimport \"regexp\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      message: r.message,\n      regexp: r.regexp,\n      match: regexp.findString(r: r.regexp, v: r.message)\n    })\n  )\n```\n\n","parameters":[{"name":"r","headline":" is the regular expression used to search v.","description":null,"required":false},{"name":"v","headline":" is the string value to search.","description":null,"required":false}],"flux_type":"Fun"}},"splitRegexp":{"Function":{"name":"splitRegexp","headline":"splitRegexp is a function that splits a string into substrings separatedby regular expression matches and return an array of i substringsbetween matches. ","description":"## Example\n```\nimport \"regexp\"\n\nregexp.splitRegexp(r: /a*/, v: \"abaabaccadaaae\", i: 5)\n// Returns [\"\", \"b\", \"b\", \"c\", \"cadaaae\"]\n```\n\n","parameters":[{"name":"r","headline":" is the regular expression used to search v.","description":null,"required":false},{"name":"v","headline":" is the string value to be searched.","description":null,"required":false},{"name":"i","headline":" is the maximum number of substrings to return.","description":"-1 returns all matching substrings.","required":false}],"flux_type":"Fun"}},"replaceAllString":{"Function":{"name":"replaceAllString","headline":"replaceAllString is a function that replaces all reguar expression matchesin a string with a specified replacement. ","description":"## Example\n```\nimport \"regexp\"\n\nregexp.replaceAllString(r: /a(x*)b/, v: \"-ab-axxb-\", t: \"T\")\n// Returns \"-T-T-\"\n```\n\n## Replace regular expression matches in string column values\n```\nimport \"regexp\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      message: r.message,\n      updated_message: regexp.replaceAllString(\n        r: /cat|bird|ferret/,\n        v: r.message,\n        t: \"dog\"\n      )\n  }))\n```\n\n","parameters":[{"name":"r","headline":" is the regular expression used to search v.","description":null,"required":false},{"name":"v","headline":" is the string value to search.","description":null,"required":false},{"name":"t","headline":" is the replacement for matches to r.","description":null,"required":false}],"flux_type":"Fun"}}}},{"path":"runtime","name":"runtime","headline":"The runtime package includes functions that provide information about the current Flux runtime.","description":null,"members":{"version":{"Function":{"name":"version","headline":"version returns the current Flux version. ","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"slack","name":"slack","headline":"Package slack provides functions for sending data to Slack.","description":null,"members":{"defaultURL":{"Value":{"name":"defaultURL","headline":"","description":"","flux_type":"string"}},"message":{"Function":{"name":"message","headline":"message sends a single message to a Slack channel. The function works with either with the chat.postMessage API or with a Slack webhook. ","description":"## Send the last reported status to Slack using a Slack webhook\n```\nimport \"slack\"\n\nlastReported =\n  from(bucket: \"example-bucket\")\n    |> range(start: -1m)\n    |> filter(fn: (r) => r._measurement == \"statuses\")\n    |> last()\n    |> findRecord(fn: (key) => true, idx: 0)\n\nslack.message(\n  url: \"https://hooks.slack.com/services/EXAMPLE-WEBHOOK-URL\",\n  channel: \"#system-status\",\n  text: \"The last reported status was \\\"${lastReported.status}\\\".\"\n  color: \"warning\"\n)\n```\n\n## Send the last reported status to Slack using chat.postMessage API\n```\nimport \"slack\"\n\nlastReported =\n  from(bucket: \"example-bucket\")\n    |> range(start: -1m)\n    |> filter(fn: (r) => r._measurement == \"statuses\")\n    |> tableFind(fn: (key) => true)\n    |> getRecord(idx: 0)\n\nslack.message(\n  url: \"https://slack.com/api/chat.postMessage\",\n  token: \"mySuPerSecRetTokEn\",\n  channel: \"#system-status\",\n  text: \"The last reported status was \\\"${lastReported.status}\\\".\"\n  color: \"warning\"\n)\n```\n\n","parameters":[{"name":"url","headline":" is the URL of the slack endpoint.","description":"Defaults to: \"https://slack.com/api/chat.postMessage\", if one uses the webhook api this must be acquired as part of the slack API setup. This URL will be secret. Don't worry about secrets for the initial implementation.","required":false},{"name":"token","headline":" is the api token string.","description":"Defaults to: \"\", and can be ignored if one uses the webhook api URL.","required":false},{"name":"channel","headline":" is the name of channel in which to post the message. No default.","description":null,"required":false},{"name":"text","headline":" is the text to display.","description":null,"required":false},{"name":"color","headline":" is the color to give message: one of good, warning, and danger, or any hex rgb color value ex. #439FE0.","description":null,"required":false}],"flux_type":"Fun"}},"validateColorString":{"Function":{"name":"validateColorString","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"endpoint":{"Function":{"name":"endpoint","headline":"endpoint sends a message to Slack that includes output data. ","description":"## Send critical statuses to a Slack endpoint\n```\nimport \"slack\"\n\ntoSlack = slack.endpoint(url: https://hooks.slack.com/services/EXAMPLE-WEBHOOK-URL)\n\ncrit_statuses = from(bucket: \"example-bucket\")\n  |> range(start: -1m)\n  |> filter(fn: (r) => r._measurement == \"statuses\" and r.status == \"crit\")\n\ncrit_statuses\n  |> toSlack(mapFn: (r) => ({\n      channel: \"Alerts\",\n      text: r._message,\n      color: \"danger\",\n   })\n  )()\n```\n\n","parameters":[{"name":"url","headline":" is the API URL of the slack endpoint. Defaults to https://slack.com/api/chat.postMessage.","description":"If using a Slack webhook, you’ll receive a Slack webhook URL when you create an incoming webhook.","required":false},{"name":"token","headline":" is the Slack API token used to interact with Slack. Defaults to \"\".","description":null,"required":false},{"name":"Usage","headline":": slack.endpoint is a factory function that outputs another function. The output function requires a mapFn parameter.","description":null,"required":false},{"name":"mapFn","headline":" is a function that builds the record used to generate the POST request. Requires an r parameter.","description":null,"required":false}],"flux_type":"Fun"}}}},{"path":"socket","name":"socket","headline":"","description":null,"members":{"from":{"Function":{"name":"from","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}},{"path":"sql","name":"sql","headline":"Package SQL provides tools for working with data in SQLdatabases such as:","description":"Amazon AthenaGoogle BigQueryMicrosoft SQL ServerMySQLPostgreSQLSnowflakeSQLite","members":{"to":{"Function":{"name":"to","headline":"to is a function that writes data to an SQL database. ","description":"sql.to does not support Amazon Athena.  - dataSourceName is the data source name (DNS) or connection string usedto connect to the SQL database.  - table is the destination table.  - batchSize is the number of parameters or columns that can be queued withineach call to Exec. Defaults to 10000. If writing to SQLite database, set the batchSize to 999 or less. ## Driver dataSourceName examples\n```\n# Postgres Driver DSN\npostgres://pqgotest:password@localhost/pqgotest?sslmode=verify-full\n# MySQL Driver DSN\nusername:password@tcp(localhost:3306)/dbname?param=value\n\n# Snowflake Driver DSNs\nusername[:password]@accountname/dbname/schemaname?param1=value1&paramN=valueN\nusername[:password]@accountname/dbname?param1=value1&paramN=valueN\nusername[:password]@hostname:port/dbname/schemaname?account=<your_account>&param1=value1&paramN=valueN\n\n# SQLite Driver DSN\nfile:/path/to/test.db?cache=shared&mode=rw\n\n# Microsoft SQL Server Driver DSNs\nsqlserver://username:password@localhost:1234?database=examplebdb\nserver=localhost;user id=username;database=examplebdb;\nserver=localhost;user id=username;database=examplebdb;azure auth=ENV\nserver=localhost;user id=username;database=examplebdbr;azure tenant id=77e7d537;azure client id=58879ce8;azure client secret=0123456789\n\n# Google BigQuery DSNs\nbigquery://projectid/?param1=value&param2=value\nbigquery://projectid/location?param1=value&param2=value\n```\n\n## Write data to a MySQL database\n```\nimport \"sql\"\nimport \"influxdata/influxdb/secrets\"\n\nusername = secrets.get(key: \"MYSQL_USER\")\npassword = secrets.get(key: \"MYSQL_PASS\")\n\nsql.to(\n  driverName: \"mysql\",\n  dataSourceName: \"${username}:${password}@tcp(localhost:3306)/db\",\n  table: \"example_table\"\n)\n```\n\n## Write data to a Postgres database\n```\nimport \"sql\"\nimport \"influxdata/influxdb/secrets\"\n\nusername = secrets.get(key: \"POSTGRES_USER\")\npassword = secrets.get(key: \"POSTGRES_PASS\")\n\nsql.to(\n  driverName: \"postgres\",\n  dataSourceName: \"postgresql://${username}:${password}@localhost\",\n  table: \"example_table\"\n)\n```\n\n## Write data to a snowflake database\n```\nimport \"sql\"\nimport \"influxdata/influxdb/secrets\"\n\nusername = secrets.get(key: \"SNOWFLAKE_USER\")\npassword = secrets.get(key: \"SNOWFLAKE_PASS\")\naccount = secrets.get(key: \"SNOWFLAKE_ACCT\")\n\nsql.to(\n  driverName: \"snowflake\",\n  dataSourceName: \"${username}:${password}@${account}/db/exampleschema?warehouse=wh\",\n  table: \"example_table\"\n)\n```\n\n## Write data to an SQLite database\n```\nimport \"sql\"\n\nsql.to(\n  driverName: \"sqlite3\",\n  dataSourceName: \"file:/path/to/test.db?cache=shared&mode=rw\",\n  table: \"example_table\"\n)\n```\n\nInfluxDB OSS and InfluxDB Cloud do not have direct access to the localfilesystem and cannot write to SQLite data sources. Use the Flux REPLto write to an SQLite data source on your local filesystem. ## Write data to a SQL Server database\n```\nimport \"sql\"\nimport \"influxdata/influxdb/secrets\"\n\nusername = secrets.get(key: \"SQLSERVER_USER\")\npassword = secrets.get(key: \"SQLSERVER_PASS\")\n\nsql.to(\n  driverName: \"sqlserver\",\n  dataSourceName: \"sqlserver://${username}:${password}@localhost:1234?database=examplebdb\",\n  table: \"Example.Table\"\n)\n```\n\nSQL Server ADO authenticationUse one of the following methods to provide SQL Server authentication credentials asActiveX Data Objects (ADO) connection string parameters:Retrieve authentication credentials from environment variables\n```\nazure auth=ENV\n```\n\nRetrieve authentication credentials from a file\n```\nazure auth=C:\\secure\\azure.auth\n```\n\nInfluxDB OSS and InfluxDB Cloud user interfaces do not provide access to the underlying filesystem and do not support reading credentials from a file. To retrieve SQL Server credentialsfrom a file, execute the query in the Flux REPL on your local machine. Specify authentication credentials in the connection string\n```\n# Example of providing tenant ID, client ID, and client secret token\nazure tenant id=77...;azure client id=58...;azure client secret=0cf123..\n\n# Example of providing tenant ID, client ID, certificate path and certificate password\nazure tenant id=77...;azure client id=58...;azure certificate path=C:\\secure\\...;azure certificate password=xY...\n\n# Example of providing tenant ID, client ID, and Azure username and password\nazure tenant id=77...;azure client id=58...;azure username=some@myorg;azure password=a1...\n```\n\nUse a managed identity in an Azure VM\n```\nazure auth=MSI\n```\n\n## Write to a BigQuery database\n```\nimport \"sql\"\nimport \"influxdata/influxdb/secrets\"\nprojectID = secrets.get(key: \"BIGQUERY_PROJECT_ID\")\napiKey = secrets.get(key: \"BIGQUERY_APIKEY\")\nsql.to(\n driverName: \"bigquery\",\n dataSourceName: \"bigquery://${projectID}/?apiKey=${apiKey}\",\n table:\"exampleTable\"\n)\n```\n\nCommon BigQuery URL parameters - dataset - BigQuery dataset ID. When set, you can use unqualified tablenames in queries. BigQuery authentication parameters - The GOOGLE_APPLICATION_CREDENTIALS environment variable that identifiesthe location of your credential JSON file.  - Provide your BigQuery API key using the apiKey URL parameter in yourBigQuery DSN. Example apiKey URL parameter\n```\nbigquery://projectid/?apiKey=AIzaSyB6XK8IO5AzKZXoioQOVNTFYzbDBjY5hy4\n```\n\n - Provide your base-64 encoded service account, refresh token, or JSON credentialsURL parameter in your BigQuery DSN. Example credentials URL parameter\n```\nbigquery://projectid/?credentials=eyJ0eXBlIjoiYXV0...\n```\n\n","parameters":[{"name":"driverName","headline":" is the driver used to connect to the SQL database.","description":"The following drivers are available:","required":false},{"name":"","headline":"bigquery","description":null,"required":false},{"name":"","headline":"mysql","description":null,"required":false},{"name":"","headline":"postgres","description":null,"required":false},{"name":"","headline":"snowflake","description":null,"required":false},{"name":"","headline":"sqlite3 - Does not work with InfluxDB OSS or InfluxDB Cloud","description":null,"required":false},{"name":"","headline":"sqlserver, mssql","description":null,"required":false}],"flux_type":"Fun"}},"from":{"Function":{"name":"from","headline":"from is a function that retrieves data from a SQL data source. ","description":" - dataSourceName is the data source name (DNS) or connection string usedto connect to the SQL database. The string's form and structure depend on the driver used.  - query is the query to run against the SQL database. ## Driver dataSourceName examples\n```\n# Amazon Athena Driver DSN\ns3://myorgqueryresults/?accessID=AKIAJLO3F...&region=us-west-1&secretAccessKey=NnQ7MUMp9PYZsmD47c%2BSsXGOFsd%2F...\ns3://myorgqueryresults/?accessID=AKIAJLO3F...&db=dbname&missingAsDefault=false&missingAsEmptyString=false&region=us-west-1&secretAccessKey=NnQ7MUMp9PYZsmD47c%2BSsXGOFsd%2F...&WGRemoteCreation=false\n\n# MySQL Driver DSN\nusername:password@tcp(localhost:3306)/dbname?param=value\n\n# Postgres Driver DSN\npostgres://pqgotest:password@localhost/pqgotest?sslmode=verify-full\n\n# Snowflake Driver DSNs\nusername[:password]@accountname/dbname/schemaname?param1=value1&paramN=valueN\nusername[:password]@accountname/dbname?param1=value1&paramN=valueN\nusername[:password]@hostname:port/dbname/schemaname?account=<your_account>&param1=value1&paramN=valueN\n\n# SQLite Driver DSN\nfile:/path/to/test.db?cache=shared&mode=ro\n\n# Microsoft SQL Server Driver DSNs\nsqlserver://username:password@localhost:1234?database=examplebdb\nserver=localhost;user id=username;database=examplebdb;\nserver=localhost;user id=username;database=examplebdb;azure auth=ENV\nserver=localhost;user id=username;database=examplebdbr;azure tenant id=77e7d537;azure client id=58879ce8;azure client secret=0123456789\n\n# Google BigQuery DSNs\nbigquery://projectid/?param1=value&param2=value\nbigquery://projectid/location?param1=value&param2=value\n```\n\n## Query a MySQL database\n```\nimport \"sql\"\nimport \"influxdata/influxdb/secrets\"\n\nusername = secrets.get(key: \"MYSQL_USER\")\npassword = secrets.get(key: \"MYSQL_PASS\")\n\nsql.from(\n driverName: \"mysql\",\n dataSourceName: \"${username}:${password}@tcp(localhost:3306)/db\",\n query:\"SELECT * FROM example_table\"\n)\n```\n\n## Query a Postgres database\n```\nimport \"sql\"\nimport \"influxdata/influxdb/secrets\"\n\nusername = secrets.get(key: \"POSTGRES_USER\")\npassword = secrets.get(key: \"POSTGRES_PASS\")\n\nsql.from(\n  driverName: \"postgres\",\n  dataSourceName: \"postgresql://${username}:${password}@localhost\",\n  query:\"SELECT * FROM example_table\"\n)\n```\n\n## Query a Snowflake database\n```\nimport \"sql\"\nimport \"influxdata/influxdb/secrets\"\n\nusername = secrets.get(key: \"SNOWFLAKE_USER\")\npassword = secrets.get(key: \"SNOWFLAKE_PASS\")\naccount = secrets.get(key: \"SNOWFLAKE_ACCT\")\n\nsql.from(\n  driverName: \"snowflake\",\n  dataSourceName: \"${username}:${password}@${account}/db/exampleschema?warehouse=wh\",\n  query: \"SELECT * FROM example_table\"\n)\n```\n\n## Query a SQLite database\n```\nimport \"sql\"\n\nsql.from(\n  driverName: \"sqlite3\",\n  dataSourceName: \"file:/path/to/test.db?cache=shared&mode=ro\",\n  query: \"SELECT * FROM example_table\"\n)\n```\n\nInfluxDB OSS and InfluxDB Cloud do not have direct access to the local filesystemand cannot query SQLite data sources. Use the Flux REPL to query a SQLite datasource on your local filesystem. ## Query an Amazon Athena database\n```\nimport \"sql\"\nimport \"influxdata/influxdb/secrets\"\n\nregion = us-west-1\naccessID = secrets.get(key: \"ATHENA_ACCESS_ID\")\nsecretKey = secrets.get(key: \"ATHENA_SECRET_KEY\")\n\nsql.from(\n driverName: \"awsathena\",\n dataSourceName: \"s3://myorgqueryresults/?accessID=${accessID}&region=${region}&secretAccessKey=${secretKey}\",\n query:\"SELECT * FROM example_table\"\n)\n```\n\nAthena connection stringsTo query an Amazon Athena database, use the following querry parameters in your AthenaS3 connection string (DNS): - Required - *region - AWS region - *accessID - AWS IAM access ID - *SecretAccessKey - AWS IAM secret key - db - database name - WGRemoteCreation - controls workgroup and tag creation - missingAsDefault - replace missing data with default values - missingAsEmptyString - replace missing data with empty strings## Query a SQL Server database\n```\nimport \"sql\"\nimport \"influxdata/influxdb/secrets\"\n\nusername = secrets.get(key: \"SQLSERVER_USER\")\npassword = secrets.get(key: \"SQLSERVER_PASS\")\n\nsql.from(\n  driverName: \"sqlserver\",\n  dataSourceName: \"sqlserver://${username}:${password}@localhost:1234?database=examplebdb\",\n  query: \"GO SELECT * FROM Example.Table\"\n)\n```\n\nSQL Server ADO authenticationUse one of the following methods to provide SQL Server authenticationcredentials as ActiveX Data Objects (ADO) connection string parameters:Retrieve authentication credentials from environment variables\n```\nazure auth=ENV\n```\n\nRetrieve authentication credentials from a file\n```\nazure auth=C:\\secure\\azure.auth\n```\n\nInfluxDB OSS and InfluxDB Cloud user interfaces do not provide access to the underlyingfilesystem and do not support reading credentials from a file. To retrieve SQL Servercredentials from a file, execute the query in the Flux REPL on your local machine. Specify authentication credentials in the connection string\n```\n# Example of providing tenant ID, client ID, and client secret token\nazure tenant id=77...;azure client id=58...;azure client secret=0cf123..\n# Example of providing tenant ID, client ID, certificate path and certificate password\nazure tenant id=77...;azure client id=58...;azure certificate path=C:\\secure\\...;azure certificate password=xY...\n# Example of providing tenant ID, client ID, and Azure username and password\nazure tenant id=77...;azure client id=58...;azure username=some@myorg;azure password=a1...\n```\n\nUse a managed identity in an Azure VM\n```\nazure auth=MSI\n```\n\n## Query a BigQuery database\n```\nimport \"sql\"\nimport \"influxdata/influxdb/secrets\"\nprojectID = secrets.get(key: \"BIGQUERY_PROJECT_ID\")\napiKey = secrets.get(key: \"BIGQUERY_APIKEY\")\nsql.from(\n driverName: \"bigquery\",\n dataSourceName: \"bigquery://${projectID}/?apiKey=${apiKey}\",\n query:\"SELECT * FROM exampleTable\"\n)\n```\n\nCommon BigQuery URL parametersThe Flux BigQuery Implementation uses the Google Cloud Go SDK. Provide yourauthentication credentials using one of the following methods: - The GOOGLE_APPLICATION_CREDENTIALS environment variable that identifies thelocation of yur credential JSON file.  - Provide your BigQuery API key using the apiKey URL parameters in your BigQuery DSN. Example apiKey URL parameter\n```\nbigquery://projectid/?apiKey=AIzaSyB6XK8IO5AzKZXoioQOVNTFYzbDBjY5hy4\n```\n\n - Provide your base-64 encoded service account, refresh token, or JSON credentialsusing the credentials URL parameter in your BigQuery DSN. Example credential URL parameter\n```\nbigquery://projectid/?credentials=eyJ0eXBlIjoiYXV0...\n```\n\n","parameters":[{"name":"driverName","headline":" is the driver used to connect to the SQL database.","description":"The following drivers are available:","required":false},{"name":"","headline":"awsathena","description":null,"required":false},{"name":"","headline":"bigquery","description":null,"required":false},{"name":"","headline":"mysql","description":null,"required":false},{"name":"","headline":"postgres","description":null,"required":false},{"name":"","headline":"snowflake","description":null,"required":false},{"name":"","headline":"sqlite3 - Does not work with InfluxDB OSS or InfluxDB Cloud","description":null,"required":false},{"name":"","headline":"sqlserver, mssql","description":null,"required":false}],"flux_type":"Fun"}}}},{"path":"strings","name":"strings","headline":"Package strings provides functions to manipulate UTF-8 encoded strings.","description":null,"members":{"splitAfterN":{"Function":{"name":"splitAfterN","headline":"splitAfterN splits a string after a specified separator and returns an array of i substrings. Split substrings include the separator t. ","description":"## Split a string into an array of substrings\n```\nimport \"strings\"\n\ndata\n   |> map (fn:(r) => strings.splitAfterN(v: r.searchTags, t: \",\"))\n```\n\n","parameters":[{"name":"v","headline":" is the string value to split.","description":null,"required":false},{"name":"t","headline":" is the string value that acts as the separator.","description":null,"required":false},{"name":"i","headline":" is the maximum number of split substrings to return. -1 returns all matching substrings.","description":"- The last substring is the unsplit remainder.\n","required":false}],"flux_type":"Fun"}},"trimPrefix":{"Function":{"name":"trimPrefix","headline":"trimPrefix removes a prefix from a string. Strings that do not start with the prefix are returned unchanged. ","description":"## Trim leading and trailing periods from all values in a column\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      sensorID: strings.trimPrefix(v: r.sensorId, prefix: \"s12_\")\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string to trim","description":null,"required":false},{"name":"prefix","headline":" is the prefix to remove","description":null,"required":false}],"flux_type":"Fun"}},"lastIndexAny":{"Function":{"name":"lastIndexAny","headline":"lastIndexAny returns the index of the last instance of any specified characters in a string. If none of the specified characters are present, the function returns -1. ","description":"## Find the last occurrence of characters from a string\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      charLastIndex: strings.lastIndexAny(v: r._field, chars: \"_-\")\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to search","description":null,"required":false},{"name":"chars","headline":" are the characters to search for","description":null,"required":false}],"flux_type":"Fun"}},"joinStr":{"Function":{"name":"joinStr","headline":"joinStr concatenates elements of a string array into a single string using a specified separator. ","description":"## Join a list of strings into a single string\n```\nimport \"strings\"\n\nsearchTags = [\"tag1\", \"tag2\", \"tag3\"]\n\nstrings.joinStr(arr: searchTags, v: \",\"))\n```\n\n","parameters":[{"name":"arr","headline":" is the array of strings to concatenate.","description":null,"required":false},{"name":"t","headline":" is the separator to use in the concatenated value.","description":null,"required":false}],"flux_type":"Fun"}},"trim":{"Function":{"name":"trim","headline":"trim removes leading and trailing characters specified in the cutset from a string. ","description":"## Trim leading and trailing periods from all values in a column\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      variables: strings.trim(v: r.variables, cutset: \".\")\n    })\n  )\n\n```\n\n","parameters":[{"name":"v","headline":" is the string to remove characters from.","description":null,"required":false},{"name":"cutset","headline":" is the  leading and trailing characters to remove from the string.","description":"Only characters that match the cutset string exactly are trimmed.","required":false}],"flux_type":"Fun"}},"isDigit":{"Function":{"name":"isDigit","headline":"isDigit tests if a single-character string is a digit (0-9). ","description":"## Filter by columns with digits as values\n```\nimport \"strings\"\n\ndata\n  |> filter(fn: (r) => strings.isDigit(v: r.serverRef))\n```\n\n","parameters":[{"name":"v","headline":" is the single-character string to test.","description":null,"required":false}],"flux_type":"Fun"}},"trimLeft":{"Function":{"name":"trimLeft","headline":"trimLeft removes specified leading characters from a string. ","description":"## Trim leading periods from all values in a column\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      variables: strings.trimLeft(v: r.variables, cutset: \".\")\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string to to remove characters from","description":null,"required":false},{"name":"cutset","headline":" is the trailing characters to trim from the string.","description":null,"required":false}],"flux_type":"Fun"}},"isLetter":{"Function":{"name":"isLetter","headline":"isLetter tests if a single character string is a letter (a-z, A-Z). ","description":"## Filter by columns with digits as values\n```\nimport \"strings\"\n\ndata\n  |> filter(fn: (r) => strings.isLetter(v: r.serverRef))\n```\n\n","parameters":[{"name":"v","headline":" is the single-character string to test.","description":null,"required":false}],"flux_type":"Fun"}},"replace":{"Function":{"name":"replace","headline":"replace replaces the first i non-overlapping instances of a substring with a specified replacement. ","description":"## Replace a specific number of string matches\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      content: strings.replace(v: r.content, t: \"he\", u: \"her\", i: 3)\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to search.","description":null,"required":false},{"name":"t","headline":" is the substring value to replace.","description":null,"required":false},{"name":"u","headline":" is the replacement for i instances of t.","description":null,"required":false},{"name":"i","headline":" is the number of non-overlapping t matches to replace.","description":null,"required":false}],"flux_type":"Fun"}},"index":{"Function":{"name":"index","headline":"index returns the index of the first instance of a substring in a string. If the substring is not present, it returns -1. ","description":"## Find the first occurrence of a substring\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      the_index: strings.index(v: r.pageTitle, substr: \"the\")\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to search","description":null,"required":false},{"name":"substr","headline":" is the substring to search for","description":null,"required":false}],"flux_type":"Fun"}},"trimSuffix":{"Function":{"name":"trimSuffix","headline":"The trimSuffix removes a suffix from a string. Strings that do not end with the suffix are returned unchanged. ","description":"## Remove a suffix from all values in a column\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      sensorID: strings.trimSuffix(v: r.sensorId, suffix: \"_s12\")\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string to trim","description":null,"required":false},{"name":"suffix","headline":" is the suffix to remove.","description":null,"required":false}],"flux_type":"Fun"}},"lastIndex":{"Function":{"name":"lastIndex","headline":"lastIndex returns the index of the last instance of a substring in a string. If the substring is not present, the function returns -1. ","description":"## Find the last occurrence of a substring\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      the_index: strings.lastIndex(v: r.pageTitle, substr: \"the\")\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to search","description":null,"required":false},{"name":"substr","headline":" is the substring to search for","description":null,"required":false}],"flux_type":"Fun"}},"trimSpace":{"Function":{"name":"trimSpace","headline":"trimSpace removes leading and trailing spaces from a string. ","description":"## Trim leading and trailing spaces from all values in a column\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({ r with userInput: strings.trimSpace(v: r.userInput) }))\n```\n\n","parameters":[{"name":"v","headline":" is the string to remove spaces from","description":null,"required":false}],"flux_type":"Fun"}},"toLower":{"Function":{"name":"toLower","headline":"toLower converts a string to lowercase. ","description":"## Convert all values of a column to lower case\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n       r with exclamation: strings.toLower(v: r.exclamation)\n     })\n   )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to convert.","description":null,"required":false}],"flux_type":"Fun"}},"toTitle":{"Function":{"name":"toTitle","headline":"toTitle converts all characters in a string to title case. ","description":"## Convert characters in a string to title case\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({ r with pageTitle: strings.toTitle(v: r.pageTitle) }))\n```\n\n","parameters":[{"name":"v","headline":" is the string value to convert.","description":null,"required":false}],"flux_type":"Fun"}},"countStr":{"Function":{"name":"countStr","headline":"countStr counts the number of non-overlapping instances of a substring appears in a string. ","description":"## Count instances of a substring within a string\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n       _value: strings.countStr(v: r.message, substr: \"uh\")\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to search","description":null,"required":false},{"name":"substr","headline":" is the substr value to count","description":"The function counts only non-overlapping instances of substr. For example: strings.coutnStr(v: \"ooooo\", substr: \"oo\") // Returns 2 -- (oo)(oo)o","required":false}],"flux_type":"Fun"}},"split":{"Function":{"name":"split","headline":"split splits a string on a specified separator and returns an array of substrings. ","description":"## Split a string into an array of substrings\n```\nimport \"strings\"\n\ndata\n  |> map (fn:(r) => strings.split(v: r.searchTags, t: \",\"))\n```\n\n","parameters":[{"name":"v","headline":" is the string value to split.","description":null,"required":false},{"name":"t","headline":" is the string value that acts as the separator.","description":null,"required":false}],"flux_type":"Fun"}},"strlen":{"Function":{"name":"strlen","headline":"strlen returns the length of a string. String length is determined by the number of UTF code points a string contains. ","description":"## Filter based on string value length\n```\nimport \"strings\"\n\ndata\n   |> filter(fn: (r) => strings.strlen(v: r._measurement) <= 4)\n```\n\n## Store the length of string values\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      length: strings.strlen(v: r._value)\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to measure.","description":null,"required":false}],"flux_type":"Fun"}},"repeat":{"Function":{"name":"repeat","headline":"repeat returns a string consisting of i copies of a specified string. ","description":"## Repeat a string based on existing columns\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      laugh: r.laugh\n      intensity: r.intensity\n      laughter: strings.repeat(v: r.laugh, i: r.intensity)\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to repeat.","description":null,"required":false},{"name":"i","headline":" is the number of times to repeat v.","description":null,"required":false}],"flux_type":"Fun"}},"isLower":{"Function":{"name":"isLower","headline":"isLower tests if a single-character string is lowercase. ","description":"## Filter by columns with single-letter lowercase values\n```\nimport \"strings\"\n\ndata\n  |> filter(fn: (r) => strings.isLower(v: r.host))\n```\n\n","parameters":[{"name":"v","headline":" is the single-character string value to test.","description":null,"required":false}],"flux_type":"Fun"}},"containsAny":{"Function":{"name":"containsAny","headline":"containsAny reports whether a specified string contains characters from another string. ","description":"## Report if a string contains specific characters\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      _value: strings.containsAny(v: r.price, chars: \"£$¢\")\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to search","description":null,"required":false},{"name":"chars","headline":" is the character to search for","description":null,"required":false}],"flux_type":"Fun"}},"hasSuffix":{"Function":{"name":"hasSuffix","headline":"hasSuffix indicates if a string ends with a specified suffix. ","description":"## Filter based on the presence of a suffix in a column value\n```\nimport \"strings\"\n\ndata\n  |> filter(fn:(r) => strings.hasSuffix(v: r.metric, suffix: \"_count\" ))\n```\n\n","parameters":[{"name":"v","headline":" is the string value to search.","description":null,"required":false},{"name":"prefix","headline":" is the string suffix to search for.","description":null,"required":false}],"flux_type":"Fun"}},"title":{"Function":{"name":"title","headline":"title converts a string to title case. ","description":"## Convert all values of a column to title case\n```\n import \"strings\"\n\n data\n     |> map(fn: (r) => ({ r with pageTitle: strings.title(v: r.pageTitle) }))\n\n```\n\n","parameters":[{"name":"v","headline":" is the string value to convert.","description":null,"required":false}],"flux_type":"Fun"}},"hasPrefix":{"Function":{"name":"hasPrefix","headline":"hasPrefix indicates if a string begins with a specified prefix. ","description":"## Filter based on the presence of a prefix in a column value\n```\nimport \"strings\"\n\ndata\n  |> filter(fn:(r) => strings.hasPrefix(v: r.metric, prefix: \"int_\" ))\n```\n\n","parameters":[{"name":"v","headline":" is the string value to search.","description":null,"required":false},{"name":"prefix","headline":" is the string prefix to search for.","description":null,"required":false}],"flux_type":"Fun"}},"trimRight":{"Function":{"name":"trimRight","headline":"trimRight removes trailing characters specified in the cutset from a string. ","description":"## Trim trailing periods from all values in a column\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      variables: strings.trimRight(v: r.variables, cutset: \".\")\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string to to remove characters from","description":null,"required":false},{"name":"cutset","headline":" is the trailing characters to trim from the string.","description":"Only characters that match the cutset string exactly are trimmed.","required":false}],"flux_type":"Fun"}},"compare":{"Function":{"name":"compare","headline":"compare compares the lexicographical order of two strings. ","description":"  Return values\n  Comparison\tReturn value\n  v < t\t    -1\n  v == t\t    0\n  v > t\t    1\n## Compare the lexicographical order of column values\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      _value: strings.compare(v: r.tag1, t: r.tag2)\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to compare","description":null,"required":false},{"name":"t","headline":" is the string value to compare against","description":null,"required":false}],"flux_type":"Fun"}},"containsStr":{"Function":{"name":"containsStr","headline":"containsStr reports whether a string contains a specified substring. ","description":"## Report if a string contains a specific substring\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      _value: strings.containsStr(v: r.author, substr: \"John\")\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to search","description":null,"required":false},{"name":"substr","headline":" is the substring value to search for","description":null,"required":false}],"flux_type":"Fun"}},"substring":{"Function":{"name":"substring","headline":"substring returns a substring based on start and end parameters. These parameters are represent indices of UTF code points in the string. ","description":"## Store the first four characters of a string\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      abbr: strings.substring(v: r.name, start: 0, end: 4)\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to search for.","description":null,"required":false},{"name":"start","headline":" is the starting inclusive index of the substring.","description":null,"required":false},{"name":"end","headline":" is the ending exclusive index of the substring.","description":null,"required":false}],"flux_type":"Fun"}},"isUpper":{"Function":{"name":"isUpper","headline":"isUpper tests if a single character string is uppercase. ","description":"## Filter by columns with single-letter uppercase values\n```\nimport \"strings\"\n\ndata\n  |> filter(fn: (r) => strings.isUpper(v: r.host))\n```\n\n","parameters":[{"name":"v","headline":" is the single-character string value to test.","description":null,"required":false}],"flux_type":"Fun"}},"replaceAll":{"Function":{"name":"replaceAll","headline":"replaceAll replaces all non-overlapping instances of a substring with a specified replacement. ","description":"## Replace string matches\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      content: strings.replaceAll(v: r.content, t: \"he\", u: \"her\")\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to search.","description":null,"required":false},{"name":"t","headline":" is the substring to replace.","description":null,"required":false},{"name":"u","headline":" is the replacement for all instances of t.","description":null,"required":false}],"flux_type":"Fun"}},"toUpper":{"Function":{"name":"toUpper","headline":"toUpper converts a string to uppercase. ","description":"## Convert all values of a column to upper case\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({ r with envVars: strings.toUpper(v: r.envVars) }))\n```\n\nThe difference between toTitle and toUpper  - The results of toUpper() and toTitle are often the same, however the difference is visible when using special characters:\n\n  - str = \"ǳ\"\n\n  - strings.toUpper(v: str) // Returns Ǳ\n  - strings.toTitle(v: str) // Returns ǲ\n","parameters":[{"name":"v","headline":" is the string value to convert.","description":null,"required":false}],"flux_type":"Fun"}},"indexAny":{"Function":{"name":"indexAny","headline":"indexAny returns the index of the first instance of specified characters in a string. If none of the specified characters are present, it returns -1. ","description":"## Find the first occurrence of characters from a string\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      charIndex: strings.indexAny(v: r._field, chars: \"_-\")\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to search","description":null,"required":false},{"name":"chars","headline":" are the chars to search for","description":null,"required":false}],"flux_type":"Fun"}},"splitN":{"Function":{"name":"splitN","headline":"splitN splits a string on a specified separator and returns an array of i substrings. ","description":"## Split a string into an array of substrings\n```\nimport \"strings\"\n\ndata\n   |> map (fn:(r) => strings.splitN(v: r.searchTags, t: \",\"))\n```\n\n","parameters":[{"name":"v","headline":" is the string value to split.","description":null,"required":false},{"name":"t","headline":" is the string value that acts as the separator.","description":null,"required":false},{"name":"i","headline":" is the maximum number of split substrings to return. -1 returns all matching substrings.","description":"- The last substring is the unsplit remainder.\n","required":false}],"flux_type":"Fun"}},"splitAfter":{"Function":{"name":"splitAfter","headline":"splitAfter splits a string after a specified separator and returns an array of substrings. Split substrings include the separator, t. ","description":"## Split a string into an array of substrings\n```\nimport \"strings\"\n\ndata\n   |> map (fn:(r) => strings.splitAfter(v: r.searchTags, t: \",\"))\n```\n\n","parameters":[{"name":"v","headline":" is the string value to split.","description":null,"required":false},{"name":"t","headline":" is the string value that acts as the separator.","description":null,"required":false}],"flux_type":"Fun"}},"equalFold":{"Function":{"name":"equalFold","headline":"equalFold reports whether two UTF-8 strings are equal under Unicode case-folding. ","description":"## Ignore case when testing if two strings are the same\n```\nimport \"strings\"\n\ndata\n  |> map(fn: (r) => ({\n      r with\n      string1: r.string1,\n      string2: r.string2,\n      same: strings.equalFold(v: r.string1, t: r.string2)\n    })\n  )\n```\n\n","parameters":[{"name":"v","headline":" is the string value to compare","description":null,"required":false},{"name":"t","headline":" is the string value to compare against","description":null,"required":false}],"flux_type":"Fun"}}}},{"path":"system","name":"system","headline":"Package system provides functions for reading values from the system.","description":null,"members":{"time":{"Function":{"name":"time","headline":"time is a function that returns the current system time","description":"## Example\n```\nimport \"system\"\nimport \"array\"\n\narray.from(rows:[{time: system.time()}])\n```\n\n","parameters":[],"flux_type":"Fun"}}}},{"path":"testing","name":"testing","headline":"Package testing functions test piped-forward data in specific ways and return errors if the tests fail.","description":null,"members":{"load":{"Function":{"name":"load","headline":"load loads tests data from a stream of tables. ","description":"## Load a raw stream of tables in a test case  The following test uses array.from() to create two streams of tables to compare in the test.\n\n```\nimport \"testing\"\nimport \"array\"\n\ngot = array.from(rows: [\n  {_time: 2021-01-01T00:00:00Z, _measurement: \"m\", _field: \"t\", _value: 1.2},\n  {_time: 2021-01-01T01:00:00Z, _measurement: \"m\", _field: \"t\", _value: 0.8},\n  {_time: 2021-01-01T02:00:00Z, _measurement: \"m\", _field: \"t\", _value: 3.2}\n])\n\nwant = array.from(rows: [\n  {_time: 2021-01-01T00:00:00Z, _measurement: \"m\", _field: \"t\", _value: 1.2},\n  {_time: 2021-01-01T01:00:00Z, _measurement: \"m\", _field: \"t\", _value: 0.8},\n  {_time: 2021-01-01T02:00:00Z, _measurement: \"m\", _field: \"t\", _value: 3.1}\n])\n\ntesting.diff(got, want)\n```\n\n","parameters":[{"name":"tables","headline":" is the input data. Default is piped-forward data (","description":"< -).","required":false}],"flux_type":"Fun"}},"diff":{"Function":{"name":"diff","headline":"diff produces a diff between two streams. ","description":"It matches tables from each stream with the same group keys.   For each matched table, it produces a diff. Any added or removed rows are added to the table as a row.\n  An additional string column with the name diff is created and contains a\n  - if the row was present in the got table and not in the want table or + if the opposite is true.\nThe diff function is guaranteed to emit at least one row if the tables are different and no rows if the tables are the same. The exact diff produced may change. diff can be used to perform in-line diffs in a query. ## Diff separate streams\n```\nimport \"testing\"\n\nwant = from(bucket: \"backup-example-bucket\")\n  |> range(start: -5m)\ngot = from(bucket: \"example-bucket\")\n  |> range(start: -5m)\ntesting.diff(got: got, want: want)\n```\n\n## Inline diff\n```\nimport \"testing\"\n\nwant = from(bucket: \"backup-example-bucket\") |> range(start: -5m)\nfrom(bucket: \"example-bucket\")\n  |> range(start: -5m)\n  |> testing.diff(want: want)\n```\n\n","parameters":[{"name":"got","headline":" is the stream containing data to test. Defaults to piped-forward data (","description":"< -).","required":false},{"name":"want","headline":" is the stream that contains the expected data to test against.","description":null,"required":false},{"name":"epsilon","headline":" specifies how far apart two float values can be, but still considered equal. Defaults to 0.000000001.","description":null,"required":false}],"flux_type":"Fun"}},"loadMem":{"Function":{"name":"loadMem","headline":"loadMem loads annotated CSV test data from memory to emulate query results returned by Flux. ","description":"## Examples\n```\nimport \"testing\"\n\ncsvData = \"\n#datatype,string,long,string,dateTime:RFC3339,string,double\n#group,false,false,true,false,true,false\n#default,_result,,,,,\n,result,table,_measurement,_time,_field,_value\n,,0,m,2021-01-01T00:00:00Z,t,1.2\n,,0,m,2021-01-02T00:00:00Z,t,1.4\n,,0,m,2021-01-03T00:00:00Z,t,2.2\n\"\n\ntesting.loadMem(csv: csvData)\n```\n\n","parameters":[{"name":"csv","headline":" is the annotated CSV data to load.","description":null,"required":false}],"flux_type":"Fun"}},"assertEmpty":{"Function":{"name":"assertEmpty","headline":"assertEmpty tests if an input stream is empty. If not empty, the function returns an error. assertEmpty can be used to perform in-line tests in a query. ","description":"## Check if there is a difference between streams  This example uses the testing.diff() function which outputs the diff for the two streams.\n  The .testing.assertEmpty() function checks to see if the diff is empty.\n\n```\nimport \"testing\"\n\ngot = from(bucket: \"example-bucket\")\n  |> range(start: -15m)\nwant = from(bucket: \"backup_example-bucket\")\n  |> range(start: -15m)\ngot\n  |> testing.diff(want: want)\n  |> testing.assertEmpty()\n```\n\n","parameters":[],"flux_type":"Fun"}},"run":{"Function":{"name":"run","headline":"run executes a specified test case. ","description":"## Define and execute a test case\n```\nimport \"testing\"\n\ninData = \"\n#datatype,string,long,string,dateTime:RFC3339,string,double\n#group,false,false,true,false,true,false\n#default,_result,,,,,\n,result,table,_measurement,_time,_field,_value\n,,0,m,2021-01-01T00:00:00Z,t,1.2\n,,0,m,2021-01-02T00:00:00Z,t,1.4\n,,0,m,2021-01-03T00:00:00Z,t,2.2\n\"\n\noutData = \"\n#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,string,string,double\n#group,false,false,true,true,true,true,false\n#default,_result,,,,,,\n,result,table,_start,_stop,_measurement,_field,_value\n,,0,2021-01-01T00:00:00Z,2021-01-03T01:00:00Z,m,t,4.8\n\"\n\nt_sum = (table=<-) =>\n  (table\n    |> range(start:2021-01-01T00:00:00Z, stop:2021-01-03T01:00:00Z)\n    |> sum())\n\ntest _sum = () =>\n  ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_sum})\n\ntesting.run(case: _sum)\n```\n\n","parameters":[{"name":"case","headline":" is the test case to run.","description":null,"required":false}],"flux_type":"Fun"}},"assertEquals":{"Function":{"name":"assertEquals","headline":"assertEquals tests whether two streams have identical data. ","description":"  If equal, the function outputs the tested data stream unchanged.\n  If unequal, the function returns an error.\nassertEquals can be used to perform in-line tests in a query. ## Assert of separate streams\n```\nimport \"testing\"\n\nwant = from(bucket: \"backup-example-bucket\")\n  |> range(start: -5m)\n\ngot = from(bucket: \"example-bucket\")\n  |> range(start: -5m)\n\ntesting.assertEquals(got: got, want: want)\n```\n\n## Inline assertion\n```\nimport \"testing\"\n\nwant = from(bucket: \"backup-example-bucket\")\n  |> range(start: -5m)\n\nfrom(bucket: \"example-bucket\")\n  |> range(start: -5m)\n  |> testing.assertEquals(want: want)\n```\n\n","parameters":[{"name":"name","headline":" is the unique name given to the assertion.","description":null,"required":false},{"name":"got","headline":" is the stream containing data to test. Defaults to piped-forward data (","description":"< -).","required":false},{"name":"want","headline":" is the stream that contains the expected data to test against.","description":null,"required":false}],"flux_type":"Fun"}},"benchmark":{"Function":{"name":"benchmark","headline":"benchmark executes a test case without comparing test output with the expected test output. This lets you accurately benchmark a test case without the added overhead of comparing test output that occurs in testing.run(). ","description":"## Define and benchmark a test case  The following script defines a test case for the sum() function and enables profilers to measure query performance.\n\n```\nimport \"testing\"\nimport \"profiler\"\n\noption profiler.enabledProfilers = [\"query\", \"operator\"]\n\ninData = \"\n#datatype,string,long,string,dateTime:RFC3339,string,double\n#group,false,false,true,false,true,false\n#default,_result,,,,,\n,result,table,_measurement,_time,_field,_value\n,,0,m,2021-01-01T00:00:00Z,t,1.2\n,,0,m,2021-01-02T00:00:00Z,t,1.4\n,,0,m,2021-01-03T00:00:00Z,t,2.2\n\"\n\noutData = \"\n#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,string,string,double\n#group,false,false,true,true,true,true,false\n#default,_result,,,,,,\n,result,table,_start,_stop,_measurement,_field,_value\n,,0,2021-01-01T00:00:00Z,2021-01-03T01:00:00Z,m,t,4.8\n\"\n\nt_sum = (table=<-) =>\n  (table\n    |> range(start:2021-01-01T00:00:00Z, stop:2021-01-03T01:00:00Z)\n    |> sum())\n\ntest _sum = () =>\n  ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_sum})\n\ntesting.benchmark(case: _sum)\n```\n\n","parameters":[{"name":"case","headline":" is the test case to benchmark.","description":null,"required":false}],"flux_type":"Fun"}},"loadStorage":{"Function":{"name":"loadStorage","headline":"loadStorage loads annotated CSV test data as if it were queried from InfluxDB. This function ensures tests behave correctly in both the Flux and InfluxDB test suites. ","description":"## Function Requirements - Test data requires the _field, _measurement, and _time columns## Examples\n```\nimport \"testing\"\n\ncsvData = \"\n#datatype,string,long,string,dateTime:RFC3339,string,double\n#group,false,false,true,false,true,false\n#default,_result,,,,,\n,result,table,_measurement,_time,_field,_value\n,,0,m,2021-01-01T00:00:00Z,t,1.2\n,,0,m,2021-01-02T00:00:00Z,t,1.4\n,,0,m,2021-01-03T00:00:00Z,t,2.2\n\"\n\ntesting.loadStorage(csv: csvData)\n```\n\n","parameters":[{"name":"csv","headline":" is the annotated CSV data to load","description":null,"required":false}],"flux_type":"Fun"}},"inspect":{"Function":{"name":"inspect","headline":"inspect returns information about a test case. ","description":"## Define and inspect a test case\n```\nimport \"testing\"\n\ninData = \"\n#datatype,string,long,string,dateTime:RFC3339,string,double\n#group,false,false,true,false,true,false\n#default,_result,,,,,\n,result,table,_measurement,_time,_field,_value\n,,0,m,2021-01-01T00:00:00Z,t,1.2\n,,0,m,2021-01-02T00:00:00Z,t,1.4\n,,0,m,2021-01-03T00:00:00Z,t,2.2\n\"\n\noutData = \"\n#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,string,string,double\n#group,false,false,true,true,true,true,false\n#default,_result,,,,,,\n,result,table,_start,_stop,_measurement,_field,_value\n,,0,2021-01-01T00:00:00Z,2021-01-03T01:00:00Z,m,t,4.8\n\"\n\nt_sum = (table=<-) =>\n  (table\n    |> range(start:2021-01-01T00:00:00Z, stop:2021-01-03T01:00:00Z)\n    |> sum())\n\ntest _sum = () =>\n  ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_sum})\n\ntesting.inpsect(case: _sum)\n\n// Returns: {\n//   fn: (<-table: [{_time: time | t10997}]) -> [t10996],\n//   input: fromCSV -> range -> map,\n//   want: fromCSV -> yield,\n//   got: fromCSV -> range -> map -> range -> sum -> yield,\n//   diff: ( fromCSV; fromCSV -> range -> map -> range -> sum;  ) -> diff -> yield\n// }\n```\n\n","parameters":[{"name":"case","headline":" is the test case to inspect.","description":null,"required":false}],"flux_type":"Fun"}}}},{"path":"testing/expect","name":"expect","headline":"Package expect includes functions to markany expectations for a testcase to be satisfiedbefore the testcase finishes running.","description":"These functions are intended to be called at thebeginning of a testcase, but it doesn't reallymatter when they get invoked within the testcase. ","members":{"planner":{"Function":{"name":"planner","headline":"planner will cause the present testcase toexpect the given planner rules will be invokedexactly as many times as the number given. ","description":"The key is the name of the planner rule. ","parameters":[],"flux_type":"Fun"}}}},{"path":"universe","name":"universe","headline":"","description":null,"members":{"increase":{"Function":{"name":"increase","headline":"Increase returns the total non-negative difference between values in a table. A main usage case is tracking changes in counter values which may wrap over time when they hita threshold or are reset. In the case of a wrap/reset,we can assume that the absolute delta between two points will be at least their non-negative difference. ","description":"","parameters":[],"flux_type":"Fun"}},"bottom":{"Function":{"name":"bottom","headline":"top sorts a table by columns and keeps only the bottom n records. ","description":"","parameters":[],"flux_type":"Fun"}},"highestAverage":{"Function":{"name":"highestAverage","headline":"highestAverage returns the top N records from all groups using the average of each group. ","description":"","parameters":[],"flux_type":"Fun"}},"bool":{"Function":{"name":"bool","headline":"type conversion functions","description":"","parameters":[],"flux_type":"Fun"}},"kaufmansER":{"Function":{"name":"kaufmansER","headline":"kaufmansER computes Kaufman's Efficiency Ratios of the _value column","description":"","parameters":[],"flux_type":"Fun"}},"toTime":{"Function":{"name":"toTime","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"findRecord":{"Function":{"name":"findRecord","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"fill":{"Function":{"name":"fill","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"histogram":{"Function":{"name":"histogram","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"relativeStrengthIndex":{"Function":{"name":"relativeStrengthIndex","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"lowestAverage":{"Function":{"name":"lowestAverage","headline":"lowestAverage returns the bottom N records from all groups using the average of each group. ","description":"","parameters":[],"flux_type":"Fun"}},"median":{"Function":{"name":"median","headline":"median returns the 50th percentile. ","description":"","parameters":[],"flux_type":"Fun"}},"pivot":{"Function":{"name":"pivot","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"lowestMin":{"Function":{"name":"lowestMin","headline":"lowestMin returns the bottom N records from all groups using the minimum of each group. ","description":"","parameters":[],"flux_type":"Fun"}},"sort":{"Function":{"name":"sort","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"map":{"Function":{"name":"map","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"findColumn":{"Function":{"name":"findColumn","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"integral":{"Function":{"name":"integral","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"sum":{"Function":{"name":"sum","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"toUInt":{"Function":{"name":"toUInt","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"keyValues":{"Function":{"name":"keyValues","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"quantile":{"Function":{"name":"quantile","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"cov":{"Function":{"name":"cov","headline":"covariance function with automatic join","description":"","parameters":[],"flux_type":"Fun"}},"getColumn":{"Function":{"name":"getColumn","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"range":{"Function":{"name":"range","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"stateTracking":{"Function":{"name":"stateTracking","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"rename":{"Function":{"name":"rename","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"getRecord":{"Function":{"name":"getRecord","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"int":{"Function":{"name":"int","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"contains":{"Function":{"name":"contains","headline":"contains function","description":"","parameters":[],"flux_type":"Fun"}},"true":{"Value":{"name":"true","headline":"Booleans","description":"","flux_type":"bool"}},"timeWeightedAvg":{"Function":{"name":"timeWeightedAvg","headline":"Time weighted average where values at the beginning and end of the range are linearly interpolated. ","description":"","parameters":[],"flux_type":"Fun"}},"difference":{"Function":{"name":"difference","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"tripleEMA":{"Function":{"name":"tripleEMA","headline":"Triple Exponential Moving Average computes the triple exponential moving averages of the _value column. eg: A 5 point triple exponential moving average would be called as such:from(bucket: \"telegraf/autogen\"):|> range(start: -7d)|> tripleEMA(n: 5)","description":"","parameters":[],"flux_type":"Fun"}},"chandeMomentumOscillator":{"Function":{"name":"chandeMomentumOscillator","headline":"Transformation functions","description":"","parameters":[],"flux_type":"Fun"}},"toInt":{"Function":{"name":"toInt","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"inf":{"Value":{"name":"inf","headline":"other builtins","description":"","flux_type":"duration"}},"covariance":{"Function":{"name":"covariance","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"logarithmicBins":{"Function":{"name":"logarithmicBins","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"_fillEmpty":{"Function":{"name":"_fillEmpty","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"reduce":{"Function":{"name":"reduce","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"kaufmansAMA":{"Function":{"name":"kaufmansAMA","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"cumulativeSum":{"Function":{"name":"cumulativeSum","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"yield":{"Function":{"name":"yield","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"filter":{"Function":{"name":"filter","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"tableFind":{"Function":{"name":"tableFind","headline":"stream/table index functions","description":"","parameters":[],"flux_type":"Fun"}},"first":{"Function":{"name":"first","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"stateDuration":{"Function":{"name":"stateDuration","headline":"stateDuration computes the duration of a given state. The state is defined via the function fn. For each consecutive point forwhich the expression evaluates as true, the state duration will beincremented by the duration between points. When a point evaluates as false,the state duration is reset. ","description":"The state duration will be added as an additional column to each record. If theexpression evaluates as false, the value will be -1. If the expressiongenerates an error during evaluation, the point is discarded, and does notaffect the state duration. Note that as the first point in the given state has no previous point, itsstate duration will be 0. The duration is represented as an integer in the units specified. ","parameters":[],"flux_type":"Fun"}},"mode":{"Function":{"name":"mode","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"min":{"Function":{"name":"min","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"_sortLimit":{"Function":{"name":"_sortLimit","headline":"_sortLimit is a helper function, which sorts and limits a table. ","description":"","parameters":[],"flux_type":"Fun"}},"union":{"Function":{"name":"union","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"stddev":{"Function":{"name":"stddev","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"limit":{"Function":{"name":"limit","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"elapsed":{"Function":{"name":"elapsed","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"exponentialMovingAverage":{"Function":{"name":"exponentialMovingAverage","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"keys":{"Function":{"name":"keys","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"tripleExponentialDerivative":{"Function":{"name":"tripleExponentialDerivative","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"highestCurrent":{"Function":{"name":"highestCurrent","headline":"highestCurrent returns the top N records from all groups using the last value of each group. ","description":"","parameters":[],"flux_type":"Fun"}},"window":{"Function":{"name":"window","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"doubleEMA":{"Function":{"name":"doubleEMA","headline":"Double Exponential Moving Average computes the double exponential moving averages of the _value column. eg: A 5 point double exponential moving average would be called as such:from(bucket: \"telegraf/autogen\"):|> range(start: -7d)|> doubleEMA(n: 5)","description":"","parameters":[],"flux_type":"Fun"}},"_highestOrLowest":{"Function":{"name":"_highestOrLowest","headline":"_highestOrLowest is a helper function, which reduces all groups into a single group by specific tags and a reducer function,then it selects the highest or lowest records based on the column and the _sortLimit function. The default reducer assumes no reducing needs to be performed. ","description":"","parameters":[],"flux_type":"Fun"}},"die":{"Function":{"name":"die","headline":"die returns a fatal error from within a flux script","description":"","parameters":[],"flux_type":"Fun"}},"drop":{"Function":{"name":"drop","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"derivative":{"Function":{"name":"derivative","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"join":{"Function":{"name":"join","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"mean":{"Function":{"name":"mean","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"movingAverage":{"Function":{"name":"movingAverage","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"length":{"Function":{"name":"length","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"timedMovingAverage":{"Function":{"name":"timedMovingAverage","headline":"timedMovingAverage constructs a simple moving average over windows of 'period' durationeg: A 5 year moving average would be called as such:movingAverage(1y, 5y)","description":"","parameters":[],"flux_type":"Fun"}},"holtWinters":{"Function":{"name":"holtWinters","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"group":{"Function":{"name":"group","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"aggregateWindow":{"Function":{"name":"aggregateWindow","headline":"aggregateWindow applies an aggregate function to fixed windows of time. The procedure is to window the data, perform an aggregate operation,and then undo the windowing to produce an output table for every input table. ","description":"","parameters":[],"flux_type":"Fun"}},"hourSelection":{"Function":{"name":"hourSelection","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"truncateTimeColumn":{"Function":{"name":"truncateTimeColumn","headline":"truncateTimeColumn takes in a time column t and a Duration unit and truncates each value of t to the given unit via mapChange from _time to timeColumn once Flux Issue 1122 is resolved","description":"","parameters":[],"flux_type":"Fun"}},"toFloat":{"Function":{"name":"toFloat","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"skew":{"Function":{"name":"skew","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"max":{"Function":{"name":"max","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"spread":{"Function":{"name":"spread","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"toBool":{"Function":{"name":"toBool","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"tail":{"Function":{"name":"tail","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"lowestCurrent":{"Function":{"name":"lowestCurrent","headline":"lowestCurrent returns the bottom N records from all groups using the last value of each group. ","description":"","parameters":[],"flux_type":"Fun"}},"distinct":{"Function":{"name":"distinct","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"bytes":{"Function":{"name":"bytes","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"float":{"Function":{"name":"float","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"false":{"Value":{"name":"false","headline":"","description":"","flux_type":"bool"}},"duration":{"Function":{"name":"duration","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"top":{"Function":{"name":"top","headline":"top sorts a table by columns and keeps only the top n records. ","description":"","parameters":[],"flux_type":"Fun"}},"time":{"Function":{"name":"time","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"pearsonr":{"Function":{"name":"pearsonr","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"set":{"Function":{"name":"set","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"toString":{"Function":{"name":"toString","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"today":{"Function":{"name":"today","headline":"today returns the now() timestamp truncated to the day unit","description":"","parameters":[],"flux_type":"Fun"}},"highestMax":{"Function":{"name":"highestMax","headline":"highestMax returns the top N records from all groups using the maximum of each group. ","description":"","parameters":[],"flux_type":"Fun"}},"stateCount":{"Function":{"name":"stateCount","headline":"stateCount computes the number of consecutive records in a given state. The state is defined via the function fn. For each consecutive point forwhich the expression evaluates as true, the state count will be incrementedWhen a point evaluates as false, the state count is reset. ","description":"The state count will be added as an additional column to each record. If theexpression evaluates as false, the value will be -1. If the expressiongenerates an error during evaluation, the point is discarded, and does notaffect the state count. ","parameters":[],"flux_type":"Fun"}},"linearBins":{"Function":{"name":"linearBins","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"histogramQuantile":{"Function":{"name":"histogramQuantile","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"count":{"Function":{"name":"count","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"unique":{"Function":{"name":"unique","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"sample":{"Function":{"name":"sample","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"duplicate":{"Function":{"name":"duplicate","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"now":{"Function":{"name":"now","headline":"now is a function option whose default behaviour is to return the current system time","description":"","parameters":[],"flux_type":"Fun"}},"string":{"Function":{"name":"string","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"timeShift":{"Function":{"name":"timeShift","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"keep":{"Function":{"name":"keep","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"columns":{"Function":{"name":"columns","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"last":{"Function":{"name":"last","headline":"","description":"","parameters":[],"flux_type":"Fun"}},"uint":{"Function":{"name":"uint","headline":"","description":"","parameters":[],"flux_type":"Fun"}}}}]