// DO NOT EDIT: This file is autogenerated via the builtin command.

package experimental

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 18,
					Line:   1216,
				},
				File:   "experimental.flux",
				Source: "package experimental\n\n\n// addDuration is a function that adds a duration to a time value and returns\n//  the resulting time value.\n//\n//  addDuration function is subject to change at any time. By using this funciton,\n//  you accept the risks of experimental functions.\n//\n//  This function will be removed once duration vectors are implementated.\n//\n// ## Parameters\n// - `d` is the duration to add.\n// - `to` is the time to add the duration to.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// experimental.addDuration(\n//   d: 12h,\n//   to: now(),\n// )\n// ```\n//\n// ## Add six hours to a timestamp\n//\n// ```\n// import \"experimental\"\n//\n// experimental.addDuration(\n//   d: 6h,\n//   to: 2019-09-16T12:00:00Z,\n// )\n// // Returns 2019-09-16T18:00:00.000000000Z\n// ```\nbuiltin addDuration : (d: duration, to: time) => time\n\n// subDuration is a function that subtracts a duration from a time value\n//  and returns the resulting time value.\n//\n//  subDuration function is subject to change at any time. By using this\n//  function, you accept the risks of experimental functions.\n//\n//  This funciton will be removed once duration vectors are impemented.\n//\n// ## Parameters\n// - `d` is the duration to subtract.\n// - `from` is the time to subtract the duration from.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// experimental.subDuration(\n//   d: 12h,\n//   from: now(),\n// )\n// ```\n//\n// ## Subtract six hours from a timestamp\n//\n// ```\n//import \"experimental\"\n//\n// experimental.subDuration(\n//   d: 6h,\n//   from: 2019-09-16T12:00:00Z,\n// )\n// // Returns 2019-09-16T06:00:00.000000000Z\n// ```\nbuiltin subDuration : (d: duration, from: time) => time\n\n// group is a function that introduces an extended mode to the existing group()\n//  funciton.\n//\n//  group function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n//  This function will be removed once the proposed extend mode is sufficiently\n//  vetted.\n//\n// ## Parameters\n// - `mode` is the mode used to group columns.\n//\n//   Appends columns defined in the columns parameter to all existing group keys.\n//   extend is the only mode available to experimental.group()\n//\n// - `columns` is a list of columns to use in the grouping operation.\n//\n//   Defaults to [].\n//\n// ## Include the value column in each group's group key\n//\n// ```\n//import \"experimental\"\n//\n// from(bucket: \"example-bucket\")\n//   |> range(start: -1m)\n//   |> experimental.group(columns: [\"_value\"], mode: \"extend\")\n// ```\nbuiltin group : (<-tables: [A], mode: string, columns: [string]) => [A] where A: Record\n\n// objectKeys is a function that returns an array of keys in a\n//  specified record.\n//\n//  objectKeys function is subject to change at any time. By using\n//  this function, you accept the risks of experimental functions.\n//\n// ## Parameters\n// - `o` is the record to return keys from.\n//\n// ## Return all keys in a record\n//\n// ```\n//import \"experimental\"\n//\n// user = {\n//   firstName: \"John\",\n//   lastName: \"Doe\",\n//   age: 42\n// }\n//\n// experimental.objectKeys(o: user)\n// // Returns [firstName, lastName, age]\n// ```\nbuiltin objectKeys : (o: A) => [string] where A: Record\n\n// set is a function that sets multiple static column values on all records.\n//\n//  If a column already exists, the function updates the existing value. If\n//  a column does not exist, the function adds it with the specified value.\n//\n//  set function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n//  Once sufficiently vetted, experimental.set() will replace the existing\n//  set() function.\n//\n// ## Parameters\n// - `o` is a record that defines the columns and values to set.\n//\n//   The key of each key-value pair defines the column name. The value of each\n//   key-value pair defines the column value.\n//\n// ## Set values for multiple columns\n//\n// ```\n// import \"experimental\"\n//\n// data\n//   |> experimental.set(\n//     o: {\n//       _field: \"temperature\",\n//       unit: \"°F\",\n//       location: \"San Francisco\"\n//     }\n//   )\n// ```\n//\n// # Example input table\n// _time | _field | _value\n// --- | --- | ---\n// 2019-09-16T12:00:00Z | temp | 71.2\n// 2019-09-17T12:00:00Z\t| temp | 68.4\n// 2019-09-18T12:00:00Z | temp | 70.8\n//\n// # Example output table\n// _time | _field | _value | unit | location\n// 2019-09-16T12:00:00Z\t| temperature | 71.2 | °F | San Fransisco\n// 2019-09-17T12:00:00Z | temperature | 68.4 | °F | San Fransisco\n// 2019-09-18T12:00:00Z | temperature | 70.8 | °F | San Fransisco\n//\nbuiltin set : (<-tables: [A], o: B) => [C] where A: Record, B: Record, C: Record\n\n// to is a function that writes data to an InfluxDB v2.0 bucket, but in a\n//  different structure than the built-in to() function.\n//\n//  to function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Parameters\n// - `bucket` is the bucket to write data to.\n//\n//   bucket and bucketID are mutually exclusive.\n//\n// - `bucketID` is the ID of the bucket to write the data to.\n//\n// - `org` is the organization name of the specified bucket.\n//\n//   Only required when writing to a different organization or a remote\n//   host. org and orgID are mutually exclusive.\n//\n// - `orgID` is the organization ID of the specified bucket.\n//\n//   Only required when writing to a different organization or a remote\n//   host. orgID and org are mutually exclusive.\n//\n// ## Expected data structure\n// # Data structure expected by built-in to()\n//  The built-in to() function requires _time, _measurement, _field, and\n//  _value columns. The _field column stores the field key and the _value\n//  column stores the field value.\n//\n//  _time | _measurement | _field | _value\n//  --- | --- | --- | ---\n//  timestamp | measurement-name | field key | field value\n//\n// # Data structre expected by experimental to()\n//  experimental.to() requires _time and _measurement columns, but the field\n//  keys and values are stored in single columns with the field key as the\n//  column name and the field value as the column value.\n//\n//  _time | _measurement | _field_key\n//  --- | --- | ---\n//  timestamp | measurement-name | field value\n//\n// if using the built-in from() function, use the pivot() to transform data\n// into the structure experimental.to() expects.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// experimental.to(\n//   bucket: \"my-bucket\",\n//   org: \"my-org\"\n// )\n//\n// // OR\n//\n// experimental.to(\n//   bucketID: \"1234567890\",\n//   orgID: \"0987654321\"\n// )\n// ```\n//\n// ## Use pivot() to shape the data for experimental.to()\n//\n// ```\n// import \"experimental\"\n//\n// from(bucket: \"example-bucket\")\n//   |> range(start: -1h)\n//   |> pivot(\n//       rowKey:[\"_time\"],\n//       columnKey: [\"_field\"],\n//       valueColumn: \"_value\")\n//   |> experimental.to(\n//       bucket: \"bucket-name\",\n//       org: \"org-name\"\n//   )\n// ```\nbuiltin to : (\n    <-tables: [A],\n    ?bucket: string,\n    ?bucketID: string,\n    ?org: string,\n    ?orgID: string,\n    ?host: string,\n    ?token: string,\n) => [A] where\n    A: Record\n\n// An experimental version of join.\nbuiltin join : (left: [A], right: [B], fn: (left: A, right: B) => C) => [C] where A: Record, B: Record, C: Record\nbuiltin chain : (first: [A], second: [B]) => [B] where A: Record, B: Record\n\n// alignTime is a function that aligns input tables to a common start time.\n//\n//  alignTime function is subject to change at any time. By using this\n//  function, you accept the risks of experimental functions.\n//\n// ## Parameters\n// - `alignTo` is the UTC time to align tables to.\n//\n//   Defaults to 1970-01-01T00:00:00Z.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// experimental.alignTime(\n//   alignTo: 1970-01-01T00:00:00.000000000Z\n// )\n// ```\n//\n// ## Compare values month-over-month\n//\n// ```\n// import \"experimental\"\n//\n// from(bucket: \"example-bucket\")\n//   |> range(start: -12mo)\n//   |> filter(fn: (r) => r._measurement == \"example-measurement\")\n//   |> window(every: 1mo)\n//   |> experimental.alignTime()\n// ```\n//\n// # Given the following input\n//\n// _time | _value\n// --- | ---\n// 2020-01-01T00:00:00Z | 32.1\n// 2020-01-02T00:00:00Z | 32.9\n// 2020-01-03T00:00:00Z | 33.2\n// 2020-01-04T00:00:00Z | 34.0\n// 2020-02-01T00:00:00Z | 38.3\n// 2020-02-02T00:00:00Z | 38.4\n// 2020-02-03T00:00:00Z | 37.8\n// 2020-02-04T00:00:00Z | 37.5\n//\n// # The following functions\n//  1. Window data by calendar month creating two separate tables.\n//  2. Align tables to 2020-01-01T00:00:00Z.\n//\n// # Output\n// _time | _value\n// --- | ---\n// 2020-01-01T00:00:00Z | 32.1\n// 2020-01-02T00:00:00Z | 32.9\n// 2020-01-03T00:00:00Z | 33.2\n// 2020-01-04T00:00:00Z | 34.0\n//\n// _time | _value\n// --- | ---\n// 2020-01-01T00:00:00Z | 38.3\n// 2020-01-02T00:00:00Z | 38.4\n// 2020-01-03T00:00:00Z | 37.8\n// 2020-01-04T00:00:00Z | 37.5\n//\n// Each output table represents data from a calendr month. When visualized,\n// data is still grouped by month, but timestamps are aligned to a common start\n// time and values can be compared by time.\n//\nalignTime = (tables=<-, alignTo=time(v: 0)) => tables\n    |> stateDuration(\n        fn: (r) => true,\n        column: \"timeDiff\",\n        unit: 1ns,\n    )\n    |> map(fn: (r) => ({r with _time: time(v: int(v: alignTo) + r.timeDiff)}))\n    |> drop(columns: [\"timeDiff\"])\n\n// window is a function that groups records based on a time value.\n//\n//  New columns are added to uniquely identify each window. Those columns are\n//  added to the group key of the output tables. Input tables must have _start\n//  _stop, and _time columns. \n//\n//  A single input record will be placed into zero or more output tables, depending\n//  on the specific windowing function.\n//\n//  By default the start boundary of a window will align with the unix epoch\n//  (zero time) modified by the offset of the location option.\n//\n//  window function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Parameters\n// - `every` is the duration of time between windows.\n//\n//   Defaults to period value.\n//\n// - `period` is the duration of the window.\n//\n//   Period is the length of each interval. It can be negative, indicating the\n//   start and stop boundaries are reversed. Defaults to every value.\n//\n// - `offset` is the duration by which to shift the window boundaries.\n//\n//   It can be negative, indicating that the offset goes backwards in time.\n//   Defaults to 0, which will align window end boundaries with the every\n//   duration.\n//\n// - `createEmpty` specifies whether empty tables should be created.\n//\n//   Defaults to false.\n//\n// # Parameters\n//  every, period, and offset support support all valid duration units,\n//  including calendar months (1mo) and years (1y).\n//\n// ## Example\n//\n// ```\n// window(\n//   every: 5m,\n//   period: 5m,\n//   offset: 12h,\n//   createEmpty: false\n// )\n// ```\n//\n// ## Window data into 10 minute intervals\n//\n// ```\n// from(bucket:\"example-bucket\")\n//   |> range(start: -12h)\n//   |> window(every: 10m)\n//   // ...\n// ```\n//\n// ## Window by calendar month\n//\n// ```\n// from(bucket:\"example-bucket\")\n//   |> range(start: -1y)\n//   |> window(every: 1mo)\n//   // ...\n// ```\nbuiltin window : (\n    <-tables: [{T with _start: time, _stop: time, _time: time}],\n    ?every: duration,\n    ?period: duration,\n    ?offset: duration,\n    ?createEmpty: bool,\n) => [{T with _start: time, _stop: time, _time: time}]\n\n// integral is a function that computes the area under the curve per unit of\n//  time of subsequent non-null records.\n//\n//  The curve is defined using _time as the domain and record values as the\n//  range. Input tables must have _time and _value columns.\n//\n//  integral function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Parameters\n// - `unit` is the time duration used to compute the integral.\n// - `interpolate` is the type of interpolation to use.\n//\n//   Defaults to \"\".\n//   Use one of the following interpolation options:\n//    - empty string for no interpolation.\n//    - linear.\n//\n// ## Calculate the integral\n//\n// ```\n// from(bucket: \"example-bucket\")\n//   |> range(start: -5m)\n//   |> filter(fn: (r) =>\n//     r._measurement == \"cpu\" and\n//     r._field == \"usage_system\"\n//   )\n//   |> integral(unit:10s)\n// ```\n//\n// ## Calculate the integral with linear interpolation\n//\n// ```\n// from(bucket: \"example-bucket\")\n//   |> range(start: -5m)\n//   |> filter(fn: (r) =>\n//     r._measurement == \"cpu\" and\n//     r._field == \"usage_system\"\n//   )\n//   |> integral(unit:10s, interpolate: \"linear\")\n// ```\nbuiltin integral : (<-tables: [{T with _time: time, _value: B}], ?unit: duration, ?interpolate: string) => [{T with _value: B}]\n\n// count is a function that outputs the number of records in each input table\n//  and returns the count in the _value column.\n//\n//  This function counts both null and non-null records.\n//\n//  count function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Empty tables\n// experimental.count() returns 0 for empty tables. to keep empty tables in\n// your data, set the following parameters for the following functions:\n//\n// Function | Parameters\n// --- | ---\n// filter() | onEmpty: \"keep\"\n// window() | createEmpty: true\n// aggregateWindow() | createEmpty: true\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// from(bucket: \"example-bucket\")\n//   |> range(start: -5m)\n//   |> experimental.count()\n// ```\nbuiltin count : (<-tables: [{T with _value: A}]) => [{T with _value: int}]\n\n// histogramQuantile is a function that approximates a quantile given a histogram\n//  with the cumulative distribution of the dataset.\n//\n//  Each input table represents a single histogram. Input tables must have two\n//  columns - a count column (_value) and an upper bound column (le), and neither\n//  column can be part of the group key.\n//\n//  The count is the number of values that are less than or equal to the upper\n//  bound value (le). Input tables can have an unlimited number of records; each\n//  record represents an entry in the histogram. The count must be monotonically\n//  increasing when sorted by upper bound (le). If any values in the _value or le\n//  columns are null, the function returns an error.\n//\n//  Linear interpolation between the two closest bounds is used to compute the\n//  quantile. If either of the bounds used in interpolation are infinite, then\n//  the other finite bound is used and no interpolation is performed.\n//\n//  The output table has the same group key as the input table. The function returns\n//  the value of the specified quantile from the histogram in the _value column and\n//  drops all columns not part of the group key.\n//\n//  histogramQuantile function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Parameters\n// - `quantile` is a value between 0 and 1 indicating the desired quantile to compute.\n// - `minValue` is the asumed minimum value of the dataset.\n//\n//   When the quantile falls below the lowest upper bound, interpolation is performed\n//   between minValue and the lowest upper bound. When minValue is equal to negative\n//   infinity, the lowest upper bound is used. Defaults to 0.0\n//\n// ## Compute the 90th quantile\n//\n// ```\n// import \"experimental\"\n//\n// from(bucket: \"example-bucket\")\n//   |> range(start: -1d)\n//   |> filter(fn: (r) =>\n//     r._meausrement == \"example-measurement\" and\n//     r._field == \"example-field\"\n//   )\n//   |> experimental.histogramQuantile(quantile: 0.9)\n// ```\nbuiltin histogramQuantile : (<-tables: [{T with _value: float, le: float}], ?quantile: float, ?minValue: float) => [{T with _value: float}]\n\n// mean is a function that computes the mean or average of non-null values\n//  in the _value column of each input table.\n//\n//  Output tables contain a single row with the calculated mean in the\n//  _value column.\n//\n//  mean function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// from(bucket:\"example-bucket\")\n//   |> filter(fn: (r) =>\n//     r._measurement == \"example-measurement\" and\n//     r._field == \"example-field\")\n//   |> range(start:-1h)\n//   |> experimental.mean()\n// ```\nbuiltin mean : (<-tables: [{T with _value: float}]) => [{T with _value: float}]\n\n// mode is a function that computes the mode or value that occurs most often\n//  in the _value column in each input table.\n//\n//  If there are multiple modes, it returns all of them in a sorted table. mode\n//  only considers non-null values. If there is no mode, experimental.mode()\n//  returns null.\n//\n//  mode function is subject to change at any time. By using this function, you\n//  accept the risks of experimental functions.\n//\n// ## Supported data types\n// - String\n// - Float\n// - Integer\n// - UInteger\n// - Boolean\n// - Time\n//\n// ## Empty tables\n//  experimental.mode() drops empty tables.\n//\n// ## Return the mode of windowed data\n//\n// ```\n// import \"experimental\"\n//\n// from(bucket: \"example-bucket\")\n//   |> filter(fn: (r) =>\n//     r._measurement == \"example-measurement\" and\n//     r._field == \"example-field\"\n//   )\n//   |> range(start:-12h)\n//   |> window(every:10m)\n//   |> experimental.mode()\n// ```\nbuiltin mode : (<-tables: [{T with _value: A}]) => [{T with _value: A}]\n\n// quantile is a function that outputs non-null records with the values in the\n//  _value column that fall within the specified quantile.\n//\n//  Which it returns depends on the method used. The _value column must contain\n//  float values.\n//\n//  When using the estimate_tdigest or exact_mean methods, the function outputs\n//  non-null records with values that fall within the specified quantile.\n//\n//  When using the exact_selector method, it outputs the non-null record with the\n//  value that represents the specified quantile.\n//\n//  quantile function is subject to change at any time. By using this function,\n//  you accept the risks of experimental funtions.\n//\n// ## Parameters\n// - `q` is a value between 0 and 1 that specifies the quantile.\n// - `method` is the computation method.\n//\n//   Default is estimate_tdigest.\n//   Available options are:\n//   - estimate_tdigest\n//   - exact_mean\n//   - exact_selector\n//\n// # estimate_tdigest\n//  An aggregate method that uses a t-digest data structure to compute an accurate\n//  quantile estimate on a large data source.\n//\n// # exact_mean\n//  A aggregate method that takes the averge of the two points closest to the\n//  quantile value.\n//\n// # exact_selector\n//  A selector method that returns the data point for which at least q points are\n//  less than.\n//\n// ## compression\n// Indicates how many centroids to use when compressing the dataset. A larger number\n// produces a more accurate result at the cost of increased memory requirements.\n// Defaults to 1000.0.\n//\n// ## Quantile as an aggregate\n//\n// ```\n// import \"experimental\"\n//\n// from(bucket: \"example-bucket\")\n// \t|> range(start: -5m)\n// \t|> filter(fn: (r) =>\n//     r._measurement == \"example-measurement\" and\n//     r._field == \"example-field\")\n// \t|> experimental.quantile(\n//     q: 0.99,\n//     method: \"estimate_tdigest\",\n//     compression: 1000.0\n//   )\n// ```\n//\n// ## Quantile as a selector\n//\n// ```\n// import \"experimental\"\n//\n// from(bucket: \"example-bucket\")\n// \t|> range(start: -5m)\n// \t|> filter(fn: (r) =>\n//     r._measurement == \"example-measurement\" and\n//     r._field == \"example-field\")\n// \t|> experimental.quantile(\n//     q: 0.99,\n//     method: \"exact_selector\"\n//   )\n// ```\nbuiltin quantile : (<-tables: [{T with _value: float}], q: float, ?compression: float, ?method: string) => [{T with _value: float}]\n\n// skew is a function that outputs the skew of non-null values in the\n//  _value column for each input table as a float.\n//\n//  skew function is subject to change at any time. By using this\n//  function, you accept the risks of experimental functions.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// from(bucket: \"example-bucket\")\n//   |> range(start: -5m)\n//   |> filter(fn: (r) =>\n//     r._measurement == \"example-measurement\" and\n//     r._field == \"example-field\"\n//   )\n//   |> experimental.skew()\n// ```\nbuiltin skew : (<-tables: [{T with _value: float}]) => [{T with _value: float}]\n\n// spread is a function that outputs the difference between the minimum and\n//  maximum values in the value column for each input table.\n//\n//  The function supports uint, int, and float values. The output value type\n//  depends on the input value type.\n//  - uint or int values return int values.\n//  - float input values return float output values.\n//\n//  spread function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// from(bucket: \"example-bucket\")\n//   |> range(start: -5m)\n//   |> filter(fn: (r) =>\n//     r._measurement == \"example-measurement\" and\n//     r._field == \"example-field\"\n//   )\n//   |> experimental.spread()\n// ```\nbuiltin spread : (<-tables: [{T with _value: A}]) => [{T with _value: A}] where A: Numeric\n\n// stddev is a function that computes the standard deviation of non-null values\n//  in the _value column for each input table.\n//\n//  stddev function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Parameters\n// - `mode` is the standard deviation mode or type of standard deviation to calculate.\n//\n//   Defaults to \"sample\".\n//   Available options are:\n//   - sample\n//   - population\n//\n// # sample\n//  Calculate the sample standard deviation where the data is considered to be part of\n//  a larger population.\n//\n// # population\n//  Calculate the population standard deviation where the data is considered a\n//  population of its own.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// from(bucket: \"example-bucket\")\n//   |> range(start: -5m)\n//   |> filter(fn: (r) =>\n//     r._measurement == \"cpu\" and\n//     r._field == \"usage_system\"\n//   )\n//   |> experimental.stddev()\n// ```\nbuiltin stddev : (<-tables: [{T with _value: float}], ?mode: string) => [{T with _value: float}]\n\n// sum is a function that computes the sum of non-null values in the _value\n//  column for each input table.\n//\n//  sum function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// from(bucket: \"example-bucket\")\n//   |> range(start: -5m)\n//   |> filter(fn: (r) =>\n//     r._measurement == \"example-measurement\" and\n//     r._field == \"example-field\"\n//   )\n//   |> experimental.sum()\n// ```\nbuiltin sum : (<-tables: [{T with _value: A}]) => [{T with _value: A}] where A: Numeric\n\n// kaufmansAMA is a function that calculate the Kaufman's Adaptive Moving\n//  Average (KAMA) of input tables using the _value column in each table.\n//\n//  Kaufman’s Adaptive Moving Average is a trend-following indicator designed\n//  to account for market noise or volatility.\n//\n//  kaufmansAMA function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Parameters\n// - `n` is the period or number of points to use in the calculation.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// experimental.from(bucket: \"example-bucket\"):\n//   |> range(start: -7d)\n//   |> kaufmansAMA(n: 10)\n// ```\nbuiltin kaufmansAMA : (<-tables: [{T with _value: A}], n: int) => [{T with _value: float}] where A: Numeric\n\n// distinct is a function that returns unique values from the _value column.\n//\n//  The _value of each output record is set to a distinct value in the specified\n//  column. null is considered a distinct value.\n//\n//  distinct function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Output schema\n// experimental.distinct() outputs a single table for each input table and\n// does the following:\n//\n// - Outputs a single record for each distinct value.\n// - Drops all columns not in the group key.\n//\n// ## Empty tables\n// experimental.distinct() drops empty tables.\n//\n// ## Parameters\n// - `tables` is the input data\n//\n//   Default is pipe-forwarded data.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// data\n// \t|> experimental.distinct()\n// ```\n//\n// # Input data\n//  _time | _field | _value\n//  --- | --- | ---\n// 2021-01-01T00:00:00Z | ver | v1\n// 2021-01-01T00:01:00Z | ver | v1\n// 2021-01-01T00:02:00Z | ver | v2\n// 2021-01-01T00:03:00Z | ver | \n// 2021-01-01T00:04:00Z | ver | v3\n// 2021-01-01T00:05:00Z | ver | v3\n//\n// # Output table\n//  _value\n//  ---\n//  v1\n//  v2\n//    \n//  v3\n//\nbuiltin distinct : (<-tables: [{T with _value: A}]) => [{T with _value: A}]\n\n// fill is a function that replaces all null values in the _value column\n//  with a non-null value.\n//\n//  fill function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Parameters\n// - `value` is the value to replace the null values with.\n//\n//   Data type must match the type of the _value column.\n//\n// - `usePrevious` when true, replaces null values with the value of the previous\n//   non-null row.\n//\n// - `tables` is the input data.\n//\n//   Default is pipe-forwarded data.\n//\n// ## Fill null values with a specified non-null value\n//\n// ```\n// import \"experimental\"\n//\n// data\n//   |> experimental.fill(value: 0.0)\n// ```\n//\n// # Input data\n//  _time | _value\n//  --- | ---\n//  2021-01-01T00:00:00Z | 1.2\n//  2021-01-01T00:01:00Z | \n//  2021-01-01T00:02:00Z | 2.3\n//  2021-01-01T00:03:00Z | \n//  2021-01-01T00:04:00Z | 2.8\n//  2021-01-01T00:05:00Z | 1.1\n//\n// # Output data\n//  _time | _value\n//  --- | ---\n//  2021-01-01T00:00:00Z | 1.2\n//  2021-01-01T00:01:00Z | 0.0\n//  2021-01-01T00:02:00Z | 2.3\n//  2021-01-01T00:03:00Z | 0.0\n//  2021-01-01T00:04:00Z | 2.8\n//  2021-01-01T00:05:00Z | 1.1\n//\n// ## Fill null values with the previous non-null value\n//\n// ```\n// import \"experimental\"\n//\n// data\n//   |> experimental.fill(usePrevious: true)\n// ```\n//\n// # Input data\n//  _time | _value\n//  --- | ---\n//  2021-01-01T00:00:00Z | 1.2\n//  2021-01-01T00:01:00Z | \n//  2021-01-01T00:02:00Z | 2.3\n//  2021-01-01T00:03:00Z | \n//  2021-01-01T00:04:00Z | 2.8\n//  2021-01-01T00:05:00Z | 1.1\n//\n// # Output data\n//  _time | _value\n//  --- | ---\n//  2021-01-01T00:00:00Z | 1.2\n//  2021-01-01T00:01:00Z | 1.2\n//  2021-01-01T00:02:00Z | 2.3\n//  2021-01-01T00:03:00Z | 2.3\n//  2021-01-01T00:04:00Z | 2.8\n//  2021-01-01T00:05:00Z | 1.1\n//\nbuiltin fill : (<-tables: [{T with _value: A}], ?value: A, ?usePrevious: bool) => [{T with _value: A}]\n\n// first is a function that returns the first record with a non-null value in\n//  the _value column.\n//\n//  first function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Empty tables\n// experimental.first() drops empty tables.\n//\n// ## Parameters\n// - `tables` is the input data.\n//\n//   Default is pipe-forwarded data.\n//\n// ## Return the first non-null value\n//\n// ```\n// import \"experimental\"\n//\n// data\n//   |> experimental.first()\n// ```\n//\n// # Input data\n//  _time | _value\n//  --- | ---\n//  2021-01-01T00:00:00Z | 1.2\n//  2021-01-01T00:01:00Z | 0.6\n//  2021-01-01T00:02:00Z | 2.3\n//  2021-01-01T00:03:00Z | 0.9\n//\n// # Output table\n//  _time | _value\n//  --- | ---\n//  2021-01-01T00:00:00Z | 1.2\n//\nbuiltin first : (<-tables: [{T with _value: A}]) => [{T with _value: A}]\n\n// last is a function that returns the last record with a non-null value\n//  in the _value column. \n//\n//  last function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Empty tables\n// experimental.last drops empty tables.\n//\n// ## Parameters\n// - `tables` is the input data.\n//\n//   Default is pipe-forwarded data.\n//\n// ## Return the last non-null value\n//\n// ```\n// import \"experimental\"\n//\n// data\n//   |> experimental.last()\n// ```\n//\n// # Input data\n//  _time | _value\n//  --- | ---\n//  2021-01-01T00:00:00Z | 1.2\n//  2021-01-01T00:01:00Z | 0.6\n//  2021-01-01T00:02:00Z | 2.3\n//  2021-01-01T00:03:00Z | 0.9\n//\n// # Output data\n//  _time | _value\n//  --- | ---\n//  2021-01-01T00:03:00Z | 0.9\n//\nbuiltin last : (<-tables: [{T with _value: A}]) => [{T with _value: A}]\n\n// max is a function that returns the record with the highest value in the _value\n//  column for each input table.\n//\n//  max function is subject to change at any time. By using this function, you\n//  accept the risks of experimental functions.\n//\n// ## Empty tables\n// experimental.max() drops empty tables.\n//\n// ## Parameters\n// - `tables` is the input data.\n//\n//   Default is pipe-forwarded data.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// data\n//   |> experimental.max()\n// ```\n//\n// # Input data\n//  _time | _value\n//  --- | ---\n//  2021-01-01T00:00:00Z | 1.2\n//  2021-01-01T00:01:00Z | 0.6\n//  2021-01-01T00:02:00Z | 2.3\n//  2021-01-01T00:03:00Z | 0.9\n//\n// # Output table\n//  _time | _value\n//  --- | ---\n//  2021-01-01T00:02:00Z | 2.3\n//\nbuiltin max : (<-tables: [{T with _value: A}]) => [{T with _value: A}]\n\n// min is a function that returns the record with the lowest value in the\n//  _value column for each input table.\n//\n//  min function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Empty tables\n// experimental.min() drops empty tables.\n//\n// ## Parameters\n// - `tables` is the input data.\n//\n//   Default is pipe-forwarded data.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// data\n//   |> experimental.min()\n// ```\n//\n// # Input data\n//  _time | _value\n//  --- | ---\n//  2021-01-01T00:00:00Z | 1.2\n//  2021-01-01T00:01:00Z | 0.6\n//  2021-01-01T00:02:00Z | 2.3\n//  2021-01-01T00:03:00Z | 0.9\n//\n// # Output data\n//  _time | _value\n//  --- | ---\n//  2021-01-01T00:01:00Z | 0.6\n//\nbuiltin min : (<-tables: [{T with _value: A}]) => [{T with _value: A}]\n\n// unique is a function that returns all records containing unique values in the\n//  _value column.\n//\n//  null is considered a unique value.\n//\n//  unique function is subject to change at any time. By using this function,\n//  you accept the risks of experimental functions.\n//\n// ## Output schema\n// experimental.unique() outputs a single table for each input table and does\n// the following:\n//\n// - Outputs a single record for each unique value.\n// - Leaves group keys, columns, and values unmodified.\n//\n// ## Empty tables\n// experimental.unique() drops empty tables.\n//\n// ## Example\n//\n// ```\n// import \"experimental\"\n//\n// data\n//  |> experimental.unique()\n// ```\n//\n// # Input table\n//  _time | _field | _value\n//  --- | --- | ---\n//  2021-01-01T00:00:00Z | ver | v1\n//  2021-01-01T00:01:00Z | ver | v1\n//  2021-01-01T00:02:00Z | ver | v2\n//  2021-01-01T00:03:00Z | ver | \n//  2021-01-01T00:04:00Z | ver | v3\n//  2021-01-01T00:05:00Z | ver | v3\n//\n// # Output table\n//  _time | _field | _value\n//  --- | --- | ---\n//  2021-01-01T00:00:00Z | ver | v1\n//  2021-01-01T00:02:00Z | ver | v2\n//  2021-01-01T00:03:00Z | ver | \n//  2021-01-01T00:04:00Z | ver | v3\n//\nbuiltin unique : (<-tables: [{T with _value: A}]) => [{T with _value: A}]\n\n// histogram is a function that approximates the cumulative distribution of a\n//  dataset by counting data frequencies for a list of bins.\n//\n//  A bin is defined by an upper bound where all data points that are less than\n//  or equal to the bound are counted in the bin. Bin counts are cumulative.\n//\n// ## Output schema\n// experimental.histogram() outputs a single table for each input table. Each\n// output table represents a unique histogram. Output tables have the same group\n// key as the corresponding input table.\n//\n//  The function does the following:\n//  - Drops columns that are not part of the group key.\n//  - Adds an le column to store upper bound values.\n//  - Stores bin counts in the _value column.\n//\n// ## Parameters\n// - `bins` is a list of upper bounds to use when computing the histogram frequencies,\n//   including the maximum value of the data set.\n//\n//   This value can be set to positive infinity if no maximum is known.\n//   Bin helper functions (the following can be used to generate bins):\n//   - linearBins()\n//   - logarithmicBins()\n//\n// - `normalize` can convert values into frequency values between 0 and 1.\n//\n//   Default is false.\n//\n// - `tables` is the input data.\n//\n//   Default is pipe-forwarded data.\n//\n// ## Histogram with dynamically generated bins\n//\n// ```\n// import \"experimental\"\n//\n// data\n//   |> experimental.histogram(\n//     bins: linearBins(start:0.0, width:20.0, count:5)\n//   )\n// ```\n//\n// # Input data\n//  _time | host | _value\n//  --- | --- | ---\n//  2021-01-01T00:00:00Z | host1 | 33.4\n//  2021-01-01T00:01:00Z | host1 | 57.2\n//  2021-01-01T00:02:00Z | host1 | 78.1\n//  2021-01-01T00:03:00Z | host1 | 79.6\n//\n//  _time | host | _value\n//  --- | --- | ---\n//  2021-01-01T00:00:00Z | host2 | 10.3\n//  2021-01-01T00:01:00Z | host2 | 19.8\n//  2021-01-01T00:02:00Z | host2 | 54.6\n//  2021-01-01T00:03:00Z | host2 | 56.9\n//\n// # Output data\n//  host | le | _value\n//  --- | --- | ---\n//  host1 | 0 | 0\n//  host1 | 20 | 0\n//  host1 | 40 | 1\n//  host1 | 60 | 2\n//  host1 | 80 | 4\n//  host1 | +Inf | 4\n//\n//  host | le | _value\n//  --- | --- | ---\n//  host2 | 0 | 0\n//  host2 | 20 | 2\n//  host2 | 40 | 2\n//  host2 | 60 | 4\n//  host2 | 80 | 4\n//  host2 | +Inf | 4\n//\nbuiltin histogram",
				Start: ast.Position{
					Column: 1,
					Line:   3,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// addDuration is a function that adds a duration to a time value and returns\n"}, ast.Comment{Text: "//  the resulting time value.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  addDuration function is subject to change at any time. By using this funciton,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  This function will be removed once duration vectors are implementated.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `d` is the duration to add.\n"}, ast.Comment{Text: "// - `to` is the time to add the duration to.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// experimental.addDuration(\n"}, ast.Comment{Text: "//   d: 12h,\n"}, ast.Comment{Text: "//   to: now(),\n"}, ast.Comment{Text: "// )\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Add six hours to a timestamp\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// experimental.addDuration(\n"}, ast.Comment{Text: "//   d: 6h,\n"}, ast.Comment{Text: "//   to: 2019-09-16T12:00:00Z,\n"}, ast.Comment{Text: "// )\n"}, ast.Comment{Text: "// // Returns 2019-09-16T18:00:00.000000000Z\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   40,
					},
					File:   "experimental.flux",
					Source: "builtin addDuration",
					Start: ast.Position{
						Column: 1,
						Line:   40,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   40,
						},
						File:   "experimental.flux",
						Source: "addDuration",
						Start: ast.Position{
							Column: 9,
							Line:   40,
						},
					},
				},
				Name: "addDuration",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 54,
							Line:   40,
						},
						File:   "experimental.flux",
						Source: "(d: duration, to: time) => time",
						Start: ast.Position{
							Column: 23,
							Line:   40,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 54,
								Line:   40,
							},
							File:   "experimental.flux",
							Source: "(d: duration, to: time) => time",
							Start: ast.Position{
								Column: 23,
								Line:   40,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   40,
								},
								File:   "experimental.flux",
								Source: "d: duration",
								Start: ast.Position{
									Column: 24,
									Line:   40,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   40,
									},
									File:   "experimental.flux",
									Source: "d",
									Start: ast.Position{
										Column: 24,
										Line:   40,
									},
								},
							},
							Name: "d",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   40,
									},
									File:   "experimental.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 27,
										Line:   40,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   40,
										},
										File:   "experimental.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 27,
											Line:   40,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   40,
								},
								File:   "experimental.flux",
								Source: "to: time",
								Start: ast.Position{
									Column: 37,
									Line:   40,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   40,
									},
									File:   "experimental.flux",
									Source: "to",
									Start: ast.Position{
										Column: 37,
										Line:   40,
									},
								},
							},
							Name: "to",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   40,
									},
									File:   "experimental.flux",
									Source: "time",
									Start: ast.Position{
										Column: 41,
										Line:   40,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   40,
										},
										File:   "experimental.flux",
										Source: "time",
										Start: ast.Position{
											Column: 41,
											Line:   40,
										},
									},
								},
								Name: "time",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   40,
								},
								File:   "experimental.flux",
								Source: "time",
								Start: ast.Position{
									Column: 50,
									Line:   40,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   40,
									},
									File:   "experimental.flux",
									Source: "time",
									Start: ast.Position{
										Column: 50,
										Line:   40,
									},
								},
							},
							Name: "time",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// subDuration is a function that subtracts a duration from a time value\n"}, ast.Comment{Text: "//  and returns the resulting time value.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  subDuration function is subject to change at any time. By using this\n"}, ast.Comment{Text: "//  function, you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  This funciton will be removed once duration vectors are impemented.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `d` is the duration to subtract.\n"}, ast.Comment{Text: "// - `from` is the time to subtract the duration from.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// experimental.subDuration(\n"}, ast.Comment{Text: "//   d: 12h,\n"}, ast.Comment{Text: "//   from: now(),\n"}, ast.Comment{Text: "// )\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Subtract six hours from a timestamp\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// experimental.subDuration(\n"}, ast.Comment{Text: "//   d: 6h,\n"}, ast.Comment{Text: "//   from: 2019-09-16T12:00:00Z,\n"}, ast.Comment{Text: "// )\n"}, ast.Comment{Text: "// // Returns 2019-09-16T06:00:00.000000000Z\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   76,
					},
					File:   "experimental.flux",
					Source: "builtin subDuration",
					Start: ast.Position{
						Column: 1,
						Line:   76,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   76,
						},
						File:   "experimental.flux",
						Source: "subDuration",
						Start: ast.Position{
							Column: 9,
							Line:   76,
						},
					},
				},
				Name: "subDuration",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 56,
							Line:   76,
						},
						File:   "experimental.flux",
						Source: "(d: duration, from: time) => time",
						Start: ast.Position{
							Column: 23,
							Line:   76,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 56,
								Line:   76,
							},
							File:   "experimental.flux",
							Source: "(d: duration, from: time) => time",
							Start: ast.Position{
								Column: 23,
								Line:   76,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   76,
								},
								File:   "experimental.flux",
								Source: "d: duration",
								Start: ast.Position{
									Column: 24,
									Line:   76,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   76,
									},
									File:   "experimental.flux",
									Source: "d",
									Start: ast.Position{
										Column: 24,
										Line:   76,
									},
								},
							},
							Name: "d",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   76,
									},
									File:   "experimental.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 27,
										Line:   76,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   76,
										},
										File:   "experimental.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 27,
											Line:   76,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   76,
								},
								File:   "experimental.flux",
								Source: "from: time",
								Start: ast.Position{
									Column: 37,
									Line:   76,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   76,
									},
									File:   "experimental.flux",
									Source: "from",
									Start: ast.Position{
										Column: 37,
										Line:   76,
									},
								},
							},
							Name: "from",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   76,
									},
									File:   "experimental.flux",
									Source: "time",
									Start: ast.Position{
										Column: 43,
										Line:   76,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   76,
										},
										File:   "experimental.flux",
										Source: "time",
										Start: ast.Position{
											Column: 43,
											Line:   76,
										},
									},
								},
								Name: "time",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   76,
								},
								File:   "experimental.flux",
								Source: "time",
								Start: ast.Position{
									Column: 52,
									Line:   76,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   76,
									},
									File:   "experimental.flux",
									Source: "time",
									Start: ast.Position{
										Column: 52,
										Line:   76,
									},
								},
							},
							Name: "time",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// group is a function that introduces an extended mode to the existing group()\n"}, ast.Comment{Text: "//  funciton.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  group function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  This function will be removed once the proposed extend mode is sufficiently\n"}, ast.Comment{Text: "//  vetted.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `mode` is the mode used to group columns.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Appends columns defined in the columns parameter to all existing group keys.\n"}, ast.Comment{Text: "//   extend is the only mode available to experimental.group()\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `columns` is a list of columns to use in the grouping operation.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Defaults to [].\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Include the value column in each group's group key\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -1m)\n"}, ast.Comment{Text: "//   |> experimental.group(columns: [\"_value\"], mode: \"extend\")\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   106,
					},
					File:   "experimental.flux",
					Source: "builtin group",
					Start: ast.Position{
						Column: 1,
						Line:   106,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   106,
						},
						File:   "experimental.flux",
						Source: "group",
						Start: ast.Position{
							Column: 9,
							Line:   106,
						},
					},
				},
				Name: "group",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 88,
							Line:   106,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [A], mode: string, columns: [string]) => [A] where A: Record",
						Start: ast.Position{
							Column: 17,
							Line:   106,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 88,
								Line:   106,
							},
							File:   "experimental.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 79,
								Line:   106,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   106,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 82,
									Line:   106,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   106,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 79,
									Line:   106,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   106,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [A], mode: string, columns: [string]) => [A]",
							Start: ast.Position{
								Column: 17,
								Line:   106,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   106,
								},
								File:   "experimental.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 18,
									Line:   106,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   106,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 20,
										Line:   106,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   106,
									},
									File:   "experimental.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 28,
										Line:   106,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   106,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 29,
											Line:   106,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   106,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 29,
												Line:   106,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   106,
								},
								File:   "experimental.flux",
								Source: "mode: string",
								Start: ast.Position{
									Column: 33,
									Line:   106,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   106,
									},
									File:   "experimental.flux",
									Source: "mode",
									Start: ast.Position{
										Column: 33,
										Line:   106,
									},
								},
							},
							Name: "mode",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   106,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 39,
										Line:   106,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   106,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 39,
											Line:   106,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   106,
								},
								File:   "experimental.flux",
								Source: "columns: [string]",
								Start: ast.Position{
									Column: 47,
									Line:   106,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   106,
									},
									File:   "experimental.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 47,
										Line:   106,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   106,
									},
									File:   "experimental.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 56,
										Line:   106,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   106,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 57,
											Line:   106,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 63,
												Line:   106,
											},
											File:   "experimental.flux",
											Source: "string",
											Start: ast.Position{
												Column: 57,
												Line:   106,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   106,
								},
								File:   "experimental.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 69,
									Line:   106,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   106,
									},
									File:   "experimental.flux",
									Source: "A",
									Start: ast.Position{
										Column: 70,
										Line:   106,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 71,
											Line:   106,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 70,
											Line:   106,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// objectKeys is a function that returns an array of keys in a\n"}, ast.Comment{Text: "//  specified record.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  objectKeys function is subject to change at any time. By using\n"}, ast.Comment{Text: "//  this function, you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `o` is the record to return keys from.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Return all keys in a record\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// user = {\n"}, ast.Comment{Text: "//   firstName: \"John\",\n"}, ast.Comment{Text: "//   lastName: \"Doe\",\n"}, ast.Comment{Text: "//   age: 42\n"}, ast.Comment{Text: "// }\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// experimental.objectKeys(o: user)\n"}, ast.Comment{Text: "// // Returns [firstName, lastName, age]\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   131,
					},
					File:   "experimental.flux",
					Source: "builtin objectKeys",
					Start: ast.Position{
						Column: 1,
						Line:   131,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   131,
						},
						File:   "experimental.flux",
						Source: "objectKeys",
						Start: ast.Position{
							Column: 9,
							Line:   131,
						},
					},
				},
				Name: "objectKeys",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 56,
							Line:   131,
						},
						File:   "experimental.flux",
						Source: "(o: A) => [string] where A: Record",
						Start: ast.Position{
							Column: 22,
							Line:   131,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 56,
								Line:   131,
							},
							File:   "experimental.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 47,
								Line:   131,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   131,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 50,
									Line:   131,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   131,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 47,
									Line:   131,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   131,
							},
							File:   "experimental.flux",
							Source: "(o: A) => [string]",
							Start: ast.Position{
								Column: 22,
								Line:   131,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   131,
								},
								File:   "experimental.flux",
								Source: "o: A",
								Start: ast.Position{
									Column: 23,
									Line:   131,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   131,
									},
									File:   "experimental.flux",
									Source: "o",
									Start: ast.Position{
										Column: 23,
										Line:   131,
									},
								},
							},
							Name: "o",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   131,
									},
									File:   "experimental.flux",
									Source: "A",
									Start: ast.Position{
										Column: 26,
										Line:   131,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   131,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 26,
											Line:   131,
										},
									},
								},
								Name: "A",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   131,
								},
								File:   "experimental.flux",
								Source: "[string]",
								Start: ast.Position{
									Column: 32,
									Line:   131,
								},
							},
						},
						ElementType: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   131,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 33,
										Line:   131,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   131,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 33,
											Line:   131,
										},
									},
								},
								Name: "string",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// set is a function that sets multiple static column values on all records.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  If a column already exists, the function updates the existing value. If\n"}, ast.Comment{Text: "//  a column does not exist, the function adds it with the specified value.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  set function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  Once sufficiently vetted, experimental.set() will replace the existing\n"}, ast.Comment{Text: "//  set() function.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `o` is a record that defines the columns and values to set.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   The key of each key-value pair defines the column name. The value of each\n"}, ast.Comment{Text: "//   key-value pair defines the column value.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Set values for multiple columns\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// data\n"}, ast.Comment{Text: "//   |> experimental.set(\n"}, ast.Comment{Text: "//     o: {\n"}, ast.Comment{Text: "//       _field: \"temperature\",\n"}, ast.Comment{Text: "//       unit: \"°F\",\n"}, ast.Comment{Text: "//       location: \"San Francisco\"\n"}, ast.Comment{Text: "//     }\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Example input table\n"}, ast.Comment{Text: "// _time | _field | _value\n"}, ast.Comment{Text: "// --- | --- | ---\n"}, ast.Comment{Text: "// 2019-09-16T12:00:00Z | temp | 71.2\n"}, ast.Comment{Text: "// 2019-09-17T12:00:00Z\t| temp | 68.4\n"}, ast.Comment{Text: "// 2019-09-18T12:00:00Z | temp | 70.8\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Example output table\n"}, ast.Comment{Text: "// _time | _field | _value | unit | location\n"}, ast.Comment{Text: "// 2019-09-16T12:00:00Z\t| temperature | 71.2 | °F | San Fransisco\n"}, ast.Comment{Text: "// 2019-09-17T12:00:00Z | temperature | 68.4 | °F | San Fransisco\n"}, ast.Comment{Text: "// 2019-09-18T12:00:00Z | temperature | 70.8 | °F | San Fransisco\n"}, ast.Comment{Text: "//\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   178,
					},
					File:   "experimental.flux",
					Source: "builtin set",
					Start: ast.Position{
						Column: 1,
						Line:   178,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   178,
						},
						File:   "experimental.flux",
						Source: "set",
						Start: ast.Position{
							Column: 9,
							Line:   178,
						},
					},
				},
				Name: "set",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 81,
							Line:   178,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [A], o: B) => [C] where A: Record, B: Record, C: Record",
						Start: ast.Position{
							Column: 15,
							Line:   178,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 59,
								Line:   178,
							},
							File:   "experimental.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 50,
								Line:   178,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   178,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 53,
									Line:   178,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   178,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 50,
									Line:   178,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 70,
								Line:   178,
							},
							File:   "experimental.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 61,
								Line:   178,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   178,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 64,
									Line:   178,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   178,
								},
								File:   "experimental.flux",
								Source: "B",
								Start: ast.Position{
									Column: 61,
									Line:   178,
								},
							},
						},
						Name: "B",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 81,
								Line:   178,
							},
							File:   "experimental.flux",
							Source: "C: Record",
							Start: ast.Position{
								Column: 72,
								Line:   178,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   178,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 75,
									Line:   178,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 73,
									Line:   178,
								},
								File:   "experimental.flux",
								Source: "C",
								Start: ast.Position{
									Column: 72,
									Line:   178,
								},
							},
						},
						Name: "C",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   178,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [A], o: B) => [C]",
							Start: ast.Position{
								Column: 15,
								Line:   178,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   178,
								},
								File:   "experimental.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 16,
									Line:   178,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   178,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 18,
										Line:   178,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   178,
									},
									File:   "experimental.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 26,
										Line:   178,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   178,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 27,
											Line:   178,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   178,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 27,
												Line:   178,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   178,
								},
								File:   "experimental.flux",
								Source: "o: B",
								Start: ast.Position{
									Column: 31,
									Line:   178,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   178,
									},
									File:   "experimental.flux",
									Source: "o",
									Start: ast.Position{
										Column: 31,
										Line:   178,
									},
								},
							},
							Name: "o",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   178,
									},
									File:   "experimental.flux",
									Source: "B",
									Start: ast.Position{
										Column: 34,
										Line:   178,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   178,
										},
										File:   "experimental.flux",
										Source: "B",
										Start: ast.Position{
											Column: 34,
											Line:   178,
										},
									},
								},
								Name: "B",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   178,
								},
								File:   "experimental.flux",
								Source: "[C]",
								Start: ast.Position{
									Column: 40,
									Line:   178,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   178,
									},
									File:   "experimental.flux",
									Source: "C",
									Start: ast.Position{
										Column: 41,
										Line:   178,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   178,
										},
										File:   "experimental.flux",
										Source: "C",
										Start: ast.Position{
											Column: 41,
											Line:   178,
										},
									},
								},
								Name: "C",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// to is a function that writes data to an InfluxDB v2.0 bucket, but in a\n"}, ast.Comment{Text: "//  different structure than the built-in to() function.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  to function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `bucket` is the bucket to write data to.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   bucket and bucketID are mutually exclusive.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `bucketID` is the ID of the bucket to write the data to.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `org` is the organization name of the specified bucket.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Only required when writing to a different organization or a remote\n"}, ast.Comment{Text: "//   host. org and orgID are mutually exclusive.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `orgID` is the organization ID of the specified bucket.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Only required when writing to a different organization or a remote\n"}, ast.Comment{Text: "//   host. orgID and org are mutually exclusive.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Expected data structure\n"}, ast.Comment{Text: "// # Data structure expected by built-in to()\n"}, ast.Comment{Text: "//  The built-in to() function requires _time, _measurement, _field, and\n"}, ast.Comment{Text: "//  _value columns. The _field column stores the field key and the _value\n"}, ast.Comment{Text: "//  column stores the field value.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  _time | _measurement | _field | _value\n"}, ast.Comment{Text: "//  --- | --- | --- | ---\n"}, ast.Comment{Text: "//  timestamp | measurement-name | field key | field value\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Data structre expected by experimental to()\n"}, ast.Comment{Text: "//  experimental.to() requires _time and _measurement columns, but the field\n"}, ast.Comment{Text: "//  keys and values are stored in single columns with the field key as the\n"}, ast.Comment{Text: "//  column name and the field value as the column value.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  _time | _measurement | _field_key\n"}, ast.Comment{Text: "//  --- | --- | ---\n"}, ast.Comment{Text: "//  timestamp | measurement-name | field value\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// if using the built-in from() function, use the pivot() to transform data\n"}, ast.Comment{Text: "// into the structure experimental.to() expects.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// experimental.to(\n"}, ast.Comment{Text: "//   bucket: \"my-bucket\",\n"}, ast.Comment{Text: "//   org: \"my-org\"\n"}, ast.Comment{Text: "// )\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// // OR\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// experimental.to(\n"}, ast.Comment{Text: "//   bucketID: \"1234567890\",\n"}, ast.Comment{Text: "//   orgID: \"0987654321\"\n"}, ast.Comment{Text: "// )\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Use pivot() to shape the data for experimental.to()\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -1h)\n"}, ast.Comment{Text: "//   |> pivot(\n"}, ast.Comment{Text: "//       rowKey:[\"_time\"],\n"}, ast.Comment{Text: "//       columnKey: [\"_field\"],\n"}, ast.Comment{Text: "//       valueColumn: \"_value\")\n"}, ast.Comment{Text: "//   |> experimental.to(\n"}, ast.Comment{Text: "//       bucket: \"bucket-name\",\n"}, ast.Comment{Text: "//       org: \"org-name\"\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 11,
						Line:   259,
					},
					File:   "experimental.flux",
					Source: "builtin to",
					Start: ast.Position{
						Column: 1,
						Line:   259,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   259,
						},
						File:   "experimental.flux",
						Source: "to",
						Start: ast.Position{
							Column: 9,
							Line:   259,
						},
					},
				},
				Name: "to",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   268,
						},
						File:   "experimental.flux",
						Source: "(\n    <-tables: [A],\n    ?bucket: string,\n    ?bucketID: string,\n    ?org: string,\n    ?orgID: string,\n    ?host: string,\n    ?token: string,\n) => [A] where\n    A: Record",
						Start: ast.Position{
							Column: 14,
							Line:   259,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   268,
							},
							File:   "experimental.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 5,
								Line:   268,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   268,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 8,
									Line:   268,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   268,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 5,
									Line:   268,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 9,
								Line:   267,
							},
							File:   "experimental.flux",
							Source: "(\n    <-tables: [A],\n    ?bucket: string,\n    ?bucketID: string,\n    ?org: string,\n    ?orgID: string,\n    ?host: string,\n    ?token: string,\n) => [A]",
							Start: ast.Position{
								Column: 14,
								Line:   259,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   260,
								},
								File:   "experimental.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 5,
									Line:   260,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   260,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 7,
										Line:   260,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   260,
									},
									File:   "experimental.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 15,
										Line:   260,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   260,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 16,
											Line:   260,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   260,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 16,
												Line:   260,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   261,
								},
								File:   "experimental.flux",
								Source: "?bucket: string",
								Start: ast.Position{
									Column: 5,
									Line:   261,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   261,
									},
									File:   "experimental.flux",
									Source: "bucket",
									Start: ast.Position{
										Column: 6,
										Line:   261,
									},
								},
							},
							Name: "bucket",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   261,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 14,
										Line:   261,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   261,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 14,
											Line:   261,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   262,
								},
								File:   "experimental.flux",
								Source: "?bucketID: string",
								Start: ast.Position{
									Column: 5,
									Line:   262,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   262,
									},
									File:   "experimental.flux",
									Source: "bucketID",
									Start: ast.Position{
										Column: 6,
										Line:   262,
									},
								},
							},
							Name: "bucketID",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   262,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 16,
										Line:   262,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   262,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 16,
											Line:   262,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   263,
								},
								File:   "experimental.flux",
								Source: "?org: string",
								Start: ast.Position{
									Column: 5,
									Line:   263,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   263,
									},
									File:   "experimental.flux",
									Source: "org",
									Start: ast.Position{
										Column: 6,
										Line:   263,
									},
								},
							},
							Name: "org",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   263,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 11,
										Line:   263,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   263,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 11,
											Line:   263,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   264,
								},
								File:   "experimental.flux",
								Source: "?orgID: string",
								Start: ast.Position{
									Column: 5,
									Line:   264,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   264,
									},
									File:   "experimental.flux",
									Source: "orgID",
									Start: ast.Position{
										Column: 6,
										Line:   264,
									},
								},
							},
							Name: "orgID",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   264,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 13,
										Line:   264,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   264,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 13,
											Line:   264,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   265,
								},
								File:   "experimental.flux",
								Source: "?host: string",
								Start: ast.Position{
									Column: 5,
									Line:   265,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   265,
									},
									File:   "experimental.flux",
									Source: "host",
									Start: ast.Position{
										Column: 6,
										Line:   265,
									},
								},
							},
							Name: "host",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   265,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 12,
										Line:   265,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   265,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 12,
											Line:   265,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   266,
								},
								File:   "experimental.flux",
								Source: "?token: string",
								Start: ast.Position{
									Column: 5,
									Line:   266,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   266,
									},
									File:   "experimental.flux",
									Source: "token",
									Start: ast.Position{
										Column: 6,
										Line:   266,
									},
								},
							},
							Name: "token",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   266,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 13,
										Line:   266,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   266,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 13,
											Line:   266,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   267,
								},
								File:   "experimental.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 6,
									Line:   267,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   267,
									},
									File:   "experimental.flux",
									Source: "A",
									Start: ast.Position{
										Column: 7,
										Line:   267,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   267,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 7,
											Line:   267,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// An experimental version of join.\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   271,
					},
					File:   "experimental.flux",
					Source: "builtin join",
					Start: ast.Position{
						Column: 1,
						Line:   271,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   271,
						},
						File:   "experimental.flux",
						Source: "join",
						Start: ast.Position{
							Column: 9,
							Line:   271,
						},
					},
				},
				Name: "join",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 114,
							Line:   271,
						},
						File:   "experimental.flux",
						Source: "(left: [A], right: [B], fn: (left: A, right: B) => C) => [C] where A: Record, B: Record, C: Record",
						Start: ast.Position{
							Column: 16,
							Line:   271,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 92,
								Line:   271,
							},
							File:   "experimental.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 83,
								Line:   271,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 92,
									Line:   271,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 86,
									Line:   271,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 84,
									Line:   271,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 83,
									Line:   271,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 103,
								Line:   271,
							},
							File:   "experimental.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 94,
								Line:   271,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 103,
									Line:   271,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 97,
									Line:   271,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 95,
									Line:   271,
								},
								File:   "experimental.flux",
								Source: "B",
								Start: ast.Position{
									Column: 94,
									Line:   271,
								},
							},
						},
						Name: "B",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 114,
								Line:   271,
							},
							File:   "experimental.flux",
							Source: "C: Record",
							Start: ast.Position{
								Column: 105,
								Line:   271,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 114,
									Line:   271,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 108,
									Line:   271,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 106,
									Line:   271,
								},
								File:   "experimental.flux",
								Source: "C",
								Start: ast.Position{
									Column: 105,
									Line:   271,
								},
							},
						},
						Name: "C",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 76,
								Line:   271,
							},
							File:   "experimental.flux",
							Source: "(left: [A], right: [B], fn: (left: A, right: B) => C) => [C]",
							Start: ast.Position{
								Column: 16,
								Line:   271,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   271,
								},
								File:   "experimental.flux",
								Source: "left: [A]",
								Start: ast.Position{
									Column: 17,
									Line:   271,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   271,
									},
									File:   "experimental.flux",
									Source: "left",
									Start: ast.Position{
										Column: 17,
										Line:   271,
									},
								},
							},
							Name: "left",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   271,
									},
									File:   "experimental.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 23,
										Line:   271,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   271,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 24,
											Line:   271,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   271,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 24,
												Line:   271,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   271,
								},
								File:   "experimental.flux",
								Source: "right: [B]",
								Start: ast.Position{
									Column: 28,
									Line:   271,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   271,
									},
									File:   "experimental.flux",
									Source: "right",
									Start: ast.Position{
										Column: 28,
										Line:   271,
									},
								},
							},
							Name: "right",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   271,
									},
									File:   "experimental.flux",
									Source: "[B]",
									Start: ast.Position{
										Column: 35,
										Line:   271,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   271,
										},
										File:   "experimental.flux",
										Source: "B",
										Start: ast.Position{
											Column: 36,
											Line:   271,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   271,
											},
											File:   "experimental.flux",
											Source: "B",
											Start: ast.Position{
												Column: 36,
												Line:   271,
											},
										},
									},
									Name: "B",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   271,
								},
								File:   "experimental.flux",
								Source: "fn: (left: A, right: B) => C",
								Start: ast.Position{
									Column: 40,
									Line:   271,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   271,
									},
									File:   "experimental.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 40,
										Line:   271,
									},
								},
							},
							Name: "fn",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   271,
									},
									File:   "experimental.flux",
									Source: "(left: A, right: B) => C",
									Start: ast.Position{
										Column: 44,
										Line:   271,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   271,
										},
										File:   "experimental.flux",
										Source: "left: A",
										Start: ast.Position{
											Column: 45,
											Line:   271,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   271,
											},
											File:   "experimental.flux",
											Source: "left",
											Start: ast.Position{
												Column: 45,
												Line:   271,
											},
										},
									},
									Name: "left",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   271,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 51,
												Line:   271,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 52,
													Line:   271,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 51,
													Line:   271,
												},
											},
										},
										Name: "A",
									},
								},
							}, &ast.ParameterType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   271,
										},
										File:   "experimental.flux",
										Source: "right: B",
										Start: ast.Position{
											Column: 54,
											Line:   271,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   271,
											},
											File:   "experimental.flux",
											Source: "right",
											Start: ast.Position{
												Column: 54,
												Line:   271,
											},
										},
									},
									Name: "right",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   271,
											},
											File:   "experimental.flux",
											Source: "B",
											Start: ast.Position{
												Column: 61,
												Line:   271,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 62,
													Line:   271,
												},
												File:   "experimental.flux",
												Source: "B",
												Start: ast.Position{
													Column: 61,
													Line:   271,
												},
											},
										},
										Name: "B",
									},
								},
							}},
							Return: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   271,
										},
										File:   "experimental.flux",
										Source: "C",
										Start: ast.Position{
											Column: 67,
											Line:   271,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   271,
											},
											File:   "experimental.flux",
											Source: "C",
											Start: ast.Position{
												Column: 67,
												Line:   271,
											},
										},
									},
									Name: "C",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 76,
									Line:   271,
								},
								File:   "experimental.flux",
								Source: "[C]",
								Start: ast.Position{
									Column: 73,
									Line:   271,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   271,
									},
									File:   "experimental.flux",
									Source: "C",
									Start: ast.Position{
										Column: 74,
										Line:   271,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 75,
											Line:   271,
										},
										File:   "experimental.flux",
										Source: "C",
										Start: ast.Position{
											Column: 74,
											Line:   271,
										},
									},
								},
								Name: "C",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   272,
					},
					File:   "experimental.flux",
					Source: "builtin chain",
					Start: ast.Position{
						Column: 1,
						Line:   272,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   272,
						},
						File:   "experimental.flux",
						Source: "chain",
						Start: ast.Position{
							Column: 9,
							Line:   272,
						},
					},
				},
				Name: "chain",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 76,
							Line:   272,
						},
						File:   "experimental.flux",
						Source: "(first: [A], second: [B]) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 17,
							Line:   272,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 65,
								Line:   272,
							},
							File:   "experimental.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 56,
								Line:   272,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 65,
									Line:   272,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 59,
									Line:   272,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   272,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 56,
									Line:   272,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 76,
								Line:   272,
							},
							File:   "experimental.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 67,
								Line:   272,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 76,
									Line:   272,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 70,
									Line:   272,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   272,
								},
								File:   "experimental.flux",
								Source: "B",
								Start: ast.Position{
									Column: 67,
									Line:   272,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   272,
							},
							File:   "experimental.flux",
							Source: "(first: [A], second: [B]) => [B]",
							Start: ast.Position{
								Column: 17,
								Line:   272,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   272,
								},
								File:   "experimental.flux",
								Source: "first: [A]",
								Start: ast.Position{
									Column: 18,
									Line:   272,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   272,
									},
									File:   "experimental.flux",
									Source: "first",
									Start: ast.Position{
										Column: 18,
										Line:   272,
									},
								},
							},
							Name: "first",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   272,
									},
									File:   "experimental.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 25,
										Line:   272,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   272,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 26,
											Line:   272,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   272,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 26,
												Line:   272,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   272,
								},
								File:   "experimental.flux",
								Source: "second: [B]",
								Start: ast.Position{
									Column: 30,
									Line:   272,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   272,
									},
									File:   "experimental.flux",
									Source: "second",
									Start: ast.Position{
										Column: 30,
										Line:   272,
									},
								},
							},
							Name: "second",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   272,
									},
									File:   "experimental.flux",
									Source: "[B]",
									Start: ast.Position{
										Column: 38,
										Line:   272,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   272,
										},
										File:   "experimental.flux",
										Source: "B",
										Start: ast.Position{
											Column: 39,
											Line:   272,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   272,
											},
											File:   "experimental.flux",
											Source: "B",
											Start: ast.Position{
												Column: 39,
												Line:   272,
											},
										},
									},
									Name: "B",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   272,
								},
								File:   "experimental.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 46,
									Line:   272,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   272,
									},
									File:   "experimental.flux",
									Source: "B",
									Start: ast.Position{
										Column: 47,
										Line:   272,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   272,
										},
										File:   "experimental.flux",
										Source: "B",
										Start: ast.Position{
											Column: 47,
											Line:   272,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 35,
						Line:   349,
					},
					File:   "experimental.flux",
					Source: "alignTime = (tables=<-, alignTo=time(v: 0)) => tables\n    |> stateDuration(\n        fn: (r) => true,\n        column: \"timeDiff\",\n        unit: 1ns,\n    )\n    |> map(fn: (r) => ({r with _time: time(v: int(v: alignTo) + r.timeDiff)}))\n    |> drop(columns: [\"timeDiff\"])",
					Start: ast.Position{
						Column: 1,
						Line:   342,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// alignTime is a function that aligns input tables to a common start time.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  alignTime function is subject to change at any time. By using this\n"}, ast.Comment{Text: "//  function, you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `alignTo` is the UTC time to align tables to.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Defaults to 1970-01-01T00:00:00Z.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// experimental.alignTime(\n"}, ast.Comment{Text: "//   alignTo: 1970-01-01T00:00:00.000000000Z\n"}, ast.Comment{Text: "// )\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Compare values month-over-month\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -12mo)\n"}, ast.Comment{Text: "//   |> filter(fn: (r) => r._measurement == \"example-measurement\")\n"}, ast.Comment{Text: "//   |> window(every: 1mo)\n"}, ast.Comment{Text: "//   |> experimental.alignTime()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Given the following input\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// _time | _value\n"}, ast.Comment{Text: "// --- | ---\n"}, ast.Comment{Text: "// 2020-01-01T00:00:00Z | 32.1\n"}, ast.Comment{Text: "// 2020-01-02T00:00:00Z | 32.9\n"}, ast.Comment{Text: "// 2020-01-03T00:00:00Z | 33.2\n"}, ast.Comment{Text: "// 2020-01-04T00:00:00Z | 34.0\n"}, ast.Comment{Text: "// 2020-02-01T00:00:00Z | 38.3\n"}, ast.Comment{Text: "// 2020-02-02T00:00:00Z | 38.4\n"}, ast.Comment{Text: "// 2020-02-03T00:00:00Z | 37.8\n"}, ast.Comment{Text: "// 2020-02-04T00:00:00Z | 37.5\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # The following functions\n"}, ast.Comment{Text: "//  1. Window data by calendar month creating two separate tables.\n"}, ast.Comment{Text: "//  2. Align tables to 2020-01-01T00:00:00Z.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Output\n"}, ast.Comment{Text: "// _time | _value\n"}, ast.Comment{Text: "// --- | ---\n"}, ast.Comment{Text: "// 2020-01-01T00:00:00Z | 32.1\n"}, ast.Comment{Text: "// 2020-01-02T00:00:00Z | 32.9\n"}, ast.Comment{Text: "// 2020-01-03T00:00:00Z | 33.2\n"}, ast.Comment{Text: "// 2020-01-04T00:00:00Z | 34.0\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// _time | _value\n"}, ast.Comment{Text: "// --- | ---\n"}, ast.Comment{Text: "// 2020-01-01T00:00:00Z | 38.3\n"}, ast.Comment{Text: "// 2020-01-02T00:00:00Z | 38.4\n"}, ast.Comment{Text: "// 2020-01-03T00:00:00Z | 37.8\n"}, ast.Comment{Text: "// 2020-01-04T00:00:00Z | 37.5\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// Each output table represents data from a calendr month. When visualized,\n"}, ast.Comment{Text: "// data is still grouped by month, but timestamps are aligned to a common start\n"}, ast.Comment{Text: "// time and values can be compared by time.\n"}, ast.Comment{Text: "//\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   342,
						},
						File:   "experimental.flux",
						Source: "alignTime",
						Start: ast.Position{
							Column: 1,
							Line:   342,
						},
					},
				},
				Name: "alignTime",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 35,
							Line:   349,
						},
						File:   "experimental.flux",
						Source: "(tables=<-, alignTo=time(v: 0)) => tables\n    |> stateDuration(\n        fn: (r) => true,\n        column: \"timeDiff\",\n        unit: 1ns,\n    )\n    |> map(fn: (r) => ({r with _time: time(v: int(v: alignTo) + r.timeDiff)}))\n    |> drop(columns: [\"timeDiff\"])",
						Start: ast.Position{
							Column: 13,
							Line:   342,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   342,
										},
										File:   "experimental.flux",
										Source: "tables",
										Start: ast.Position{
											Column: 48,
											Line:   342,
										},
									},
								},
								Name: "tables",
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   347,
									},
									File:   "experimental.flux",
									Source: "tables\n    |> stateDuration(\n        fn: (r) => true,\n        column: \"timeDiff\",\n        unit: 1ns,\n    )",
									Start: ast.Position{
										Column: 48,
										Line:   342,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   346,
											},
											File:   "experimental.flux",
											Source: "fn: (r) => true,\n        column: \"timeDiff\",\n        unit: 1ns",
											Start: ast.Position{
												Column: 9,
												Line:   344,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   344,
												},
												File:   "experimental.flux",
												Source: "fn: (r) => true",
												Start: ast.Position{
													Column: 9,
													Line:   344,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   344,
													},
													File:   "experimental.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 9,
														Line:   344,
													},
												},
											},
											Name: "fn",
										},
										Separator: nil,
										Value: &ast.FunctionExpression{
											Arrow: nil,
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   344,
													},
													File:   "experimental.flux",
													Source: "(r) => true",
													Start: ast.Position{
														Column: 13,
														Line:   344,
													},
												},
											},
											Body: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   344,
														},
														File:   "experimental.flux",
														Source: "true",
														Start: ast.Position{
															Column: 20,
															Line:   344,
														},
													},
												},
												Name: "true",
											},
											Lparen: nil,
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   344,
														},
														File:   "experimental.flux",
														Source: "r",
														Start: ast.Position{
															Column: 14,
															Line:   344,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 15,
																Line:   344,
															},
															File:   "experimental.flux",
															Source: "r",
															Start: ast.Position{
																Column: 14,
																Line:   344,
															},
														},
													},
													Name: "r",
												},
												Separator: nil,
												Value:     nil,
											}},
											Rparan: nil,
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   345,
												},
												File:   "experimental.flux",
												Source: "column: \"timeDiff\"",
												Start: ast.Position{
													Column: 9,
													Line:   345,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   345,
													},
													File:   "experimental.flux",
													Source: "column",
													Start: ast.Position{
														Column: 9,
														Line:   345,
													},
												},
											},
											Name: "column",
										},
										Separator: nil,
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   345,
													},
													File:   "experimental.flux",
													Source: "\"timeDiff\"",
													Start: ast.Position{
														Column: 17,
														Line:   345,
													},
												},
											},
											Value: "timeDiff",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   346,
												},
												File:   "experimental.flux",
												Source: "unit: 1ns",
												Start: ast.Position{
													Column: 9,
													Line:   346,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   346,
													},
													File:   "experimental.flux",
													Source: "unit",
													Start: ast.Position{
														Column: 9,
														Line:   346,
													},
												},
											},
											Name: "unit",
										},
										Separator: nil,
										Value: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   346,
													},
													File:   "experimental.flux",
													Source: "1ns",
													Start: ast.Position{
														Column: 15,
														Line:   346,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(1),
												Unit:      "ns",
											}},
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   347,
										},
										File:   "experimental.flux",
										Source: "stateDuration(\n        fn: (r) => true,\n        column: \"timeDiff\",\n        unit: 1ns,\n    )",
										Start: ast.Position{
											Column: 8,
											Line:   343,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   343,
											},
											File:   "experimental.flux",
											Source: "stateDuration",
											Start: ast.Position{
												Column: 8,
												Line:   343,
											},
										},
									},
									Name: "stateDuration",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 79,
									Line:   348,
								},
								File:   "experimental.flux",
								Source: "tables\n    |> stateDuration(\n        fn: (r) => true,\n        column: \"timeDiff\",\n        unit: 1ns,\n    )\n    |> map(fn: (r) => ({r with _time: time(v: int(v: alignTo) + r.timeDiff)}))",
								Start: ast.Position{
									Column: 48,
									Line:   342,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 78,
											Line:   348,
										},
										File:   "experimental.flux",
										Source: "fn: (r) => ({r with _time: time(v: int(v: alignTo) + r.timeDiff)})",
										Start: ast.Position{
											Column: 12,
											Line:   348,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 78,
												Line:   348,
											},
											File:   "experimental.flux",
											Source: "fn: (r) => ({r with _time: time(v: int(v: alignTo) + r.timeDiff)})",
											Start: ast.Position{
												Column: 12,
												Line:   348,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   348,
												},
												File:   "experimental.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 12,
													Line:   348,
												},
											},
										},
										Name: "fn",
									},
									Separator: nil,
									Value: &ast.FunctionExpression{
										Arrow: nil,
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 78,
													Line:   348,
												},
												File:   "experimental.flux",
												Source: "(r) => ({r with _time: time(v: int(v: alignTo) + r.timeDiff)})",
												Start: ast.Position{
													Column: 16,
													Line:   348,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 78,
														Line:   348,
													},
													File:   "experimental.flux",
													Source: "({r with _time: time(v: int(v: alignTo) + r.timeDiff)})",
													Start: ast.Position{
														Column: 23,
														Line:   348,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 77,
															Line:   348,
														},
														File:   "experimental.flux",
														Source: "{r with _time: time(v: int(v: alignTo) + r.timeDiff)}",
														Start: ast.Position{
															Column: 24,
															Line:   348,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 76,
																Line:   348,
															},
															File:   "experimental.flux",
															Source: "_time: time(v: int(v: alignTo) + r.timeDiff)",
															Start: ast.Position{
																Column: 32,
																Line:   348,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   348,
																},
																File:   "experimental.flux",
																Source: "_time",
																Start: ast.Position{
																	Column: 32,
																	Line:   348,
																},
															},
														},
														Name: "_time",
													},
													Separator: nil,
													Value: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 75,
																		Line:   348,
																	},
																	File:   "experimental.flux",
																	Source: "v: int(v: alignTo) + r.timeDiff",
																	Start: ast.Position{
																		Column: 44,
																		Line:   348,
																	},
																},
															},
															Lbrace: nil,
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 75,
																			Line:   348,
																		},
																		File:   "experimental.flux",
																		Source: "v: int(v: alignTo) + r.timeDiff",
																		Start: ast.Position{
																			Column: 44,
																			Line:   348,
																		},
																	},
																},
																Comma: nil,
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 45,
																				Line:   348,
																			},
																			File:   "experimental.flux",
																			Source: "v",
																			Start: ast.Position{
																				Column: 44,
																				Line:   348,
																			},
																		},
																	},
																	Name: "v",
																},
																Separator: nil,
																Value: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 75,
																				Line:   348,
																			},
																			File:   "experimental.flux",
																			Source: "int(v: alignTo) + r.timeDiff",
																			Start: ast.Position{
																				Column: 47,
																				Line:   348,
																			},
																		},
																	},
																	Left: &ast.CallExpression{
																		Arguments: []ast.Expression{&ast.ObjectExpression{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 61,
																						Line:   348,
																					},
																					File:   "experimental.flux",
																					Source: "v: alignTo",
																					Start: ast.Position{
																						Column: 51,
																						Line:   348,
																					},
																				},
																			},
																			Lbrace: nil,
																			Properties: []*ast.Property{&ast.Property{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 61,
																							Line:   348,
																						},
																						File:   "experimental.flux",
																						Source: "v: alignTo",
																						Start: ast.Position{
																							Column: 51,
																							Line:   348,
																						},
																					},
																				},
																				Comma: nil,
																				Key: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Comments: nil,
																						Errors:   nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 52,
																								Line:   348,
																							},
																							File:   "experimental.flux",
																							Source: "v",
																							Start: ast.Position{
																								Column: 51,
																								Line:   348,
																							},
																						},
																					},
																					Name: "v",
																				},
																				Separator: nil,
																				Value: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Comments: nil,
																						Errors:   nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 61,
																								Line:   348,
																							},
																							File:   "experimental.flux",
																							Source: "alignTo",
																							Start: ast.Position{
																								Column: 54,
																								Line:   348,
																							},
																						},
																					},
																					Name: "alignTo",
																				},
																			}},
																			Rbrace: nil,
																			With:   nil,
																		}},
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 62,
																					Line:   348,
																				},
																				File:   "experimental.flux",
																				Source: "int(v: alignTo)",
																				Start: ast.Position{
																					Column: 47,
																					Line:   348,
																				},
																			},
																		},
																		Callee: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 50,
																						Line:   348,
																					},
																					File:   "experimental.flux",
																					Source: "int",
																					Start: ast.Position{
																						Column: 47,
																						Line:   348,
																					},
																				},
																			},
																			Name: "int",
																		},
																		Lparen: nil,
																		Rparen: nil,
																	},
																	Operator: 5,
																	Right: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 75,
																					Line:   348,
																				},
																				File:   "experimental.flux",
																				Source: "r.timeDiff",
																				Start: ast.Position{
																					Column: 65,
																					Line:   348,
																				},
																			},
																		},
																		Lbrack: nil,
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 66,
																						Line:   348,
																					},
																					File:   "experimental.flux",
																					Source: "r",
																					Start: ast.Position{
																						Column: 65,
																						Line:   348,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 75,
																						Line:   348,
																					},
																					File:   "experimental.flux",
																					Source: "timeDiff",
																					Start: ast.Position{
																						Column: 67,
																						Line:   348,
																					},
																				},
																			},
																			Name: "timeDiff",
																		},
																		Rbrack: nil,
																	},
																},
															}},
															Rbrace: nil,
															With:   nil,
														}},
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 76,
																	Line:   348,
																},
																File:   "experimental.flux",
																Source: "time(v: int(v: alignTo) + r.timeDiff)",
																Start: ast.Position{
																	Column: 39,
																	Line:   348,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   348,
																	},
																	File:   "experimental.flux",
																	Source: "time",
																	Start: ast.Position{
																		Column: 39,
																		Line:   348,
																	},
																},
															},
															Name: "time",
														},
														Lparen: nil,
														Rparen: nil,
													},
												}},
												Rbrace: nil,
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 26,
																Line:   348,
															},
															File:   "experimental.flux",
															Source: "r",
															Start: ast.Position{
																Column: 25,
																Line:   348,
															},
														},
													},
													Name: "r",
												},
											},
											Lparen: nil,
											Rparen: nil,
										},
										Lparen: nil,
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   348,
													},
													File:   "experimental.flux",
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   348,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   348,
														},
														File:   "experimental.flux",
														Source: "r",
														Start: ast.Position{
															Column: 17,
															Line:   348,
														},
													},
												},
												Name: "r",
											},
											Separator: nil,
											Value:     nil,
										}},
										Rparan: nil,
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   348,
									},
									File:   "experimental.flux",
									Source: "map(fn: (r) => ({r with _time: time(v: int(v: alignTo) + r.timeDiff)}))",
									Start: ast.Position{
										Column: 8,
										Line:   348,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   348,
										},
										File:   "experimental.flux",
										Source: "map",
										Start: ast.Position{
											Column: 8,
											Line:   348,
										},
									},
								},
								Name: "map",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   349,
							},
							File:   "experimental.flux",
							Source: "tables\n    |> stateDuration(\n        fn: (r) => true,\n        column: \"timeDiff\",\n        unit: 1ns,\n    )\n    |> map(fn: (r) => ({r with _time: time(v: int(v: alignTo) + r.timeDiff)}))\n    |> drop(columns: [\"timeDiff\"])",
							Start: ast.Position{
								Column: 48,
								Line:   342,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   349,
									},
									File:   "experimental.flux",
									Source: "columns: [\"timeDiff\"]",
									Start: ast.Position{
										Column: 13,
										Line:   349,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   349,
										},
										File:   "experimental.flux",
										Source: "columns: [\"timeDiff\"]",
										Start: ast.Position{
											Column: 13,
											Line:   349,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   349,
											},
											File:   "experimental.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 13,
												Line:   349,
											},
										},
									},
									Name: "columns",
								},
								Separator: nil,
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   349,
											},
											File:   "experimental.flux",
											Source: "[\"timeDiff\"]",
											Start: ast.Position{
												Column: 22,
												Line:   349,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   349,
												},
												File:   "experimental.flux",
												Source: "\"timeDiff\"",
												Start: ast.Position{
													Column: 23,
													Line:   349,
												},
											},
										},
										Value: "timeDiff",
									}},
									Lbrack: nil,
									Rbrack: nil,
								},
							}},
							Rbrace: nil,
							With:   nil,
						}},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   349,
								},
								File:   "experimental.flux",
								Source: "drop(columns: [\"timeDiff\"])",
								Start: ast.Position{
									Column: 8,
									Line:   349,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   349,
									},
									File:   "experimental.flux",
									Source: "drop",
									Start: ast.Position{
										Column: 8,
										Line:   349,
									},
								},
							},
							Name: "drop",
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   342,
							},
							File:   "experimental.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 14,
								Line:   342,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   342,
								},
								File:   "experimental.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 14,
									Line:   342,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   342,
							},
							File:   "experimental.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 21,
								Line:   342,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   342,
							},
							File:   "experimental.flux",
							Source: "alignTo=time(v: 0)",
							Start: ast.Position{
								Column: 25,
								Line:   342,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   342,
								},
								File:   "experimental.flux",
								Source: "alignTo",
								Start: ast.Position{
									Column: 25,
									Line:   342,
								},
							},
						},
						Name: "alignTo",
					},
					Separator: nil,
					Value: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   342,
									},
									File:   "experimental.flux",
									Source: "v: 0",
									Start: ast.Position{
										Column: 38,
										Line:   342,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   342,
										},
										File:   "experimental.flux",
										Source: "v: 0",
										Start: ast.Position{
											Column: 38,
											Line:   342,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   342,
											},
											File:   "experimental.flux",
											Source: "v",
											Start: ast.Position{
												Column: 38,
												Line:   342,
											},
										},
									},
									Name: "v",
								},
								Separator: nil,
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   342,
											},
											File:   "experimental.flux",
											Source: "0",
											Start: ast.Position{
												Column: 41,
												Line:   342,
											},
										},
									},
									Value: int64(0),
								},
							}},
							Rbrace: nil,
							With:   nil,
						}},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   342,
								},
								File:   "experimental.flux",
								Source: "time(v: 0)",
								Start: ast.Position{
									Column: 33,
									Line:   342,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   342,
									},
									File:   "experimental.flux",
									Source: "time",
									Start: ast.Position{
										Column: 33,
										Line:   342,
									},
								},
							},
							Name: "time",
						},
						Lparen: nil,
						Rparen: nil,
					},
				}},
				Rparan: nil,
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// window is a function that groups records based on a time value.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  New columns are added to uniquely identify each window. Those columns are\n"}, ast.Comment{Text: "//  added to the group key of the output tables. Input tables must have _start\n"}, ast.Comment{Text: "//  _stop, and _time columns. \n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  A single input record will be placed into zero or more output tables, depending\n"}, ast.Comment{Text: "//  on the specific windowing function.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  By default the start boundary of a window will align with the unix epoch\n"}, ast.Comment{Text: "//  (zero time) modified by the offset of the location option.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  window function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `every` is the duration of time between windows.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Defaults to period value.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `period` is the duration of the window.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Period is the length of each interval. It can be negative, indicating the\n"}, ast.Comment{Text: "//   start and stop boundaries are reversed. Defaults to every value.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `offset` is the duration by which to shift the window boundaries.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   It can be negative, indicating that the offset goes backwards in time.\n"}, ast.Comment{Text: "//   Defaults to 0, which will align window end boundaries with the every\n"}, ast.Comment{Text: "//   duration.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `createEmpty` specifies whether empty tables should be created.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Defaults to false.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Parameters\n"}, ast.Comment{Text: "//  every, period, and offset support support all valid duration units,\n"}, ast.Comment{Text: "//  including calendar months (1mo) and years (1y).\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// window(\n"}, ast.Comment{Text: "//   every: 5m,\n"}, ast.Comment{Text: "//   period: 5m,\n"}, ast.Comment{Text: "//   offset: 12h,\n"}, ast.Comment{Text: "//   createEmpty: false\n"}, ast.Comment{Text: "// )\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Window data into 10 minute intervals\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// from(bucket:\"example-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -12h)\n"}, ast.Comment{Text: "//   |> window(every: 10m)\n"}, ast.Comment{Text: "//   // ...\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Window by calendar month\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// from(bucket:\"example-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -1y)\n"}, ast.Comment{Text: "//   |> window(every: 1mo)\n"}, ast.Comment{Text: "//   // ...\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   418,
					},
					File:   "experimental.flux",
					Source: "builtin window",
					Start: ast.Position{
						Column: 1,
						Line:   418,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   418,
						},
						File:   "experimental.flux",
						Source: "window",
						Start: ast.Position{
							Column: 9,
							Line:   418,
						},
					},
				},
				Name: "window",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 55,
							Line:   424,
						},
						File:   "experimental.flux",
						Source: "(\n    <-tables: [{T with _start: time, _stop: time, _time: time}],\n    ?every: duration,\n    ?period: duration,\n    ?offset: duration,\n    ?createEmpty: bool,\n) => [{T with _start: time, _stop: time, _time: time}]",
						Start: ast.Position{
							Column: 18,
							Line:   418,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 55,
								Line:   424,
							},
							File:   "experimental.flux",
							Source: "(\n    <-tables: [{T with _start: time, _stop: time, _time: time}],\n    ?every: duration,\n    ?period: duration,\n    ?offset: duration,\n    ?createEmpty: bool,\n) => [{T with _start: time, _stop: time, _time: time}]",
							Start: ast.Position{
								Column: 18,
								Line:   418,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   419,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _start: time, _stop: time, _time: time}]",
								Start: ast.Position{
									Column: 5,
									Line:   419,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   419,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 7,
										Line:   419,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   419,
									},
									File:   "experimental.flux",
									Source: "[{T with _start: time, _stop: time, _time: time}]",
									Start: ast.Position{
										Column: 15,
										Line:   419,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   419,
										},
										File:   "experimental.flux",
										Source: "{T with _start: time, _stop: time, _time: time}",
										Start: ast.Position{
											Column: 16,
											Line:   419,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   419,
											},
											File:   "experimental.flux",
											Source: "_start: time",
											Start: ast.Position{
												Column: 24,
												Line:   419,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   419,
												},
												File:   "experimental.flux",
												Source: "_start",
												Start: ast.Position{
													Column: 24,
													Line:   419,
												},
											},
										},
										Name: "_start",
									},
									Ty: &ast.NamedType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   419,
												},
												File:   "experimental.flux",
												Source: "time",
												Start: ast.Position{
													Column: 32,
													Line:   419,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   419,
													},
													File:   "experimental.flux",
													Source: "time",
													Start: ast.Position{
														Column: 32,
														Line:   419,
													},
												},
											},
											Name: "time",
										},
									},
								}, &ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   419,
											},
											File:   "experimental.flux",
											Source: "_stop: time",
											Start: ast.Position{
												Column: 38,
												Line:   419,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   419,
												},
												File:   "experimental.flux",
												Source: "_stop",
												Start: ast.Position{
													Column: 38,
													Line:   419,
												},
											},
										},
										Name: "_stop",
									},
									Ty: &ast.NamedType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   419,
												},
												File:   "experimental.flux",
												Source: "time",
												Start: ast.Position{
													Column: 45,
													Line:   419,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   419,
													},
													File:   "experimental.flux",
													Source: "time",
													Start: ast.Position{
														Column: 45,
														Line:   419,
													},
												},
											},
											Name: "time",
										},
									},
								}, &ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   419,
											},
											File:   "experimental.flux",
											Source: "_time: time",
											Start: ast.Position{
												Column: 51,
												Line:   419,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   419,
												},
												File:   "experimental.flux",
												Source: "_time",
												Start: ast.Position{
													Column: 51,
													Line:   419,
												},
											},
										},
										Name: "_time",
									},
									Ty: &ast.NamedType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 62,
													Line:   419,
												},
												File:   "experimental.flux",
												Source: "time",
												Start: ast.Position{
													Column: 58,
													Line:   419,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 62,
														Line:   419,
													},
													File:   "experimental.flux",
													Source: "time",
													Start: ast.Position{
														Column: 58,
														Line:   419,
													},
												},
											},
											Name: "time",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   419,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 17,
												Line:   419,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   420,
								},
								File:   "experimental.flux",
								Source: "?every: duration",
								Start: ast.Position{
									Column: 5,
									Line:   420,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   420,
									},
									File:   "experimental.flux",
									Source: "every",
									Start: ast.Position{
										Column: 6,
										Line:   420,
									},
								},
							},
							Name: "every",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   420,
									},
									File:   "experimental.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 13,
										Line:   420,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   420,
										},
										File:   "experimental.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 13,
											Line:   420,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   421,
								},
								File:   "experimental.flux",
								Source: "?period: duration",
								Start: ast.Position{
									Column: 5,
									Line:   421,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   421,
									},
									File:   "experimental.flux",
									Source: "period",
									Start: ast.Position{
										Column: 6,
										Line:   421,
									},
								},
							},
							Name: "period",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   421,
									},
									File:   "experimental.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 14,
										Line:   421,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   421,
										},
										File:   "experimental.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 14,
											Line:   421,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   422,
								},
								File:   "experimental.flux",
								Source: "?offset: duration",
								Start: ast.Position{
									Column: 5,
									Line:   422,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   422,
									},
									File:   "experimental.flux",
									Source: "offset",
									Start: ast.Position{
										Column: 6,
										Line:   422,
									},
								},
							},
							Name: "offset",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   422,
									},
									File:   "experimental.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 14,
										Line:   422,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   422,
										},
										File:   "experimental.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 14,
											Line:   422,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   423,
								},
								File:   "experimental.flux",
								Source: "?createEmpty: bool",
								Start: ast.Position{
									Column: 5,
									Line:   423,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   423,
									},
									File:   "experimental.flux",
									Source: "createEmpty",
									Start: ast.Position{
										Column: 6,
										Line:   423,
									},
								},
							},
							Name: "createEmpty",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   423,
									},
									File:   "experimental.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 19,
										Line:   423,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   423,
										},
										File:   "experimental.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 19,
											Line:   423,
										},
									},
								},
								Name: "bool",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   424,
								},
								File:   "experimental.flux",
								Source: "[{T with _start: time, _stop: time, _time: time}]",
								Start: ast.Position{
									Column: 6,
									Line:   424,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   424,
									},
									File:   "experimental.flux",
									Source: "{T with _start: time, _stop: time, _time: time}",
									Start: ast.Position{
										Column: 7,
										Line:   424,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   424,
										},
										File:   "experimental.flux",
										Source: "_start: time",
										Start: ast.Position{
											Column: 15,
											Line:   424,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   424,
											},
											File:   "experimental.flux",
											Source: "_start",
											Start: ast.Position{
												Column: 15,
												Line:   424,
											},
										},
									},
									Name: "_start",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   424,
											},
											File:   "experimental.flux",
											Source: "time",
											Start: ast.Position{
												Column: 23,
												Line:   424,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   424,
												},
												File:   "experimental.flux",
												Source: "time",
												Start: ast.Position{
													Column: 23,
													Line:   424,
												},
											},
										},
										Name: "time",
									},
								},
							}, &ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   424,
										},
										File:   "experimental.flux",
										Source: "_stop: time",
										Start: ast.Position{
											Column: 29,
											Line:   424,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   424,
											},
											File:   "experimental.flux",
											Source: "_stop",
											Start: ast.Position{
												Column: 29,
												Line:   424,
											},
										},
									},
									Name: "_stop",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   424,
											},
											File:   "experimental.flux",
											Source: "time",
											Start: ast.Position{
												Column: 36,
												Line:   424,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   424,
												},
												File:   "experimental.flux",
												Source: "time",
												Start: ast.Position{
													Column: 36,
													Line:   424,
												},
											},
										},
										Name: "time",
									},
								},
							}, &ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   424,
										},
										File:   "experimental.flux",
										Source: "_time: time",
										Start: ast.Position{
											Column: 42,
											Line:   424,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   424,
											},
											File:   "experimental.flux",
											Source: "_time",
											Start: ast.Position{
												Column: 42,
												Line:   424,
											},
										},
									},
									Name: "_time",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   424,
											},
											File:   "experimental.flux",
											Source: "time",
											Start: ast.Position{
												Column: 49,
												Line:   424,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   424,
												},
												File:   "experimental.flux",
												Source: "time",
												Start: ast.Position{
													Column: 49,
													Line:   424,
												},
											},
										},
										Name: "time",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   424,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 8,
											Line:   424,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// integral is a function that computes the area under the curve per unit of\n"}, ast.Comment{Text: "//  time of subsequent non-null records.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  The curve is defined using _time as the domain and record values as the\n"}, ast.Comment{Text: "//  range. Input tables must have _time and _value columns.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  integral function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `unit` is the time duration used to compute the integral.\n"}, ast.Comment{Text: "// - `interpolate` is the type of interpolation to use.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Defaults to \"\".\n"}, ast.Comment{Text: "//   Use one of the following interpolation options:\n"}, ast.Comment{Text: "//    - empty string for no interpolation.\n"}, ast.Comment{Text: "//    - linear.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Calculate the integral\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -5m)\n"}, ast.Comment{Text: "//   |> filter(fn: (r) =>\n"}, ast.Comment{Text: "//     r._measurement == \"cpu\" and\n"}, ast.Comment{Text: "//     r._field == \"usage_system\"\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "//   |> integral(unit:10s)\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Calculate the integral with linear interpolation\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -5m)\n"}, ast.Comment{Text: "//   |> filter(fn: (r) =>\n"}, ast.Comment{Text: "//     r._measurement == \"cpu\" and\n"}, ast.Comment{Text: "//     r._field == \"usage_system\"\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "//   |> integral(unit:10s, interpolate: \"linear\")\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   467,
					},
					File:   "experimental.flux",
					Source: "builtin integral",
					Start: ast.Position{
						Column: 1,
						Line:   467,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   467,
						},
						File:   "experimental.flux",
						Source: "integral",
						Start: ast.Position{
							Column: 9,
							Line:   467,
						},
					},
				},
				Name: "integral",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 128,
							Line:   467,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _time: time, _value: B}], ?unit: duration, ?interpolate: string) => [{T with _value: B}]",
						Start: ast.Position{
							Column: 20,
							Line:   467,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 128,
								Line:   467,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _time: time, _value: B}], ?unit: duration, ?interpolate: string) => [{T with _value: B}]",
							Start: ast.Position{
								Column: 20,
								Line:   467,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   467,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _time: time, _value: B}]",
								Start: ast.Position{
									Column: 21,
									Line:   467,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   467,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 23,
										Line:   467,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   467,
									},
									File:   "experimental.flux",
									Source: "[{T with _time: time, _value: B}]",
									Start: ast.Position{
										Column: 31,
										Line:   467,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   467,
										},
										File:   "experimental.flux",
										Source: "{T with _time: time, _value: B}",
										Start: ast.Position{
											Column: 32,
											Line:   467,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   467,
											},
											File:   "experimental.flux",
											Source: "_time: time",
											Start: ast.Position{
												Column: 40,
												Line:   467,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   467,
												},
												File:   "experimental.flux",
												Source: "_time",
												Start: ast.Position{
													Column: 40,
													Line:   467,
												},
											},
										},
										Name: "_time",
									},
									Ty: &ast.NamedType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   467,
												},
												File:   "experimental.flux",
												Source: "time",
												Start: ast.Position{
													Column: 47,
													Line:   467,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   467,
													},
													File:   "experimental.flux",
													Source: "time",
													Start: ast.Position{
														Column: 47,
														Line:   467,
													},
												},
											},
											Name: "time",
										},
									},
								}, &ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   467,
											},
											File:   "experimental.flux",
											Source: "_value: B",
											Start: ast.Position{
												Column: 53,
												Line:   467,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   467,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 53,
													Line:   467,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 62,
													Line:   467,
												},
												File:   "experimental.flux",
												Source: "B",
												Start: ast.Position{
													Column: 61,
													Line:   467,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 62,
														Line:   467,
													},
													File:   "experimental.flux",
													Source: "B",
													Start: ast.Position{
														Column: 61,
														Line:   467,
													},
												},
											},
											Name: "B",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   467,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 33,
												Line:   467,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   467,
								},
								File:   "experimental.flux",
								Source: "?unit: duration",
								Start: ast.Position{
									Column: 66,
									Line:   467,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   467,
									},
									File:   "experimental.flux",
									Source: "unit",
									Start: ast.Position{
										Column: 67,
										Line:   467,
									},
								},
							},
							Name: "unit",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   467,
									},
									File:   "experimental.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 73,
										Line:   467,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 81,
											Line:   467,
										},
										File:   "experimental.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 73,
											Line:   467,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 103,
									Line:   467,
								},
								File:   "experimental.flux",
								Source: "?interpolate: string",
								Start: ast.Position{
									Column: 83,
									Line:   467,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 95,
										Line:   467,
									},
									File:   "experimental.flux",
									Source: "interpolate",
									Start: ast.Position{
										Column: 84,
										Line:   467,
									},
								},
							},
							Name: "interpolate",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 103,
										Line:   467,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 97,
										Line:   467,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 103,
											Line:   467,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 97,
											Line:   467,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 128,
									Line:   467,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: B}]",
								Start: ast.Position{
									Column: 108,
									Line:   467,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 127,
										Line:   467,
									},
									File:   "experimental.flux",
									Source: "{T with _value: B}",
									Start: ast.Position{
										Column: 109,
										Line:   467,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 126,
											Line:   467,
										},
										File:   "experimental.flux",
										Source: "_value: B",
										Start: ast.Position{
											Column: 117,
											Line:   467,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 123,
												Line:   467,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 117,
												Line:   467,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 126,
												Line:   467,
											},
											File:   "experimental.flux",
											Source: "B",
											Start: ast.Position{
												Column: 125,
												Line:   467,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 126,
													Line:   467,
												},
												File:   "experimental.flux",
												Source: "B",
												Start: ast.Position{
													Column: 125,
													Line:   467,
												},
											},
										},
										Name: "B",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 111,
											Line:   467,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 110,
											Line:   467,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// count is a function that outputs the number of records in each input table\n"}, ast.Comment{Text: "//  and returns the count in the _value column.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  This function counts both null and non-null records.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  count function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Empty tables\n"}, ast.Comment{Text: "// experimental.count() returns 0 for empty tables. to keep empty tables in\n"}, ast.Comment{Text: "// your data, set the following parameters for the following functions:\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// Function | Parameters\n"}, ast.Comment{Text: "// --- | ---\n"}, ast.Comment{Text: "// filter() | onEmpty: \"keep\"\n"}, ast.Comment{Text: "// window() | createEmpty: true\n"}, ast.Comment{Text: "// aggregateWindow() | createEmpty: true\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -5m)\n"}, ast.Comment{Text: "//   |> experimental.count()\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   496,
					},
					File:   "experimental.flux",
					Source: "builtin count",
					Start: ast.Position{
						Column: 1,
						Line:   496,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   496,
						},
						File:   "experimental.flux",
						Source: "count",
						Start: ast.Position{
							Column: 9,
							Line:   496,
						},
					},
				},
				Name: "count",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 75,
							Line:   496,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: A}]) => [{T with _value: int}]",
						Start: ast.Position{
							Column: 17,
							Line:   496,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 75,
								Line:   496,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: A}]) => [{T with _value: int}]",
							Start: ast.Position{
								Column: 17,
								Line:   496,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   496,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: A}]",
								Start: ast.Position{
									Column: 18,
									Line:   496,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   496,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 20,
										Line:   496,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   496,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: A}]",
									Start: ast.Position{
										Column: 28,
										Line:   496,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   496,
										},
										File:   "experimental.flux",
										Source: "{T with _value: A}",
										Start: ast.Position{
											Column: 29,
											Line:   496,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   496,
											},
											File:   "experimental.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 37,
												Line:   496,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   496,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 37,
													Line:   496,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   496,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 45,
													Line:   496,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   496,
													},
													File:   "experimental.flux",
													Source: "A",
													Start: ast.Position{
														Column: 45,
														Line:   496,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   496,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 30,
												Line:   496,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   496,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: int}]",
								Start: ast.Position{
									Column: 53,
									Line:   496,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 74,
										Line:   496,
									},
									File:   "experimental.flux",
									Source: "{T with _value: int}",
									Start: ast.Position{
										Column: 54,
										Line:   496,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 73,
											Line:   496,
										},
										File:   "experimental.flux",
										Source: "_value: int",
										Start: ast.Position{
											Column: 62,
											Line:   496,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   496,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 62,
												Line:   496,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 73,
												Line:   496,
											},
											File:   "experimental.flux",
											Source: "int",
											Start: ast.Position{
												Column: 70,
												Line:   496,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 73,
													Line:   496,
												},
												File:   "experimental.flux",
												Source: "int",
												Start: ast.Position{
													Column: 70,
													Line:   496,
												},
											},
										},
										Name: "int",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   496,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 55,
											Line:   496,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// histogramQuantile is a function that approximates a quantile given a histogram\n"}, ast.Comment{Text: "//  with the cumulative distribution of the dataset.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  Each input table represents a single histogram. Input tables must have two\n"}, ast.Comment{Text: "//  columns - a count column (_value) and an upper bound column (le), and neither\n"}, ast.Comment{Text: "//  column can be part of the group key.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  The count is the number of values that are less than or equal to the upper\n"}, ast.Comment{Text: "//  bound value (le). Input tables can have an unlimited number of records; each\n"}, ast.Comment{Text: "//  record represents an entry in the histogram. The count must be monotonically\n"}, ast.Comment{Text: "//  increasing when sorted by upper bound (le). If any values in the _value or le\n"}, ast.Comment{Text: "//  columns are null, the function returns an error.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  Linear interpolation between the two closest bounds is used to compute the\n"}, ast.Comment{Text: "//  quantile. If either of the bounds used in interpolation are infinite, then\n"}, ast.Comment{Text: "//  the other finite bound is used and no interpolation is performed.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  The output table has the same group key as the input table. The function returns\n"}, ast.Comment{Text: "//  the value of the specified quantile from the histogram in the _value column and\n"}, ast.Comment{Text: "//  drops all columns not part of the group key.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  histogramQuantile function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `quantile` is a value between 0 and 1 indicating the desired quantile to compute.\n"}, ast.Comment{Text: "// - `minValue` is the asumed minimum value of the dataset.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   When the quantile falls below the lowest upper bound, interpolation is performed\n"}, ast.Comment{Text: "//   between minValue and the lowest upper bound. When minValue is equal to negative\n"}, ast.Comment{Text: "//   infinity, the lowest upper bound is used. Defaults to 0.0\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Compute the 90th quantile\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -1d)\n"}, ast.Comment{Text: "//   |> filter(fn: (r) =>\n"}, ast.Comment{Text: "//     r._meausrement == \"example-measurement\" and\n"}, ast.Comment{Text: "//     r._field == \"example-field\"\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "//   |> experimental.histogramQuantile(quantile: 0.9)\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 26,
						Line:   543,
					},
					File:   "experimental.flux",
					Source: "builtin histogramQuantile",
					Start: ast.Position{
						Column: 1,
						Line:   543,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 26,
							Line:   543,
						},
						File:   "experimental.flux",
						Source: "histogramQuantile",
						Start: ast.Position{
							Column: 9,
							Line:   543,
						},
					},
				},
				Name: "histogramQuantile",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 140,
							Line:   543,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: float, le: float}], ?quantile: float, ?minValue: float) => [{T with _value: float}]",
						Start: ast.Position{
							Column: 29,
							Line:   543,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 140,
								Line:   543,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: float, le: float}], ?quantile: float, ?minValue: float) => [{T with _value: float}]",
							Start: ast.Position{
								Column: 29,
								Line:   543,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   543,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: float, le: float}]",
								Start: ast.Position{
									Column: 30,
									Line:   543,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   543,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 32,
										Line:   543,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   543,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: float, le: float}]",
									Start: ast.Position{
										Column: 40,
										Line:   543,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 74,
											Line:   543,
										},
										File:   "experimental.flux",
										Source: "{T with _value: float, le: float}",
										Start: ast.Position{
											Column: 41,
											Line:   543,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   543,
											},
											File:   "experimental.flux",
											Source: "_value: float",
											Start: ast.Position{
												Column: 49,
												Line:   543,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 55,
													Line:   543,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 49,
													Line:   543,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.NamedType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 62,
													Line:   543,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 57,
													Line:   543,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 62,
														Line:   543,
													},
													File:   "experimental.flux",
													Source: "float",
													Start: ast.Position{
														Column: 57,
														Line:   543,
													},
												},
											},
											Name: "float",
										},
									},
								}, &ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 73,
												Line:   543,
											},
											File:   "experimental.flux",
											Source: "le: float",
											Start: ast.Position{
												Column: 64,
												Line:   543,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   543,
												},
												File:   "experimental.flux",
												Source: "le",
												Start: ast.Position{
													Column: 64,
													Line:   543,
												},
											},
										},
										Name: "le",
									},
									Ty: &ast.NamedType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 73,
													Line:   543,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 68,
													Line:   543,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 73,
														Line:   543,
													},
													File:   "experimental.flux",
													Source: "float",
													Start: ast.Position{
														Column: 68,
														Line:   543,
													},
												},
											},
											Name: "float",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   543,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 42,
												Line:   543,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 93,
									Line:   543,
								},
								File:   "experimental.flux",
								Source: "?quantile: float",
								Start: ast.Position{
									Column: 77,
									Line:   543,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 86,
										Line:   543,
									},
									File:   "experimental.flux",
									Source: "quantile",
									Start: ast.Position{
										Column: 78,
										Line:   543,
									},
								},
							},
							Name: "quantile",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 93,
										Line:   543,
									},
									File:   "experimental.flux",
									Source: "float",
									Start: ast.Position{
										Column: 88,
										Line:   543,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 93,
											Line:   543,
										},
										File:   "experimental.flux",
										Source: "float",
										Start: ast.Position{
											Column: 88,
											Line:   543,
										},
									},
								},
								Name: "float",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   543,
								},
								File:   "experimental.flux",
								Source: "?minValue: float",
								Start: ast.Position{
									Column: 95,
									Line:   543,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 104,
										Line:   543,
									},
									File:   "experimental.flux",
									Source: "minValue",
									Start: ast.Position{
										Column: 96,
										Line:   543,
									},
								},
							},
							Name: "minValue",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   543,
									},
									File:   "experimental.flux",
									Source: "float",
									Start: ast.Position{
										Column: 106,
										Line:   543,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 111,
											Line:   543,
										},
										File:   "experimental.flux",
										Source: "float",
										Start: ast.Position{
											Column: 106,
											Line:   543,
										},
									},
								},
								Name: "float",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 140,
									Line:   543,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: float}]",
								Start: ast.Position{
									Column: 116,
									Line:   543,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 139,
										Line:   543,
									},
									File:   "experimental.flux",
									Source: "{T with _value: float}",
									Start: ast.Position{
										Column: 117,
										Line:   543,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 138,
											Line:   543,
										},
										File:   "experimental.flux",
										Source: "_value: float",
										Start: ast.Position{
											Column: 125,
											Line:   543,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 131,
												Line:   543,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 125,
												Line:   543,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 138,
												Line:   543,
											},
											File:   "experimental.flux",
											Source: "float",
											Start: ast.Position{
												Column: 133,
												Line:   543,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 138,
													Line:   543,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 133,
													Line:   543,
												},
											},
										},
										Name: "float",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 119,
											Line:   543,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 118,
											Line:   543,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// mean is a function that computes the mean or average of non-null values\n"}, ast.Comment{Text: "//  in the _value column of each input table.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  Output tables contain a single row with the calculated mean in the\n"}, ast.Comment{Text: "//  _value column.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  mean function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket:\"example-bucket\")\n"}, ast.Comment{Text: "//   |> filter(fn: (r) =>\n"}, ast.Comment{Text: "//     r._measurement == \"example-measurement\" and\n"}, ast.Comment{Text: "//     r._field == \"example-field\")\n"}, ast.Comment{Text: "//   |> range(start:-1h)\n"}, ast.Comment{Text: "//   |> experimental.mean()\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   566,
					},
					File:   "experimental.flux",
					Source: "builtin mean",
					Start: ast.Position{
						Column: 1,
						Line:   566,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   566,
						},
						File:   "experimental.flux",
						Source: "mean",
						Start: ast.Position{
							Column: 9,
							Line:   566,
						},
					},
				},
				Name: "mean",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 80,
							Line:   566,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: float}]) => [{T with _value: float}]",
						Start: ast.Position{
							Column: 16,
							Line:   566,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 80,
								Line:   566,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: float}]) => [{T with _value: float}]",
							Start: ast.Position{
								Column: 16,
								Line:   566,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   566,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: float}]",
								Start: ast.Position{
									Column: 17,
									Line:   566,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   566,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   566,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   566,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: float}]",
									Start: ast.Position{
										Column: 27,
										Line:   566,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   566,
										},
										File:   "experimental.flux",
										Source: "{T with _value: float}",
										Start: ast.Position{
											Column: 28,
											Line:   566,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   566,
											},
											File:   "experimental.flux",
											Source: "_value: float",
											Start: ast.Position{
												Column: 36,
												Line:   566,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   566,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 36,
													Line:   566,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.NamedType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   566,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 44,
													Line:   566,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   566,
													},
													File:   "experimental.flux",
													Source: "float",
													Start: ast.Position{
														Column: 44,
														Line:   566,
													},
												},
											},
											Name: "float",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   566,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 29,
												Line:   566,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   566,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: float}]",
								Start: ast.Position{
									Column: 56,
									Line:   566,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   566,
									},
									File:   "experimental.flux",
									Source: "{T with _value: float}",
									Start: ast.Position{
										Column: 57,
										Line:   566,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 78,
											Line:   566,
										},
										File:   "experimental.flux",
										Source: "_value: float",
										Start: ast.Position{
											Column: 65,
											Line:   566,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 71,
												Line:   566,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 65,
												Line:   566,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 78,
												Line:   566,
											},
											File:   "experimental.flux",
											Source: "float",
											Start: ast.Position{
												Column: 73,
												Line:   566,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 78,
													Line:   566,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 73,
													Line:   566,
												},
											},
										},
										Name: "float",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   566,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 58,
											Line:   566,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// mode is a function that computes the mode or value that occurs most often\n"}, ast.Comment{Text: "//  in the _value column in each input table.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  If there are multiple modes, it returns all of them in a sorted table. mode\n"}, ast.Comment{Text: "//  only considers non-null values. If there is no mode, experimental.mode()\n"}, ast.Comment{Text: "//  returns null.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  mode function is subject to change at any time. By using this function, you\n"}, ast.Comment{Text: "//  accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Supported data types\n"}, ast.Comment{Text: "// - String\n"}, ast.Comment{Text: "// - Float\n"}, ast.Comment{Text: "// - Integer\n"}, ast.Comment{Text: "// - UInteger\n"}, ast.Comment{Text: "// - Boolean\n"}, ast.Comment{Text: "// - Time\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Empty tables\n"}, ast.Comment{Text: "//  experimental.mode() drops empty tables.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Return the mode of windowed data\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "//   |> filter(fn: (r) =>\n"}, ast.Comment{Text: "//     r._measurement == \"example-measurement\" and\n"}, ast.Comment{Text: "//     r._field == \"example-field\"\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "//   |> range(start:-12h)\n"}, ast.Comment{Text: "//   |> window(every:10m)\n"}, ast.Comment{Text: "//   |> experimental.mode()\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   603,
					},
					File:   "experimental.flux",
					Source: "builtin mode",
					Start: ast.Position{
						Column: 1,
						Line:   603,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   603,
						},
						File:   "experimental.flux",
						Source: "mode",
						Start: ast.Position{
							Column: 9,
							Line:   603,
						},
					},
				},
				Name: "mode",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 72,
							Line:   603,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
						Start: ast.Position{
							Column: 16,
							Line:   603,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   603,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
							Start: ast.Position{
								Column: 16,
								Line:   603,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   603,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: A}]",
								Start: ast.Position{
									Column: 17,
									Line:   603,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   603,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   603,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   603,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: A}]",
									Start: ast.Position{
										Column: 27,
										Line:   603,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   603,
										},
										File:   "experimental.flux",
										Source: "{T with _value: A}",
										Start: ast.Position{
											Column: 28,
											Line:   603,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   603,
											},
											File:   "experimental.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 36,
												Line:   603,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   603,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 36,
													Line:   603,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   603,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 44,
													Line:   603,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   603,
													},
													File:   "experimental.flux",
													Source: "A",
													Start: ast.Position{
														Column: 44,
														Line:   603,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   603,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 29,
												Line:   603,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   603,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: A}]",
								Start: ast.Position{
									Column: 52,
									Line:   603,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   603,
									},
									File:   "experimental.flux",
									Source: "{T with _value: A}",
									Start: ast.Position{
										Column: 53,
										Line:   603,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   603,
										},
										File:   "experimental.flux",
										Source: "_value: A",
										Start: ast.Position{
											Column: 61,
											Line:   603,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   603,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 61,
												Line:   603,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   603,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 69,
												Line:   603,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 70,
													Line:   603,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 69,
													Line:   603,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   603,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 54,
											Line:   603,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// quantile is a function that outputs non-null records with the values in the\n"}, ast.Comment{Text: "//  _value column that fall within the specified quantile.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  Which it returns depends on the method used. The _value column must contain\n"}, ast.Comment{Text: "//  float values.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  When using the estimate_tdigest or exact_mean methods, the function outputs\n"}, ast.Comment{Text: "//  non-null records with values that fall within the specified quantile.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  When using the exact_selector method, it outputs the non-null record with the\n"}, ast.Comment{Text: "//  value that represents the specified quantile.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  quantile function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental funtions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `q` is a value between 0 and 1 that specifies the quantile.\n"}, ast.Comment{Text: "// - `method` is the computation method.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Default is estimate_tdigest.\n"}, ast.Comment{Text: "//   Available options are:\n"}, ast.Comment{Text: "//   - estimate_tdigest\n"}, ast.Comment{Text: "//   - exact_mean\n"}, ast.Comment{Text: "//   - exact_selector\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # estimate_tdigest\n"}, ast.Comment{Text: "//  An aggregate method that uses a t-digest data structure to compute an accurate\n"}, ast.Comment{Text: "//  quantile estimate on a large data source.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # exact_mean\n"}, ast.Comment{Text: "//  A aggregate method that takes the averge of the two points closest to the\n"}, ast.Comment{Text: "//  quantile value.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # exact_selector\n"}, ast.Comment{Text: "//  A selector method that returns the data point for which at least q points are\n"}, ast.Comment{Text: "//  less than.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## compression\n"}, ast.Comment{Text: "// Indicates how many centroids to use when compressing the dataset. A larger number\n"}, ast.Comment{Text: "// produces a more accurate result at the cost of increased memory requirements.\n"}, ast.Comment{Text: "// Defaults to 1000.0.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Quantile as an aggregate\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "// \t|> range(start: -5m)\n"}, ast.Comment{Text: "// \t|> filter(fn: (r) =>\n"}, ast.Comment{Text: "//     r._measurement == \"example-measurement\" and\n"}, ast.Comment{Text: "//     r._field == \"example-field\")\n"}, ast.Comment{Text: "// \t|> experimental.quantile(\n"}, ast.Comment{Text: "//     q: 0.99,\n"}, ast.Comment{Text: "//     method: \"estimate_tdigest\",\n"}, ast.Comment{Text: "//     compression: 1000.0\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Quantile as a selector\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "// \t|> range(start: -5m)\n"}, ast.Comment{Text: "// \t|> filter(fn: (r) =>\n"}, ast.Comment{Text: "//     r._measurement == \"example-measurement\" and\n"}, ast.Comment{Text: "//     r._field == \"example-field\")\n"}, ast.Comment{Text: "// \t|> experimental.quantile(\n"}, ast.Comment{Text: "//     q: 0.99,\n"}, ast.Comment{Text: "//     method: \"exact_selector\"\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   679,
					},
					File:   "experimental.flux",
					Source: "builtin quantile",
					Start: ast.Position{
						Column: 1,
						Line:   679,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   679,
						},
						File:   "experimental.flux",
						Source: "quantile",
						Start: ast.Position{
							Column: 9,
							Line:   679,
						},
					},
				},
				Name: "quantile",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 132,
							Line:   679,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: float}], q: float, ?compression: float, ?method: string) => [{T with _value: float}]",
						Start: ast.Position{
							Column: 20,
							Line:   679,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 132,
								Line:   679,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: float}], q: float, ?compression: float, ?method: string) => [{T with _value: float}]",
							Start: ast.Position{
								Column: 20,
								Line:   679,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   679,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: float}]",
								Start: ast.Position{
									Column: 21,
									Line:   679,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   679,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 23,
										Line:   679,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   679,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: float}]",
									Start: ast.Position{
										Column: 31,
										Line:   679,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   679,
										},
										File:   "experimental.flux",
										Source: "{T with _value: float}",
										Start: ast.Position{
											Column: 32,
											Line:   679,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   679,
											},
											File:   "experimental.flux",
											Source: "_value: float",
											Start: ast.Position{
												Column: 40,
												Line:   679,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   679,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 40,
													Line:   679,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.NamedType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   679,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 48,
													Line:   679,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 53,
														Line:   679,
													},
													File:   "experimental.flux",
													Source: "float",
													Start: ast.Position{
														Column: 48,
														Line:   679,
													},
												},
											},
											Name: "float",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   679,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 33,
												Line:   679,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 65,
									Line:   679,
								},
								File:   "experimental.flux",
								Source: "q: float",
								Start: ast.Position{
									Column: 57,
									Line:   679,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   679,
									},
									File:   "experimental.flux",
									Source: "q",
									Start: ast.Position{
										Column: 57,
										Line:   679,
									},
								},
							},
							Name: "q",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   679,
									},
									File:   "experimental.flux",
									Source: "float",
									Start: ast.Position{
										Column: 60,
										Line:   679,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   679,
										},
										File:   "experimental.flux",
										Source: "float",
										Start: ast.Position{
											Column: 60,
											Line:   679,
										},
									},
								},
								Name: "float",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   679,
								},
								File:   "experimental.flux",
								Source: "?compression: float",
								Start: ast.Position{
									Column: 67,
									Line:   679,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   679,
									},
									File:   "experimental.flux",
									Source: "compression",
									Start: ast.Position{
										Column: 68,
										Line:   679,
									},
								},
							},
							Name: "compression",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 86,
										Line:   679,
									},
									File:   "experimental.flux",
									Source: "float",
									Start: ast.Position{
										Column: 81,
										Line:   679,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 86,
											Line:   679,
										},
										File:   "experimental.flux",
										Source: "float",
										Start: ast.Position{
											Column: 81,
											Line:   679,
										},
									},
								},
								Name: "float",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 103,
									Line:   679,
								},
								File:   "experimental.flux",
								Source: "?method: string",
								Start: ast.Position{
									Column: 88,
									Line:   679,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 95,
										Line:   679,
									},
									File:   "experimental.flux",
									Source: "method",
									Start: ast.Position{
										Column: 89,
										Line:   679,
									},
								},
							},
							Name: "method",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 103,
										Line:   679,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 97,
										Line:   679,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 103,
											Line:   679,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 97,
											Line:   679,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 132,
									Line:   679,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: float}]",
								Start: ast.Position{
									Column: 108,
									Line:   679,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 131,
										Line:   679,
									},
									File:   "experimental.flux",
									Source: "{T with _value: float}",
									Start: ast.Position{
										Column: 109,
										Line:   679,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 130,
											Line:   679,
										},
										File:   "experimental.flux",
										Source: "_value: float",
										Start: ast.Position{
											Column: 117,
											Line:   679,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 123,
												Line:   679,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 117,
												Line:   679,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 130,
												Line:   679,
											},
											File:   "experimental.flux",
											Source: "float",
											Start: ast.Position{
												Column: 125,
												Line:   679,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 130,
													Line:   679,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 125,
													Line:   679,
												},
											},
										},
										Name: "float",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 111,
											Line:   679,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 110,
											Line:   679,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// skew is a function that outputs the skew of non-null values in the\n"}, ast.Comment{Text: "//  _value column for each input table as a float.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  skew function is subject to change at any time. By using this\n"}, ast.Comment{Text: "//  function, you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -5m)\n"}, ast.Comment{Text: "//   |> filter(fn: (r) =>\n"}, ast.Comment{Text: "//     r._measurement == \"example-measurement\" and\n"}, ast.Comment{Text: "//     r._field == \"example-field\"\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "//   |> experimental.skew()\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   700,
					},
					File:   "experimental.flux",
					Source: "builtin skew",
					Start: ast.Position{
						Column: 1,
						Line:   700,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   700,
						},
						File:   "experimental.flux",
						Source: "skew",
						Start: ast.Position{
							Column: 9,
							Line:   700,
						},
					},
				},
				Name: "skew",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 80,
							Line:   700,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: float}]) => [{T with _value: float}]",
						Start: ast.Position{
							Column: 16,
							Line:   700,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 80,
								Line:   700,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: float}]) => [{T with _value: float}]",
							Start: ast.Position{
								Column: 16,
								Line:   700,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   700,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: float}]",
								Start: ast.Position{
									Column: 17,
									Line:   700,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   700,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   700,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   700,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: float}]",
									Start: ast.Position{
										Column: 27,
										Line:   700,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   700,
										},
										File:   "experimental.flux",
										Source: "{T with _value: float}",
										Start: ast.Position{
											Column: 28,
											Line:   700,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   700,
											},
											File:   "experimental.flux",
											Source: "_value: float",
											Start: ast.Position{
												Column: 36,
												Line:   700,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   700,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 36,
													Line:   700,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.NamedType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   700,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 44,
													Line:   700,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   700,
													},
													File:   "experimental.flux",
													Source: "float",
													Start: ast.Position{
														Column: 44,
														Line:   700,
													},
												},
											},
											Name: "float",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   700,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 29,
												Line:   700,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   700,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: float}]",
								Start: ast.Position{
									Column: 56,
									Line:   700,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   700,
									},
									File:   "experimental.flux",
									Source: "{T with _value: float}",
									Start: ast.Position{
										Column: 57,
										Line:   700,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 78,
											Line:   700,
										},
										File:   "experimental.flux",
										Source: "_value: float",
										Start: ast.Position{
											Column: 65,
											Line:   700,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 71,
												Line:   700,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 65,
												Line:   700,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 78,
												Line:   700,
											},
											File:   "experimental.flux",
											Source: "float",
											Start: ast.Position{
												Column: 73,
												Line:   700,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 78,
													Line:   700,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 73,
													Line:   700,
												},
											},
										},
										Name: "float",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   700,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 58,
											Line:   700,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// spread is a function that outputs the difference between the minimum and\n"}, ast.Comment{Text: "//  maximum values in the value column for each input table.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  The function supports uint, int, and float values. The output value type\n"}, ast.Comment{Text: "//  depends on the input value type.\n"}, ast.Comment{Text: "//  - uint or int values return int values.\n"}, ast.Comment{Text: "//  - float input values return float output values.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  spread function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -5m)\n"}, ast.Comment{Text: "//   |> filter(fn: (r) =>\n"}, ast.Comment{Text: "//     r._measurement == \"example-measurement\" and\n"}, ast.Comment{Text: "//     r._field == \"example-field\"\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "//   |> experimental.spread()\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   726,
					},
					File:   "experimental.flux",
					Source: "builtin spread",
					Start: ast.Position{
						Column: 1,
						Line:   726,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   726,
						},
						File:   "experimental.flux",
						Source: "spread",
						Start: ast.Position{
							Column: 9,
							Line:   726,
						},
					},
				},
				Name: "spread",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 91,
							Line:   726,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}] where A: Numeric",
						Start: ast.Position{
							Column: 18,
							Line:   726,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 91,
								Line:   726,
							},
							File:   "experimental.flux",
							Source: "A: Numeric",
							Start: ast.Position{
								Column: 81,
								Line:   726,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 91,
									Line:   726,
								},
								File:   "experimental.flux",
								Source: "Numeric",
								Start: ast.Position{
									Column: 84,
									Line:   726,
								},
							},
						},
						Name: "Numeric",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   726,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 81,
									Line:   726,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 74,
								Line:   726,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
							Start: ast.Position{
								Column: 18,
								Line:   726,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   726,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: A}]",
								Start: ast.Position{
									Column: 19,
									Line:   726,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   726,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 21,
										Line:   726,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   726,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: A}]",
									Start: ast.Position{
										Column: 29,
										Line:   726,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   726,
										},
										File:   "experimental.flux",
										Source: "{T with _value: A}",
										Start: ast.Position{
											Column: 30,
											Line:   726,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   726,
											},
											File:   "experimental.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 38,
												Line:   726,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   726,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 38,
													Line:   726,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   726,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 46,
													Line:   726,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   726,
													},
													File:   "experimental.flux",
													Source: "A",
													Start: ast.Position{
														Column: 46,
														Line:   726,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   726,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 31,
												Line:   726,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   726,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: A}]",
								Start: ast.Position{
									Column: 54,
									Line:   726,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 73,
										Line:   726,
									},
									File:   "experimental.flux",
									Source: "{T with _value: A}",
									Start: ast.Position{
										Column: 55,
										Line:   726,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 72,
											Line:   726,
										},
										File:   "experimental.flux",
										Source: "_value: A",
										Start: ast.Position{
											Column: 63,
											Line:   726,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   726,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 63,
												Line:   726,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 72,
												Line:   726,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 71,
												Line:   726,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 72,
													Line:   726,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 71,
													Line:   726,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   726,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 56,
											Line:   726,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// stddev is a function that computes the standard deviation of non-null values\n"}, ast.Comment{Text: "//  in the _value column for each input table.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  stddev function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `mode` is the standard deviation mode or type of standard deviation to calculate.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Defaults to \"sample\".\n"}, ast.Comment{Text: "//   Available options are:\n"}, ast.Comment{Text: "//   - sample\n"}, ast.Comment{Text: "//   - population\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # sample\n"}, ast.Comment{Text: "//  Calculate the sample standard deviation where the data is considered to be part of\n"}, ast.Comment{Text: "//  a larger population.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # population\n"}, ast.Comment{Text: "//  Calculate the population standard deviation where the data is considered a\n"}, ast.Comment{Text: "//  population of its own.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -5m)\n"}, ast.Comment{Text: "//   |> filter(fn: (r) =>\n"}, ast.Comment{Text: "//     r._measurement == \"cpu\" and\n"}, ast.Comment{Text: "//     r._field == \"usage_system\"\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "//   |> experimental.stddev()\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   763,
					},
					File:   "experimental.flux",
					Source: "builtin stddev",
					Start: ast.Position{
						Column: 1,
						Line:   763,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   763,
						},
						File:   "experimental.flux",
						Source: "stddev",
						Start: ast.Position{
							Column: 9,
							Line:   763,
						},
					},
				},
				Name: "stddev",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 97,
							Line:   763,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: float}], ?mode: string) => [{T with _value: float}]",
						Start: ast.Position{
							Column: 18,
							Line:   763,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 97,
								Line:   763,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: float}], ?mode: string) => [{T with _value: float}]",
							Start: ast.Position{
								Column: 18,
								Line:   763,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   763,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: float}]",
								Start: ast.Position{
									Column: 19,
									Line:   763,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   763,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 21,
										Line:   763,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   763,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: float}]",
									Start: ast.Position{
										Column: 29,
										Line:   763,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   763,
										},
										File:   "experimental.flux",
										Source: "{T with _value: float}",
										Start: ast.Position{
											Column: 30,
											Line:   763,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   763,
											},
											File:   "experimental.flux",
											Source: "_value: float",
											Start: ast.Position{
												Column: 38,
												Line:   763,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   763,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 38,
													Line:   763,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.NamedType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   763,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 46,
													Line:   763,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   763,
													},
													File:   "experimental.flux",
													Source: "float",
													Start: ast.Position{
														Column: 46,
														Line:   763,
													},
												},
											},
											Name: "float",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   763,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 31,
												Line:   763,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   763,
								},
								File:   "experimental.flux",
								Source: "?mode: string",
								Start: ast.Position{
									Column: 55,
									Line:   763,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   763,
									},
									File:   "experimental.flux",
									Source: "mode",
									Start: ast.Position{
										Column: 56,
										Line:   763,
									},
								},
							},
							Name: "mode",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   763,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 62,
										Line:   763,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   763,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 62,
											Line:   763,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 97,
									Line:   763,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: float}]",
								Start: ast.Position{
									Column: 73,
									Line:   763,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   763,
									},
									File:   "experimental.flux",
									Source: "{T with _value: float}",
									Start: ast.Position{
										Column: 74,
										Line:   763,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 95,
											Line:   763,
										},
										File:   "experimental.flux",
										Source: "_value: float",
										Start: ast.Position{
											Column: 82,
											Line:   763,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 88,
												Line:   763,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 82,
												Line:   763,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 95,
												Line:   763,
											},
											File:   "experimental.flux",
											Source: "float",
											Start: ast.Position{
												Column: 90,
												Line:   763,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 95,
													Line:   763,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 90,
													Line:   763,
												},
											},
										},
										Name: "float",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 76,
											Line:   763,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 75,
											Line:   763,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// sum is a function that computes the sum of non-null values in the _value\n"}, ast.Comment{Text: "//  column for each input table.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  sum function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"example-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -5m)\n"}, ast.Comment{Text: "//   |> filter(fn: (r) =>\n"}, ast.Comment{Text: "//     r._measurement == \"example-measurement\" and\n"}, ast.Comment{Text: "//     r._field == \"example-field\"\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "//   |> experimental.sum()\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   784,
					},
					File:   "experimental.flux",
					Source: "builtin sum",
					Start: ast.Position{
						Column: 1,
						Line:   784,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   784,
						},
						File:   "experimental.flux",
						Source: "sum",
						Start: ast.Position{
							Column: 9,
							Line:   784,
						},
					},
				},
				Name: "sum",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 88,
							Line:   784,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}] where A: Numeric",
						Start: ast.Position{
							Column: 15,
							Line:   784,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 88,
								Line:   784,
							},
							File:   "experimental.flux",
							Source: "A: Numeric",
							Start: ast.Position{
								Column: 78,
								Line:   784,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   784,
								},
								File:   "experimental.flux",
								Source: "Numeric",
								Start: ast.Position{
									Column: 81,
									Line:   784,
								},
							},
						},
						Name: "Numeric",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 79,
									Line:   784,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 78,
									Line:   784,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   784,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
							Start: ast.Position{
								Column: 15,
								Line:   784,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   784,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: A}]",
								Start: ast.Position{
									Column: 16,
									Line:   784,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   784,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 18,
										Line:   784,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   784,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: A}]",
									Start: ast.Position{
										Column: 26,
										Line:   784,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   784,
										},
										File:   "experimental.flux",
										Source: "{T with _value: A}",
										Start: ast.Position{
											Column: 27,
											Line:   784,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   784,
											},
											File:   "experimental.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 35,
												Line:   784,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   784,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 35,
													Line:   784,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   784,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 43,
													Line:   784,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   784,
													},
													File:   "experimental.flux",
													Source: "A",
													Start: ast.Position{
														Column: 43,
														Line:   784,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   784,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 28,
												Line:   784,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   784,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: A}]",
								Start: ast.Position{
									Column: 51,
									Line:   784,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   784,
									},
									File:   "experimental.flux",
									Source: "{T with _value: A}",
									Start: ast.Position{
										Column: 52,
										Line:   784,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   784,
										},
										File:   "experimental.flux",
										Source: "_value: A",
										Start: ast.Position{
											Column: 60,
											Line:   784,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   784,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 60,
												Line:   784,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   784,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 68,
												Line:   784,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   784,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 68,
													Line:   784,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   784,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 53,
											Line:   784,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// kaufmansAMA is a function that calculate the Kaufman's Adaptive Moving\n"}, ast.Comment{Text: "//  Average (KAMA) of input tables using the _value column in each table.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  Kaufman’s Adaptive Moving Average is a trend-following indicator designed\n"}, ast.Comment{Text: "//  to account for market noise or volatility.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  kaufmansAMA function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `n` is the period or number of points to use in the calculation.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// experimental.from(bucket: \"example-bucket\"):\n"}, ast.Comment{Text: "//   |> range(start: -7d)\n"}, ast.Comment{Text: "//   |> kaufmansAMA(n: 10)\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   807,
					},
					File:   "experimental.flux",
					Source: "builtin kaufmansAMA",
					Start: ast.Position{
						Column: 1,
						Line:   807,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   807,
						},
						File:   "experimental.flux",
						Source: "kaufmansAMA",
						Start: ast.Position{
							Column: 9,
							Line:   807,
						},
					},
				},
				Name: "kaufmansAMA",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 108,
							Line:   807,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: A}], n: int) => [{T with _value: float}] where A: Numeric",
						Start: ast.Position{
							Column: 23,
							Line:   807,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 108,
								Line:   807,
							},
							File:   "experimental.flux",
							Source: "A: Numeric",
							Start: ast.Position{
								Column: 98,
								Line:   807,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 108,
									Line:   807,
								},
								File:   "experimental.flux",
								Source: "Numeric",
								Start: ast.Position{
									Column: 101,
									Line:   807,
								},
							},
						},
						Name: "Numeric",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   807,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 98,
									Line:   807,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 91,
								Line:   807,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: A}], n: int) => [{T with _value: float}]",
							Start: ast.Position{
								Column: 23,
								Line:   807,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   807,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: A}]",
								Start: ast.Position{
									Column: 24,
									Line:   807,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   807,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 26,
										Line:   807,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   807,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: A}]",
									Start: ast.Position{
										Column: 34,
										Line:   807,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   807,
										},
										File:   "experimental.flux",
										Source: "{T with _value: A}",
										Start: ast.Position{
											Column: 35,
											Line:   807,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   807,
											},
											File:   "experimental.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 43,
												Line:   807,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   807,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 43,
													Line:   807,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 52,
													Line:   807,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 51,
													Line:   807,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 52,
														Line:   807,
													},
													File:   "experimental.flux",
													Source: "A",
													Start: ast.Position{
														Column: 51,
														Line:   807,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   807,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 36,
												Line:   807,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   807,
								},
								File:   "experimental.flux",
								Source: "n: int",
								Start: ast.Position{
									Column: 56,
									Line:   807,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   807,
									},
									File:   "experimental.flux",
									Source: "n",
									Start: ast.Position{
										Column: 56,
										Line:   807,
									},
								},
							},
							Name: "n",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   807,
									},
									File:   "experimental.flux",
									Source: "int",
									Start: ast.Position{
										Column: 59,
										Line:   807,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   807,
										},
										File:   "experimental.flux",
										Source: "int",
										Start: ast.Position{
											Column: 59,
											Line:   807,
										},
									},
								},
								Name: "int",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 91,
									Line:   807,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: float}]",
								Start: ast.Position{
									Column: 67,
									Line:   807,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   807,
									},
									File:   "experimental.flux",
									Source: "{T with _value: float}",
									Start: ast.Position{
										Column: 68,
										Line:   807,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 89,
											Line:   807,
										},
										File:   "experimental.flux",
										Source: "_value: float",
										Start: ast.Position{
											Column: 76,
											Line:   807,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 82,
												Line:   807,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 76,
												Line:   807,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 89,
												Line:   807,
											},
											File:   "experimental.flux",
											Source: "float",
											Start: ast.Position{
												Column: 84,
												Line:   807,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 89,
													Line:   807,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 84,
													Line:   807,
												},
											},
										},
										Name: "float",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   807,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 69,
											Line:   807,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// distinct is a function that returns unique values from the _value column.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  The _value of each output record is set to a distinct value in the specified\n"}, ast.Comment{Text: "//  column. null is considered a distinct value.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  distinct function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Output schema\n"}, ast.Comment{Text: "// experimental.distinct() outputs a single table for each input table and\n"}, ast.Comment{Text: "// does the following:\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - Outputs a single record for each distinct value.\n"}, ast.Comment{Text: "// - Drops all columns not in the group key.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Empty tables\n"}, ast.Comment{Text: "// experimental.distinct() drops empty tables.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `tables` is the input data\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Default is pipe-forwarded data.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// data\n"}, ast.Comment{Text: "// \t|> experimental.distinct()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Input data\n"}, ast.Comment{Text: "//  _time | _field | _value\n"}, ast.Comment{Text: "//  --- | --- | ---\n"}, ast.Comment{Text: "// 2021-01-01T00:00:00Z | ver | v1\n"}, ast.Comment{Text: "// 2021-01-01T00:01:00Z | ver | v1\n"}, ast.Comment{Text: "// 2021-01-01T00:02:00Z | ver | v2\n"}, ast.Comment{Text: "// 2021-01-01T00:03:00Z | ver | \n"}, ast.Comment{Text: "// 2021-01-01T00:04:00Z | ver | v3\n"}, ast.Comment{Text: "// 2021-01-01T00:05:00Z | ver | v3\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Output table\n"}, ast.Comment{Text: "//  _value\n"}, ast.Comment{Text: "//  ---\n"}, ast.Comment{Text: "//  v1\n"}, ast.Comment{Text: "//  v2\n"}, ast.Comment{Text: "//    \n"}, ast.Comment{Text: "//  v3\n"}, ast.Comment{Text: "//\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   859,
					},
					File:   "experimental.flux",
					Source: "builtin distinct",
					Start: ast.Position{
						Column: 1,
						Line:   859,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   859,
						},
						File:   "experimental.flux",
						Source: "distinct",
						Start: ast.Position{
							Column: 9,
							Line:   859,
						},
					},
				},
				Name: "distinct",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 76,
							Line:   859,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
						Start: ast.Position{
							Column: 20,
							Line:   859,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 76,
								Line:   859,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
							Start: ast.Position{
								Column: 20,
								Line:   859,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   859,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: A}]",
								Start: ast.Position{
									Column: 21,
									Line:   859,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   859,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 23,
										Line:   859,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   859,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: A}]",
									Start: ast.Position{
										Column: 31,
										Line:   859,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   859,
										},
										File:   "experimental.flux",
										Source: "{T with _value: A}",
										Start: ast.Position{
											Column: 32,
											Line:   859,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   859,
											},
											File:   "experimental.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 40,
												Line:   859,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   859,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 40,
													Line:   859,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   859,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 48,
													Line:   859,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   859,
													},
													File:   "experimental.flux",
													Source: "A",
													Start: ast.Position{
														Column: 48,
														Line:   859,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   859,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 33,
												Line:   859,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 76,
									Line:   859,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: A}]",
								Start: ast.Position{
									Column: 56,
									Line:   859,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   859,
									},
									File:   "experimental.flux",
									Source: "{T with _value: A}",
									Start: ast.Position{
										Column: 57,
										Line:   859,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 74,
											Line:   859,
										},
										File:   "experimental.flux",
										Source: "_value: A",
										Start: ast.Position{
											Column: 65,
											Line:   859,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 71,
												Line:   859,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 65,
												Line:   859,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   859,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 73,
												Line:   859,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 74,
													Line:   859,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 73,
													Line:   859,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   859,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 58,
											Line:   859,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// fill is a function that replaces all null values in the _value column\n"}, ast.Comment{Text: "//  with a non-null value.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  fill function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `value` is the value to replace the null values with.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Data type must match the type of the _value column.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `usePrevious` when true, replaces null values with the value of the previous\n"}, ast.Comment{Text: "//   non-null row.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `tables` is the input data.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Default is pipe-forwarded data.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Fill null values with a specified non-null value\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// data\n"}, ast.Comment{Text: "//   |> experimental.fill(value: 0.0)\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Input data\n"}, ast.Comment{Text: "//  _time | _value\n"}, ast.Comment{Text: "//  --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:00:00Z | 1.2\n"}, ast.Comment{Text: "//  2021-01-01T00:01:00Z | \n"}, ast.Comment{Text: "//  2021-01-01T00:02:00Z | 2.3\n"}, ast.Comment{Text: "//  2021-01-01T00:03:00Z | \n"}, ast.Comment{Text: "//  2021-01-01T00:04:00Z | 2.8\n"}, ast.Comment{Text: "//  2021-01-01T00:05:00Z | 1.1\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Output data\n"}, ast.Comment{Text: "//  _time | _value\n"}, ast.Comment{Text: "//  --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:00:00Z | 1.2\n"}, ast.Comment{Text: "//  2021-01-01T00:01:00Z | 0.0\n"}, ast.Comment{Text: "//  2021-01-01T00:02:00Z | 2.3\n"}, ast.Comment{Text: "//  2021-01-01T00:03:00Z | 0.0\n"}, ast.Comment{Text: "//  2021-01-01T00:04:00Z | 2.8\n"}, ast.Comment{Text: "//  2021-01-01T00:05:00Z | 1.1\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Fill null values with the previous non-null value\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// data\n"}, ast.Comment{Text: "//   |> experimental.fill(usePrevious: true)\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Input data\n"}, ast.Comment{Text: "//  _time | _value\n"}, ast.Comment{Text: "//  --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:00:00Z | 1.2\n"}, ast.Comment{Text: "//  2021-01-01T00:01:00Z | \n"}, ast.Comment{Text: "//  2021-01-01T00:02:00Z | 2.3\n"}, ast.Comment{Text: "//  2021-01-01T00:03:00Z | \n"}, ast.Comment{Text: "//  2021-01-01T00:04:00Z | 2.8\n"}, ast.Comment{Text: "//  2021-01-01T00:05:00Z | 1.1\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Output data\n"}, ast.Comment{Text: "//  _time | _value\n"}, ast.Comment{Text: "//  --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:00:00Z | 1.2\n"}, ast.Comment{Text: "//  2021-01-01T00:01:00Z | 1.2\n"}, ast.Comment{Text: "//  2021-01-01T00:02:00Z | 2.3\n"}, ast.Comment{Text: "//  2021-01-01T00:03:00Z | 2.3\n"}, ast.Comment{Text: "//  2021-01-01T00:04:00Z | 2.8\n"}, ast.Comment{Text: "//  2021-01-01T00:05:00Z | 1.1\n"}, ast.Comment{Text: "//\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   937,
					},
					File:   "experimental.flux",
					Source: "builtin fill",
					Start: ast.Position{
						Column: 1,
						Line:   937,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   937,
						},
						File:   "experimental.flux",
						Source: "fill",
						Start: ast.Position{
							Column: 9,
							Line:   937,
						},
					},
				},
				Name: "fill",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 103,
							Line:   937,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: A}], ?value: A, ?usePrevious: bool) => [{T with _value: A}]",
						Start: ast.Position{
							Column: 16,
							Line:   937,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 103,
								Line:   937,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: A}], ?value: A, ?usePrevious: bool) => [{T with _value: A}]",
							Start: ast.Position{
								Column: 16,
								Line:   937,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   937,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: A}]",
								Start: ast.Position{
									Column: 17,
									Line:   937,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   937,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   937,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   937,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: A}]",
									Start: ast.Position{
										Column: 27,
										Line:   937,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   937,
										},
										File:   "experimental.flux",
										Source: "{T with _value: A}",
										Start: ast.Position{
											Column: 28,
											Line:   937,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   937,
											},
											File:   "experimental.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 36,
												Line:   937,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   937,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 36,
													Line:   937,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   937,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 44,
													Line:   937,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   937,
													},
													File:   "experimental.flux",
													Source: "A",
													Start: ast.Position{
														Column: 44,
														Line:   937,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   937,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 29,
												Line:   937,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   937,
								},
								File:   "experimental.flux",
								Source: "?value: A",
								Start: ast.Position{
									Column: 49,
									Line:   937,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   937,
									},
									File:   "experimental.flux",
									Source: "value",
									Start: ast.Position{
										Column: 50,
										Line:   937,
									},
								},
							},
							Name: "value",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   937,
									},
									File:   "experimental.flux",
									Source: "A",
									Start: ast.Position{
										Column: 57,
										Line:   937,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   937,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 57,
											Line:   937,
										},
									},
								},
								Name: "A",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   937,
								},
								File:   "experimental.flux",
								Source: "?usePrevious: bool",
								Start: ast.Position{
									Column: 60,
									Line:   937,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   937,
									},
									File:   "experimental.flux",
									Source: "usePrevious",
									Start: ast.Position{
										Column: 61,
										Line:   937,
									},
								},
							},
							Name: "usePrevious",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 78,
										Line:   937,
									},
									File:   "experimental.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 74,
										Line:   937,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 78,
											Line:   937,
										},
										File:   "experimental.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 74,
											Line:   937,
										},
									},
								},
								Name: "bool",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 103,
									Line:   937,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: A}]",
								Start: ast.Position{
									Column: 83,
									Line:   937,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 102,
										Line:   937,
									},
									File:   "experimental.flux",
									Source: "{T with _value: A}",
									Start: ast.Position{
										Column: 84,
										Line:   937,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 101,
											Line:   937,
										},
										File:   "experimental.flux",
										Source: "_value: A",
										Start: ast.Position{
											Column: 92,
											Line:   937,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 98,
												Line:   937,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 92,
												Line:   937,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 101,
												Line:   937,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 100,
												Line:   937,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 101,
													Line:   937,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 100,
													Line:   937,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 86,
											Line:   937,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 85,
											Line:   937,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// first is a function that returns the first record with a non-null value in\n"}, ast.Comment{Text: "//  the _value column.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  first function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Empty tables\n"}, ast.Comment{Text: "// experimental.first() drops empty tables.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `tables` is the input data.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Default is pipe-forwarded data.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Return the first non-null value\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// data\n"}, ast.Comment{Text: "//   |> experimental.first()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Input data\n"}, ast.Comment{Text: "//  _time | _value\n"}, ast.Comment{Text: "//  --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:00:00Z | 1.2\n"}, ast.Comment{Text: "//  2021-01-01T00:01:00Z | 0.6\n"}, ast.Comment{Text: "//  2021-01-01T00:02:00Z | 2.3\n"}, ast.Comment{Text: "//  2021-01-01T00:03:00Z | 0.9\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Output table\n"}, ast.Comment{Text: "//  _time | _value\n"}, ast.Comment{Text: "//  --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:00:00Z | 1.2\n"}, ast.Comment{Text: "//\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   975,
					},
					File:   "experimental.flux",
					Source: "builtin first",
					Start: ast.Position{
						Column: 1,
						Line:   975,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   975,
						},
						File:   "experimental.flux",
						Source: "first",
						Start: ast.Position{
							Column: 9,
							Line:   975,
						},
					},
				},
				Name: "first",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 73,
							Line:   975,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
						Start: ast.Position{
							Column: 17,
							Line:   975,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 73,
								Line:   975,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
							Start: ast.Position{
								Column: 17,
								Line:   975,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   975,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: A}]",
								Start: ast.Position{
									Column: 18,
									Line:   975,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   975,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 20,
										Line:   975,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   975,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: A}]",
									Start: ast.Position{
										Column: 28,
										Line:   975,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   975,
										},
										File:   "experimental.flux",
										Source: "{T with _value: A}",
										Start: ast.Position{
											Column: 29,
											Line:   975,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   975,
											},
											File:   "experimental.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 37,
												Line:   975,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   975,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 37,
													Line:   975,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   975,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 45,
													Line:   975,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   975,
													},
													File:   "experimental.flux",
													Source: "A",
													Start: ast.Position{
														Column: 45,
														Line:   975,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   975,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 30,
												Line:   975,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 73,
									Line:   975,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: A}]",
								Start: ast.Position{
									Column: 53,
									Line:   975,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   975,
									},
									File:   "experimental.flux",
									Source: "{T with _value: A}",
									Start: ast.Position{
										Column: 54,
										Line:   975,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 71,
											Line:   975,
										},
										File:   "experimental.flux",
										Source: "_value: A",
										Start: ast.Position{
											Column: 62,
											Line:   975,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   975,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 62,
												Line:   975,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 71,
												Line:   975,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 70,
												Line:   975,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 71,
													Line:   975,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 70,
													Line:   975,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   975,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 55,
											Line:   975,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// last is a function that returns the last record with a non-null value\n"}, ast.Comment{Text: "//  in the _value column. \n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  last function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Empty tables\n"}, ast.Comment{Text: "// experimental.last drops empty tables.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `tables` is the input data.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Default is pipe-forwarded data.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Return the last non-null value\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// data\n"}, ast.Comment{Text: "//   |> experimental.last()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Input data\n"}, ast.Comment{Text: "//  _time | _value\n"}, ast.Comment{Text: "//  --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:00:00Z | 1.2\n"}, ast.Comment{Text: "//  2021-01-01T00:01:00Z | 0.6\n"}, ast.Comment{Text: "//  2021-01-01T00:02:00Z | 2.3\n"}, ast.Comment{Text: "//  2021-01-01T00:03:00Z | 0.9\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Output data\n"}, ast.Comment{Text: "//  _time | _value\n"}, ast.Comment{Text: "//  --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:03:00Z | 0.9\n"}, ast.Comment{Text: "//\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   1013,
					},
					File:   "experimental.flux",
					Source: "builtin last",
					Start: ast.Position{
						Column: 1,
						Line:   1013,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   1013,
						},
						File:   "experimental.flux",
						Source: "last",
						Start: ast.Position{
							Column: 9,
							Line:   1013,
						},
					},
				},
				Name: "last",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 72,
							Line:   1013,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
						Start: ast.Position{
							Column: 16,
							Line:   1013,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   1013,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
							Start: ast.Position{
								Column: 16,
								Line:   1013,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   1013,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: A}]",
								Start: ast.Position{
									Column: 17,
									Line:   1013,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   1013,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   1013,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   1013,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: A}]",
									Start: ast.Position{
										Column: 27,
										Line:   1013,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   1013,
										},
										File:   "experimental.flux",
										Source: "{T with _value: A}",
										Start: ast.Position{
											Column: 28,
											Line:   1013,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   1013,
											},
											File:   "experimental.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 36,
												Line:   1013,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   1013,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 36,
													Line:   1013,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   1013,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 44,
													Line:   1013,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   1013,
													},
													File:   "experimental.flux",
													Source: "A",
													Start: ast.Position{
														Column: 44,
														Line:   1013,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   1013,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 29,
												Line:   1013,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   1013,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: A}]",
								Start: ast.Position{
									Column: 52,
									Line:   1013,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   1013,
									},
									File:   "experimental.flux",
									Source: "{T with _value: A}",
									Start: ast.Position{
										Column: 53,
										Line:   1013,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   1013,
										},
										File:   "experimental.flux",
										Source: "_value: A",
										Start: ast.Position{
											Column: 61,
											Line:   1013,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   1013,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 61,
												Line:   1013,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   1013,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 69,
												Line:   1013,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 70,
													Line:   1013,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 69,
													Line:   1013,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   1013,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 54,
											Line:   1013,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// max is a function that returns the record with the highest value in the _value\n"}, ast.Comment{Text: "//  column for each input table.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  max function is subject to change at any time. By using this function, you\n"}, ast.Comment{Text: "//  accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Empty tables\n"}, ast.Comment{Text: "// experimental.max() drops empty tables.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `tables` is the input data.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Default is pipe-forwarded data.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// data\n"}, ast.Comment{Text: "//   |> experimental.max()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Input data\n"}, ast.Comment{Text: "//  _time | _value\n"}, ast.Comment{Text: "//  --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:00:00Z | 1.2\n"}, ast.Comment{Text: "//  2021-01-01T00:01:00Z | 0.6\n"}, ast.Comment{Text: "//  2021-01-01T00:02:00Z | 2.3\n"}, ast.Comment{Text: "//  2021-01-01T00:03:00Z | 0.9\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Output table\n"}, ast.Comment{Text: "//  _time | _value\n"}, ast.Comment{Text: "//  --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:02:00Z | 2.3\n"}, ast.Comment{Text: "//\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   1051,
					},
					File:   "experimental.flux",
					Source: "builtin max",
					Start: ast.Position{
						Column: 1,
						Line:   1051,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   1051,
						},
						File:   "experimental.flux",
						Source: "max",
						Start: ast.Position{
							Column: 9,
							Line:   1051,
						},
					},
				},
				Name: "max",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 71,
							Line:   1051,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
						Start: ast.Position{
							Column: 15,
							Line:   1051,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   1051,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
							Start: ast.Position{
								Column: 15,
								Line:   1051,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   1051,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: A}]",
								Start: ast.Position{
									Column: 16,
									Line:   1051,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   1051,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 18,
										Line:   1051,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   1051,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: A}]",
									Start: ast.Position{
										Column: 26,
										Line:   1051,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   1051,
										},
										File:   "experimental.flux",
										Source: "{T with _value: A}",
										Start: ast.Position{
											Column: 27,
											Line:   1051,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   1051,
											},
											File:   "experimental.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 35,
												Line:   1051,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   1051,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 35,
													Line:   1051,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   1051,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 43,
													Line:   1051,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   1051,
													},
													File:   "experimental.flux",
													Source: "A",
													Start: ast.Position{
														Column: 43,
														Line:   1051,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   1051,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 28,
												Line:   1051,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   1051,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: A}]",
								Start: ast.Position{
									Column: 51,
									Line:   1051,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   1051,
									},
									File:   "experimental.flux",
									Source: "{T with _value: A}",
									Start: ast.Position{
										Column: 52,
										Line:   1051,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   1051,
										},
										File:   "experimental.flux",
										Source: "_value: A",
										Start: ast.Position{
											Column: 60,
											Line:   1051,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   1051,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 60,
												Line:   1051,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   1051,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 68,
												Line:   1051,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   1051,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 68,
													Line:   1051,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   1051,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 53,
											Line:   1051,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// min is a function that returns the record with the lowest value in the\n"}, ast.Comment{Text: "//  _value column for each input table.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  min function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Empty tables\n"}, ast.Comment{Text: "// experimental.min() drops empty tables.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `tables` is the input data.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Default is pipe-forwarded data.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// data\n"}, ast.Comment{Text: "//   |> experimental.min()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Input data\n"}, ast.Comment{Text: "//  _time | _value\n"}, ast.Comment{Text: "//  --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:00:00Z | 1.2\n"}, ast.Comment{Text: "//  2021-01-01T00:01:00Z | 0.6\n"}, ast.Comment{Text: "//  2021-01-01T00:02:00Z | 2.3\n"}, ast.Comment{Text: "//  2021-01-01T00:03:00Z | 0.9\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Output data\n"}, ast.Comment{Text: "//  _time | _value\n"}, ast.Comment{Text: "//  --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:01:00Z | 0.6\n"}, ast.Comment{Text: "//\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   1089,
					},
					File:   "experimental.flux",
					Source: "builtin min",
					Start: ast.Position{
						Column: 1,
						Line:   1089,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   1089,
						},
						File:   "experimental.flux",
						Source: "min",
						Start: ast.Position{
							Column: 9,
							Line:   1089,
						},
					},
				},
				Name: "min",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 71,
							Line:   1089,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
						Start: ast.Position{
							Column: 15,
							Line:   1089,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   1089,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
							Start: ast.Position{
								Column: 15,
								Line:   1089,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   1089,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: A}]",
								Start: ast.Position{
									Column: 16,
									Line:   1089,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   1089,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 18,
										Line:   1089,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   1089,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: A}]",
									Start: ast.Position{
										Column: 26,
										Line:   1089,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   1089,
										},
										File:   "experimental.flux",
										Source: "{T with _value: A}",
										Start: ast.Position{
											Column: 27,
											Line:   1089,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   1089,
											},
											File:   "experimental.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 35,
												Line:   1089,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   1089,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 35,
													Line:   1089,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   1089,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 43,
													Line:   1089,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   1089,
													},
													File:   "experimental.flux",
													Source: "A",
													Start: ast.Position{
														Column: 43,
														Line:   1089,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   1089,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 28,
												Line:   1089,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   1089,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: A}]",
								Start: ast.Position{
									Column: 51,
									Line:   1089,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   1089,
									},
									File:   "experimental.flux",
									Source: "{T with _value: A}",
									Start: ast.Position{
										Column: 52,
										Line:   1089,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   1089,
										},
										File:   "experimental.flux",
										Source: "_value: A",
										Start: ast.Position{
											Column: 60,
											Line:   1089,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   1089,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 60,
												Line:   1089,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   1089,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 68,
												Line:   1089,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   1089,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 68,
													Line:   1089,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   1089,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 53,
											Line:   1089,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// unique is a function that returns all records containing unique values in the\n"}, ast.Comment{Text: "//  _value column.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  null is considered a unique value.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  unique function is subject to change at any time. By using this function,\n"}, ast.Comment{Text: "//  you accept the risks of experimental functions.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Output schema\n"}, ast.Comment{Text: "// experimental.unique() outputs a single table for each input table and does\n"}, ast.Comment{Text: "// the following:\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - Outputs a single record for each unique value.\n"}, ast.Comment{Text: "// - Leaves group keys, columns, and values unmodified.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Empty tables\n"}, ast.Comment{Text: "// experimental.unique() drops empty tables.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// data\n"}, ast.Comment{Text: "//  |> experimental.unique()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Input table\n"}, ast.Comment{Text: "//  _time | _field | _value\n"}, ast.Comment{Text: "//  --- | --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:00:00Z | ver | v1\n"}, ast.Comment{Text: "//  2021-01-01T00:01:00Z | ver | v1\n"}, ast.Comment{Text: "//  2021-01-01T00:02:00Z | ver | v2\n"}, ast.Comment{Text: "//  2021-01-01T00:03:00Z | ver | \n"}, ast.Comment{Text: "//  2021-01-01T00:04:00Z | ver | v3\n"}, ast.Comment{Text: "//  2021-01-01T00:05:00Z | ver | v3\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Output table\n"}, ast.Comment{Text: "//  _time | _field | _value\n"}, ast.Comment{Text: "//  --- | --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:00:00Z | ver | v1\n"}, ast.Comment{Text: "//  2021-01-01T00:02:00Z | ver | v2\n"}, ast.Comment{Text: "//  2021-01-01T00:03:00Z | ver | \n"}, ast.Comment{Text: "//  2021-01-01T00:04:00Z | ver | v3\n"}, ast.Comment{Text: "//\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   1136,
					},
					File:   "experimental.flux",
					Source: "builtin unique",
					Start: ast.Position{
						Column: 1,
						Line:   1136,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   1136,
						},
						File:   "experimental.flux",
						Source: "unique",
						Start: ast.Position{
							Column: 9,
							Line:   1136,
						},
					},
				},
				Name: "unique",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 74,
							Line:   1136,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
						Start: ast.Position{
							Column: 18,
							Line:   1136,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 74,
								Line:   1136,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: A}]) => [{T with _value: A}]",
							Start: ast.Position{
								Column: 18,
								Line:   1136,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   1136,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: A}]",
								Start: ast.Position{
									Column: 19,
									Line:   1136,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   1136,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 21,
										Line:   1136,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   1136,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: A}]",
									Start: ast.Position{
										Column: 29,
										Line:   1136,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   1136,
										},
										File:   "experimental.flux",
										Source: "{T with _value: A}",
										Start: ast.Position{
											Column: 30,
											Line:   1136,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   1136,
											},
											File:   "experimental.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 38,
												Line:   1136,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   1136,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 38,
													Line:   1136,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   1136,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 46,
													Line:   1136,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   1136,
													},
													File:   "experimental.flux",
													Source: "A",
													Start: ast.Position{
														Column: 46,
														Line:   1136,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   1136,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 31,
												Line:   1136,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   1136,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: A}]",
								Start: ast.Position{
									Column: 54,
									Line:   1136,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 73,
										Line:   1136,
									},
									File:   "experimental.flux",
									Source: "{T with _value: A}",
									Start: ast.Position{
										Column: 55,
										Line:   1136,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 72,
											Line:   1136,
										},
										File:   "experimental.flux",
										Source: "_value: A",
										Start: ast.Position{
											Column: 63,
											Line:   1136,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   1136,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 63,
												Line:   1136,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 72,
												Line:   1136,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 71,
												Line:   1136,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 72,
													Line:   1136,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 71,
													Line:   1136,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   1136,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 56,
											Line:   1136,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// histogram is a function that approximates the cumulative distribution of a\n"}, ast.Comment{Text: "//  dataset by counting data frequencies for a list of bins.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  A bin is defined by an upper bound where all data points that are less than\n"}, ast.Comment{Text: "//  or equal to the bound are counted in the bin. Bin counts are cumulative.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Output schema\n"}, ast.Comment{Text: "// experimental.histogram() outputs a single table for each input table. Each\n"}, ast.Comment{Text: "// output table represents a unique histogram. Output tables have the same group\n"}, ast.Comment{Text: "// key as the corresponding input table.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  The function does the following:\n"}, ast.Comment{Text: "//  - Drops columns that are not part of the group key.\n"}, ast.Comment{Text: "//  - Adds an le column to store upper bound values.\n"}, ast.Comment{Text: "//  - Stores bin counts in the _value column.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `bins` is a list of upper bounds to use when computing the histogram frequencies,\n"}, ast.Comment{Text: "//   including the maximum value of the data set.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   This value can be set to positive infinity if no maximum is known.\n"}, ast.Comment{Text: "//   Bin helper functions (the following can be used to generate bins):\n"}, ast.Comment{Text: "//   - linearBins()\n"}, ast.Comment{Text: "//   - logarithmicBins()\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `normalize` can convert values into frequency values between 0 and 1.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Default is false.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `tables` is the input data.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Default is pipe-forwarded data.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Histogram with dynamically generated bins\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// data\n"}, ast.Comment{Text: "//   |> experimental.histogram(\n"}, ast.Comment{Text: "//     bins: linearBins(start:0.0, width:20.0, count:5)\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Input data\n"}, ast.Comment{Text: "//  _time | host | _value\n"}, ast.Comment{Text: "//  --- | --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:00:00Z | host1 | 33.4\n"}, ast.Comment{Text: "//  2021-01-01T00:01:00Z | host1 | 57.2\n"}, ast.Comment{Text: "//  2021-01-01T00:02:00Z | host1 | 78.1\n"}, ast.Comment{Text: "//  2021-01-01T00:03:00Z | host1 | 79.6\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  _time | host | _value\n"}, ast.Comment{Text: "//  --- | --- | ---\n"}, ast.Comment{Text: "//  2021-01-01T00:00:00Z | host2 | 10.3\n"}, ast.Comment{Text: "//  2021-01-01T00:01:00Z | host2 | 19.8\n"}, ast.Comment{Text: "//  2021-01-01T00:02:00Z | host2 | 54.6\n"}, ast.Comment{Text: "//  2021-01-01T00:03:00Z | host2 | 56.9\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// # Output data\n"}, ast.Comment{Text: "//  host | le | _value\n"}, ast.Comment{Text: "//  --- | --- | ---\n"}, ast.Comment{Text: "//  host1 | 0 | 0\n"}, ast.Comment{Text: "//  host1 | 20 | 0\n"}, ast.Comment{Text: "//  host1 | 40 | 1\n"}, ast.Comment{Text: "//  host1 | 60 | 2\n"}, ast.Comment{Text: "//  host1 | 80 | 4\n"}, ast.Comment{Text: "//  host1 | +Inf | 4\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//  host | le | _value\n"}, ast.Comment{Text: "//  --- | --- | ---\n"}, ast.Comment{Text: "//  host2 | 0 | 0\n"}, ast.Comment{Text: "//  host2 | 20 | 2\n"}, ast.Comment{Text: "//  host2 | 40 | 2\n"}, ast.Comment{Text: "//  host2 | 60 | 4\n"}, ast.Comment{Text: "//  host2 | 80 | 4\n"}, ast.Comment{Text: "//  host2 | +Inf | 4\n"}, ast.Comment{Text: "//\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   1216,
					},
					File:   "experimental.flux",
					Source: "builtin histogram",
					Start: ast.Position{
						Column: 1,
						Line:   1216,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   1216,
						},
						File:   "experimental.flux",
						Source: "histogram",
						Start: ast.Position{
							Column: 9,
							Line:   1216,
						},
					},
				},
				Name: "histogram",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 129,
							Line:   1216,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [{T with _value: float}], bins: [float], ?normalize: bool) => [{T with _value: float, le: float}]",
						Start: ast.Position{
							Column: 21,
							Line:   1216,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 129,
								Line:   1216,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [{T with _value: float}], bins: [float], ?normalize: bool) => [{T with _value: float, le: float}]",
							Start: ast.Position{
								Column: 21,
								Line:   1216,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   1216,
								},
								File:   "experimental.flux",
								Source: "<-tables: [{T with _value: float}]",
								Start: ast.Position{
									Column: 22,
									Line:   1216,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   1216,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 24,
										Line:   1216,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   1216,
									},
									File:   "experimental.flux",
									Source: "[{T with _value: float}]",
									Start: ast.Position{
										Column: 32,
										Line:   1216,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   1216,
										},
										File:   "experimental.flux",
										Source: "{T with _value: float}",
										Start: ast.Position{
											Column: 33,
											Line:   1216,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   1216,
											},
											File:   "experimental.flux",
											Source: "_value: float",
											Start: ast.Position{
												Column: 41,
												Line:   1216,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   1216,
												},
												File:   "experimental.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 41,
													Line:   1216,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.NamedType{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   1216,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 49,
													Line:   1216,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   1216,
													},
													File:   "experimental.flux",
													Source: "float",
													Start: ast.Position{
														Column: 49,
														Line:   1216,
													},
												},
											},
											Name: "float",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   1216,
											},
											File:   "experimental.flux",
											Source: "T",
											Start: ast.Position{
												Column: 34,
												Line:   1216,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   1216,
								},
								File:   "experimental.flux",
								Source: "bins: [float]",
								Start: ast.Position{
									Column: 58,
									Line:   1216,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   1216,
									},
									File:   "experimental.flux",
									Source: "bins",
									Start: ast.Position{
										Column: 58,
										Line:   1216,
									},
								},
							},
							Name: "bins",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   1216,
									},
									File:   "experimental.flux",
									Source: "[float]",
									Start: ast.Position{
										Column: 64,
										Line:   1216,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   1216,
										},
										File:   "experimental.flux",
										Source: "float",
										Start: ast.Position{
											Column: 65,
											Line:   1216,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   1216,
											},
											File:   "experimental.flux",
											Source: "float",
											Start: ast.Position{
												Column: 65,
												Line:   1216,
											},
										},
									},
									Name: "float",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 89,
									Line:   1216,
								},
								File:   "experimental.flux",
								Source: "?normalize: bool",
								Start: ast.Position{
									Column: 73,
									Line:   1216,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 83,
										Line:   1216,
									},
									File:   "experimental.flux",
									Source: "normalize",
									Start: ast.Position{
										Column: 74,
										Line:   1216,
									},
								},
							},
							Name: "normalize",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 89,
										Line:   1216,
									},
									File:   "experimental.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 85,
										Line:   1216,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 89,
											Line:   1216,
										},
										File:   "experimental.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 85,
											Line:   1216,
										},
									},
								},
								Name: "bool",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 129,
									Line:   1216,
								},
								File:   "experimental.flux",
								Source: "[{T with _value: float, le: float}]",
								Start: ast.Position{
									Column: 94,
									Line:   1216,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 128,
										Line:   1216,
									},
									File:   "experimental.flux",
									Source: "{T with _value: float, le: float}",
									Start: ast.Position{
										Column: 95,
										Line:   1216,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 116,
											Line:   1216,
										},
										File:   "experimental.flux",
										Source: "_value: float",
										Start: ast.Position{
											Column: 103,
											Line:   1216,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 109,
												Line:   1216,
											},
											File:   "experimental.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 103,
												Line:   1216,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 116,
												Line:   1216,
											},
											File:   "experimental.flux",
											Source: "float",
											Start: ast.Position{
												Column: 111,
												Line:   1216,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 116,
													Line:   1216,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 111,
													Line:   1216,
												},
											},
										},
										Name: "float",
									},
								},
							}, &ast.PropertyType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 127,
											Line:   1216,
										},
										File:   "experimental.flux",
										Source: "le: float",
										Start: ast.Position{
											Column: 118,
											Line:   1216,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 120,
												Line:   1216,
											},
											File:   "experimental.flux",
											Source: "le",
											Start: ast.Position{
												Column: 118,
												Line:   1216,
											},
										},
									},
									Name: "le",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 127,
												Line:   1216,
											},
											File:   "experimental.flux",
											Source: "float",
											Start: ast.Position{
												Column: 122,
												Line:   1216,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 127,
													Line:   1216,
												},
												File:   "experimental.flux",
												Source: "float",
												Start: ast.Position{
													Column: 122,
													Line:   1216,
												},
											},
										},
										Name: "float",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 97,
											Line:   1216,
										},
										File:   "experimental.flux",
										Source: "T",
										Start: ast.Position{
											Column: 96,
											Line:   1216,
										},
									},
								},
								Name: "T",
							},
						},
					},
				},
			},
		}},
		Eof:      nil,
		Imports:  nil,
		Metadata: "parser-type=rust",
		Name:     "experimental.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Flux eperimental package includes experimental functions that perform\n"}, ast.Comment{Text: "// various tasks.\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   3,
					},
					File:   "experimental.flux",
					Source: "package experimental",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   3,
						},
						File:   "experimental.flux",
						Source: "experimental",
						Start: ast.Position{
							Column: 9,
							Line:   3,
						},
					},
				},
				Name: "experimental",
			},
		},
	}},
	Package: "experimental",
	Path:    "experimental",
}
