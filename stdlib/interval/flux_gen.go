// DO NOT EDIT: This file is autogenerated via the builtin command.

package interval

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 18,
					Line:   4,
				},
				File:   "interval.flux",
				Source: "package interval\n\n\nbuiltin intervals",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   4,
					},
					File:   "interval.flux",
					Source: "builtin intervals",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   4,
						},
						File:   "interval.flux",
						Source: "intervals",
						Start: ast.Position{
							Column: 9,
							Line:   4,
						},
					},
				},
				Name: "intervals",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   19,
						},
						File:   "interval.flux",
						Source: "(\n    every: A,\n    period: B,\n    offset: C,\n) => (\n    start: D,\n    stop: E,\n) => [{\n    start: time,\n    stop: time,\n}] where\n    A: Timeable,\n    B: Timeable,\n    C: Timeable,\n    D: Timeable,\n    E: Timeable",
						Start: ast.Position{
							Column: 21,
							Line:   4,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   15,
							},
							File:   "interval.flux",
							Source: "A: Timeable",
							Start: ast.Position{
								Column: 5,
								Line:   15,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   15,
								},
								File:   "interval.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 8,
									Line:   15,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   15,
								},
								File:   "interval.flux",
								Source: "A",
								Start: ast.Position{
									Column: 5,
									Line:   15,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   16,
							},
							File:   "interval.flux",
							Source: "B: Timeable",
							Start: ast.Position{
								Column: 5,
								Line:   16,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   16,
								},
								File:   "interval.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 8,
									Line:   16,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   16,
								},
								File:   "interval.flux",
								Source: "B",
								Start: ast.Position{
									Column: 5,
									Line:   16,
								},
							},
						},
						Name: "B",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   17,
							},
							File:   "interval.flux",
							Source: "C: Timeable",
							Start: ast.Position{
								Column: 5,
								Line:   17,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   17,
								},
								File:   "interval.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 8,
									Line:   17,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   17,
								},
								File:   "interval.flux",
								Source: "C",
								Start: ast.Position{
									Column: 5,
									Line:   17,
								},
							},
						},
						Name: "C",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   18,
							},
							File:   "interval.flux",
							Source: "D: Timeable",
							Start: ast.Position{
								Column: 5,
								Line:   18,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   18,
								},
								File:   "interval.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 8,
									Line:   18,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   18,
								},
								File:   "interval.flux",
								Source: "D",
								Start: ast.Position{
									Column: 5,
									Line:   18,
								},
							},
						},
						Name: "D",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   19,
							},
							File:   "interval.flux",
							Source: "E: Timeable",
							Start: ast.Position{
								Column: 5,
								Line:   19,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   19,
								},
								File:   "interval.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 8,
									Line:   19,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   19,
								},
								File:   "interval.flux",
								Source: "E",
								Start: ast.Position{
									Column: 5,
									Line:   19,
								},
							},
						},
						Name: "E",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 3,
								Line:   14,
							},
							File:   "interval.flux",
							Source: "(\n    every: A,\n    period: B,\n    offset: C,\n) => (\n    start: D,\n    stop: E,\n) => [{\n    start: time,\n    stop: time,\n}]",
							Start: ast.Position{
								Column: 21,
								Line:   4,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   5,
								},
								File:   "interval.flux",
								Source: "every: A",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   5,
									},
									File:   "interval.flux",
									Source: "every",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "every",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   5,
									},
									File:   "interval.flux",
									Source: "A",
									Start: ast.Position{
										Column: 12,
										Line:   5,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   5,
										},
										File:   "interval.flux",
										Source: "A",
										Start: ast.Position{
											Column: 12,
											Line:   5,
										},
									},
								},
								Name: "A",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   6,
								},
								File:   "interval.flux",
								Source: "period: B",
								Start: ast.Position{
									Column: 5,
									Line:   6,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   6,
									},
									File:   "interval.flux",
									Source: "period",
									Start: ast.Position{
										Column: 5,
										Line:   6,
									},
								},
							},
							Name: "period",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   6,
									},
									File:   "interval.flux",
									Source: "B",
									Start: ast.Position{
										Column: 13,
										Line:   6,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   6,
										},
										File:   "interval.flux",
										Source: "B",
										Start: ast.Position{
											Column: 13,
											Line:   6,
										},
									},
								},
								Name: "B",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   7,
								},
								File:   "interval.flux",
								Source: "offset: C",
								Start: ast.Position{
									Column: 5,
									Line:   7,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   7,
									},
									File:   "interval.flux",
									Source: "offset",
									Start: ast.Position{
										Column: 5,
										Line:   7,
									},
								},
							},
							Name: "offset",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   7,
									},
									File:   "interval.flux",
									Source: "C",
									Start: ast.Position{
										Column: 13,
										Line:   7,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   7,
										},
										File:   "interval.flux",
										Source: "C",
										Start: ast.Position{
											Column: 13,
											Line:   7,
										},
									},
								},
								Name: "C",
							},
						},
					}},
					Return: &ast.FunctionType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   14,
								},
								File:   "interval.flux",
								Source: "(\n    start: D,\n    stop: E,\n) => [{\n    start: time,\n    stop: time,\n}]",
								Start: ast.Position{
									Column: 6,
									Line:   8,
								},
							},
						},
						Parameters: []*ast.ParameterType{&ast.ParameterType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   9,
									},
									File:   "interval.flux",
									Source: "start: D",
									Start: ast.Position{
										Column: 5,
										Line:   9,
									},
								},
							},
							Kind: "Required",
							Name: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   9,
										},
										File:   "interval.flux",
										Source: "start",
										Start: ast.Position{
											Column: 5,
											Line:   9,
										},
									},
								},
								Name: "start",
							},
							Ty: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   9,
										},
										File:   "interval.flux",
										Source: "D",
										Start: ast.Position{
											Column: 12,
											Line:   9,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   9,
											},
											File:   "interval.flux",
											Source: "D",
											Start: ast.Position{
												Column: 12,
												Line:   9,
											},
										},
									},
									Name: "D",
								},
							},
						}, &ast.ParameterType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   10,
									},
									File:   "interval.flux",
									Source: "stop: E",
									Start: ast.Position{
										Column: 5,
										Line:   10,
									},
								},
							},
							Kind: "Required",
							Name: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   10,
										},
										File:   "interval.flux",
										Source: "stop",
										Start: ast.Position{
											Column: 5,
											Line:   10,
										},
									},
								},
								Name: "stop",
							},
							Ty: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   10,
										},
										File:   "interval.flux",
										Source: "E",
										Start: ast.Position{
											Column: 11,
											Line:   10,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   10,
											},
											File:   "interval.flux",
											Source: "E",
											Start: ast.Position{
												Column: 11,
												Line:   10,
											},
										},
									},
									Name: "E",
								},
							},
						}},
						Return: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 3,
										Line:   14,
									},
									File:   "interval.flux",
									Source: "[{\n    start: time,\n    stop: time,\n}]",
									Start: ast.Position{
										Column: 6,
										Line:   11,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 2,
											Line:   14,
										},
										File:   "interval.flux",
										Source: "{\n    start: time,\n    stop: time,\n}",
										Start: ast.Position{
											Column: 7,
											Line:   11,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   12,
											},
											File:   "interval.flux",
											Source: "start: time",
											Start: ast.Position{
												Column: 5,
												Line:   12,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 10,
													Line:   12,
												},
												File:   "interval.flux",
												Source: "start",
												Start: ast.Position{
													Column: 5,
													Line:   12,
												},
											},
										},
										Name: "start",
									},
									Ty: &ast.NamedType{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   12,
												},
												File:   "interval.flux",
												Source: "time",
												Start: ast.Position{
													Column: 12,
													Line:   12,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   12,
													},
													File:   "interval.flux",
													Source: "time",
													Start: ast.Position{
														Column: 12,
														Line:   12,
													},
												},
											},
											Name: "time",
										},
									},
								}, &ast.PropertyType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   13,
											},
											File:   "interval.flux",
											Source: "stop: time",
											Start: ast.Position{
												Column: 5,
												Line:   13,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 9,
													Line:   13,
												},
												File:   "interval.flux",
												Source: "stop",
												Start: ast.Position{
													Column: 5,
													Line:   13,
												},
											},
										},
										Name: "stop",
									},
									Ty: &ast.NamedType{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   13,
												},
												File:   "interval.flux",
												Source: "time",
												Start: ast.Position{
													Column: 11,
													Line:   13,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   13,
													},
													File:   "interval.flux",
													Source: "time",
													Start: ast.Position{
														Column: 11,
														Line:   13,
													},
												},
											},
											Name: "time",
										},
									},
								}},
								Tvar: nil,
							},
						},
					},
				},
			},
		}},
		Imports:  nil,
		Metadata: "parser-type=rust",
		Name:     "interval.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   1,
					},
					File:   "interval.flux",
					Source: "package interval",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						File:   "interval.flux",
						Source: "interval",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "interval",
			},
		},
	}},
	Package: "interval",
	Path:    "interval",
}
