package arrowutil

import (
	"fmt"
	"regexp"

	"github.com/influxdata/flux"
	"github.com/influxdata/flux/array"
	"github.com/influxdata/flux/memory"
	"github.com/influxdata/flux/semantic"
	"github.com/influxdata/flux/values"
)

func NewVectorValue(arr array.Interface, typ flux.ColType) values.Vector {
	switch elemType := flux.SemanticType(typ); elemType {
	{{range .}}
	case {{.MonoType}}:
		return New{{.Name}}VectorValue(arr.(*{{.Type}}))
	{{end}}
	default:
		panic(fmt.Errorf("unsupported column data type: %s", typ))
	}
}

// A convenience method for unit testing
func NewVectorFromElements(mem *memory.Allocator, es ...interface{}) values.Vector {
	var typ flux.ColType
	switch es[0].(type) {
	{{range .}}
	case {{.PrimitiveType}}:
		typ = flux.{{.ColType}}
	{{end}}
	default:
		panic(fmt.Errorf("unsupported data type"))
	}

	vs := make([]values.Value, len(es))
	for i, e := range es {
		vs[i] = values.New(e)
	}
	return newVectorFromSlice(vs, typ, mem)
}

func newVectorFromSlice(values []values.Value, typ flux.ColType, mem *memory.Allocator) values.Vector {
	switch elemType := flux.SemanticType(typ); elemType {
	{{range .}}
	case {{.MonoType}}:
		b := array.New{{.Name}}Builder(mem)
		for _, v := range values {
			b.Append(v.{{.ValueType}}())
		}
		arr := b.New{{.Name}}Array()
		return New{{.Name}}VectorValue(arr)
	{{end}}
	default:
		panic(fmt.Errorf("unsupported column data type: %s", typ))
	}
}

{{range .}}
var _ values.Value = &{{.Name}}VectorValue{}
var _ values.Vector = &{{.Name}}VectorValue{}
var _ array.Interface = &{{.Type}}{}

type {{.Name}}VectorValue struct {
	arr *{{.Type}}
	typ semantic.MonoType
}

func New{{.Name}}VectorValue(arr *{{.Type}}) values.Vector {
	return &{{.Name}}VectorValue{
		arr: arr,
		typ: semantic.NewVectorType({{.MonoType}}),
	}
}


func (v *{{.Name}}VectorValue) ElementType() semantic.MonoType {
	t, err := v.typ.ElemType()
	if err != nil {
		panic("could not get element type of vector value")
	}
	return t
}
func (v *{{.Name}}VectorValue) Arr() array.Interface { return v.arr }
func (v *{{.Name}}VectorValue) Retain() {
	v.arr.Retain()
}
func (v *{{.Name}}VectorValue) Release() {
	v.arr.Release()
}

func (v *{{.Name}}VectorValue) Type() semantic.MonoType { return v.typ }
func (v *{{.Name}}VectorValue) IsNull() bool { return false }
func (v *{{.Name}}VectorValue) Str() string { panic(values.UnexpectedKind(semantic.Vector, semantic.String)) }
func (v *{{.Name}}VectorValue) Bytes() []byte { panic(values.UnexpectedKind(semantic.Vector, semantic.Bytes)) }
func (v *{{.Name}}VectorValue) Int() int64 { panic(values.UnexpectedKind(semantic.Vector, semantic.Int)) }
func (v *{{.Name}}VectorValue) UInt() uint64 { panic(values.UnexpectedKind(semantic.Vector, semantic.UInt)) }
func (v *{{.Name}}VectorValue) Float() float64 { panic(values.UnexpectedKind(semantic.Vector, semantic.Float)) }
func (v *{{.Name}}VectorValue) Bool() bool { panic(values.UnexpectedKind(semantic.Vector, semantic.Bool)) }
func (v *{{.Name}}VectorValue) Time() values.Time { panic(values.UnexpectedKind(semantic.Vector, semantic.Time)) }
func (v *{{.Name}}VectorValue) Duration() values.Duration { panic(values.UnexpectedKind(semantic.Vector, semantic.Duration)) }
func (v *{{.Name}}VectorValue) Regexp() *regexp.Regexp { panic(values.UnexpectedKind(semantic.Vector, semantic.Regexp)) }
func (v *{{.Name}}VectorValue) Array() values.Array { panic(values.UnexpectedKind(semantic.Vector, semantic.Array)) }
func (v *{{.Name}}VectorValue) Object() values.Object { panic(values.UnexpectedKind(semantic.Vector, semantic.Object)) }
func (v *{{.Name}}VectorValue) Function() values.Function { panic(values.UnexpectedKind(semantic.Vector, semantic.Function)) }
func (v *{{.Name}}VectorValue) Dict() values.Dictionary { panic(values.UnexpectedKind(semantic.Vector, semantic.Dictionary)) }

func (v *{{.Name}}VectorValue) Equal(other values.Value) bool {
	panic("cannot compare two vectors for equality")
}
{{end}}
